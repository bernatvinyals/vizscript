{
 "Types": [
  {
   "name": "Alpha",
   "descripton": "An alpha object. This is used to control a container's alpha value.",
   "properties": [
    {
     "name": "**Active** As Boolean",
     "description": ""
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**Value** As Double",
     "description": "The alpha value [0.0, 100.0]"
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Array[Type]",
   "descripton": "A dynamic, one-dimensional array. The element type must be specified in brackets. Use the index operator [] to access individual elements. Negative indices refer to elements at the end of the array.",
   "properties": [
    {
     "name": "**LBound** As Integer *[read-only]*",
     "description": "The index of the first elment (always 0)"
    },
    {
     "name": "**Size** As Integer",
     "description": "The size of the array (this member can be set to change the size)"
    },
    {
     "name": "**UBound** As Integer *[read-only]*",
     "description": "The index of the last elment (-1 if the array is empty)"
    }
   ],
   "methods": [
    {
     "name": "Sub **Clear**()",
     "description": "erases all elements"
    },
    {
     "name": "Sub **Erase**(index As Integer)",
     "description": "Erases the element at 'index'."
    },
    {
     "name": "Sub **Insert**(index As Integer, element As Type)",
     "description": "Inserts a new element at 'index'."
    },
    {
     "name": "Sub **Pop**()",
     "description": "removes the last element"
    },
    {
     "name": "Sub **Push**(element As Type)",
     "description": "Inserts a new element at the end of the array."
    },
    {
     "name": "Function **Sort**(object As Base, comparisonFunction As String) As Boolean",
     "description": "Sorts the array. *comparisonFunction* must be the name of a user-defined comparison function that takes two arguments of type *Type* and returns an integer. The return value must be -1 if the the first arguement is smaller than the second, 1 if the first argument is greater than the second, and 0 if the arguments are equal. *object* is the this pointer passed to the comparison function. It may be *null* if the camparison function does not access any member variables. The comparison function must be defined in the same script as the *Type* (if it is a structure) or in the script where *Sort* is called."
    }
   ]
  },
  {
   "name": "AVChannel",
   "descripton": "Base class for Audio Video Channel objects",
   "properties": [
    {
     "name": "**Alpha** As Double",
     "description": "Alpha of this AVChannel"
    },
    {
     "name": "**Center** As Vertex",
     "description": "Transformation center of this AVChannel"
    },
    {
     "name": "**ContentBorderColor** As Color",
     "description": "AVChannel content border color"
    },
    {
     "name": "**ContentCenter** As Vertex",
     "description": "AVChannel content relative center in percent"
    },
    {
     "name": "**ContentCropBottom** As Integer",
     "description": "AVChannel content bottom crop"
    },
    {
     "name": "**ContentCropLeft** As Integer",
     "description": "AVChannel content left crop"
    },
    {
     "name": "**ContentCropRight** As Integer",
     "description": "AVChannel content right crop"
    },
    {
     "name": "**ContentCropTop** As Integer",
     "description": "AVChannel content top crop"
    },
    {
     "name": "**ContentPosition** As Vertex",
     "description": "AVChannel content relative position in percent"
    },
    {
     "name": "**ContentSize** As Vertex",
     "description": "AVChannel content relative size in percent"
    },
    {
     "name": "**ContentZoomMode** As Integer",
     "description": "AVChannel content zoom mode"
    },
    {
     "name": "**ControlledAnimation** As Boolean",
     "description": "Is animation controlled by parent Scene or by this AVChannel"
    },
    {
     "name": "**CropBottom** As Double",
     "description": "Bottom crop of this AVChannel"
    },
    {
     "name": "**CropLeft** As Double",
     "description": "Left crop of this AVChannel"
    },
    {
     "name": "**CropRight** As Double",
     "description": "Right crop of this AVChannel"
    },
    {
     "name": "**CropTop** As Double",
     "description": "Top crop of this AVChannel"
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**ForceKey** As Boolean",
     "description": "Force key of this AVChannel"
    },
    {
     "name": "**KeepAspect** As Boolean",
     "description": "Keep aspect of this AVChannel"
    },
    {
     "name": "**MasterVolume** As Double",
     "description": "Master volume of this AVChannel"
    },
    {
     "name": "**Position** As Vertex",
     "description": "Position of this AVChannel"
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**ScreenCenter** As Vertex",
     "description": "Transformation center of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropBottom** As Double",
     "description": "Bottom crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropLeft** As Double",
     "description": "Left crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropRight** As Double",
     "description": "Right crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropTop** As Double",
     "description": "Top crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenPosition** As Vertex",
     "description": "Position of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenSize** As Vertex",
     "description": "Size of this AVChannel (in Pixels)"
    },
    {
     "name": "**Size** As Vertex",
     "description": "Size of this AVChannel"
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetAudioChannelVolume**(param_1 As Integer) As Double",
     "description": "Volume of audio channel (up to 16 channels)"
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Function **IsValid**() As Boolean",
     "description": "Checks if this AVChannel is valid"
    },
    {
     "name": "Function **SetAudioChannelVolume**(param_1 As Integer) As Double",
     "description": "Volume of audio channel (up to 16 channels)"
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Base",
   "descripton": "A viz object. This is the base class of all other viz types.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "Gets or sets the internal id of this object."
    },
    {
     "name": "**NumChannels** As Integer *[read-only]*",
     "description": "Deprecated. Use *IsAnimated* or *GetChannelsOfObject* instead."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "Mark this object as changed."
    },
    {
     "name": "Function **FindChannel**(channelName As String) As Channel",
     "description": "Deprecated. Use *FindChannelOfObject*"
    },
    {
     "name": "Function **FindKeyframe**(keyframeName As String) As Keyframe",
     "description": "Deprecated. Use *FindKeyframeOfObject*"
    },
    {
     "name": "Function **GetChannels**([out] v As Array[Channel]) As Integer",
     "description": "Deprecated. Use *GetChannelsOfObject*"
    },
    {
     "name": "Function **GetNumberOfAnimationChannels**() As Integer",
     "description": "Deprecated. Use *IsAnimated* instead."
    }
   ]
  },
  {
   "name": "BezierHandle",
   "descripton": "A spline handle of a keyframe.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**LeftAngle** As Double",
     "description": ""
    },
    {
     "name": "**LeftInterpolationMode** As Integer",
     "description": "HANDLE_INTERPOLATION_MODE_SMOOTH\nHANDLE_INTERPOLATION_MODE_LINEAR"
    },
    {
     "name": "**LeftWeight** As Double",
     "description": ""
    },
    {
     "name": "**LockMode** As Integer",
     "description": "HANDLE_LOCK_MODE_LOCKED\nHANDLE_LOCK_MODE_SINGLE\nHANDLE_LOCK_MODE_MIRROR"
    },
    {
     "name": "**RightAngle** As Double",
     "description": ""
    },
    {
     "name": "**RightInterpolationMode** As Integer",
     "description": "HANDLE_INTERPOLATION_MODE_SMOOTH\nHANDLE_INTERPOLATION_MODE_LINEAR"
    },
    {
     "name": "**RightWeight** As Double",
     "description": ""
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Boolean",
   "descripton": "A flag that is either *true* or *false*."
  },
  {
   "name": "Camera",
   "descripton": "A camera object. Camera objects are returned by the Scene's *CurrentCamera* and *GetCamera* members.",
   "properties": [
    {
     "name": "**ActiveExt** As Boolean",
     "description": "Activates/Deactivates the external camera."
    },
    {
     "name": "**Cx** As Double",
     "description": "The center shift in x"
    },
    {
     "name": "**CxExt** As Double *[read-only]*",
     "description": "The center shift in x of the external camera"
    },
    {
     "name": "**Cy** As Double",
     "description": "The center shift in y"
    },
    {
     "name": "**CyExt** As Double *[read-only]*",
     "description": "The center shift in y of the external camera"
    },
    {
     "name": "**DecoupleExternal** As Boolean",
     "description": "If true, viz receives external camera data without copying them to its internal camera structures for rendering."
    },
    {
     "name": "**Direction** As Position",
     "description": "The direction of the camera"
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**FocalPlane** As Double",
     "description": "The focal plane"
    },
    {
     "name": "**Fovx** As Double",
     "description": "The field of view in x"
    },
    {
     "name": "**FovxExt** As Double *[read-only]*",
     "description": "The field of view in x of the external camera"
    },
    {
     "name": "**Fovy** As Double",
     "description": "The field of view in y"
    },
    {
     "name": "**FovyExt** As Double *[read-only]*",
     "description": "The field of view in y of the external camera"
    },
    {
     "name": "**Matrix** As Matrix *[read-only]*",
     "description": "The model matrix of the camera."
    },
    {
     "name": "**Pan** As Double",
     "description": "The pan"
    },
    {
     "name": "**PanExt** As Double *[read-only]*",
     "description": "The pan of the external camera"
    },
    {
     "name": "**Position** As Position",
     "description": "The camera position"
    },
    {
     "name": "**PositionExt** As Position *[read-only]*",
     "description": "The position of the external camera"
    },
    {
     "name": "**PositionTrackingActive** As Boolean",
     "description": "Is position tracking active?"
    },
    {
     "name": "**PositionTrackingContainer** As Container",
     "description": "The tracking object for position tracking"
    },
    {
     "name": "**ProjectionMatrix** As Matrix *[read-only]*",
     "description": "The projection matrix of the camera."
    },
    {
     "name": "**RotationTrackingActive** As Boolean",
     "description": "Is rotation tracking active?"
    },
    {
     "name": "**RotationTrackingContainer** As Container",
     "description": "The tracking object for rotation tracking"
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Tilt** As Double",
     "description": "The tilt"
    },
    {
     "name": "**TiltExt** As Double *[read-only]*",
     "description": "The tilt of the external camera"
    },
    {
     "name": "**Twist** As Double",
     "description": "The twist"
    },
    {
     "name": "**TwistExt** As Double *[read-only]*",
     "description": "The twist of the external camera"
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**View** As Integer",
     "description": "The view type:\nCAM_VIEW_PERSPECTIVE\nCAM_VIEW_ORTHOGONAL"
    },
    {
     "name": "**ViewMatrix** As Matrix *[read-only]*",
     "description": "The view matrix of the camera."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **ResetPositionTracking**()"
    },
    {
     "name": "Sub **ResetRotationTracking**()"
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Center",
   "descripton": "A center object. This is used to control the center of a container.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**x** As Double",
     "description": "Gets or sets the x component."
    },
    {
     "name": "**xyz** As Vertex",
     "description": "Gets or sets the x, y, z components combined into a vertex."
    },
    {
     "name": "**y** As Double",
     "description": "Gets or sets the y component."
    },
    {
     "name": "**z** As Double",
     "description": "Gets or sets the z component."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Channel",
   "descripton": "A channel of a director.",
   "properties": [
    {
     "name": "**Actor** As Base *[read-only]*",
     "description": ""
    },
    {
     "name": "**AnimationObject** As Base *[read-only]*",
     "description": ""
    },
    {
     "name": "**CommandName** As String *[read-only]*",
     "description": ""
    },
    {
     "name": "**Director** As Director *[read-only]*",
     "description": ""
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**FirstKeyframe** As Keyframe *[read-only]*",
     "description": "Gets the leftmost keyframe."
    },
    {
     "name": "**KeyframeCount** As Integer *[read-only]*",
     "description": "Gets the number of keyframes."
    },
    {
     "name": "**LastKeyframe** As Keyframe *[read-only]*",
     "description": "Gets the rightmost keyframe."
    },
    {
     "name": "**Name** As String",
     "description": ""
    },
    {
     "name": "**offset** As Double",
     "description": ""
    },
    {
     "name": "**PostLoopActive** As Boolean",
     "description": ""
    },
    {
     "name": "**PostLoopCounter** As Integer",
     "description": ""
    },
    {
     "name": "**PostSwingActive** As Boolean",
     "description": ""
    },
    {
     "name": "**PreLoopActive** As Boolean",
     "description": ""
    },
    {
     "name": "**PreLoopCounter** As Integer",
     "description": ""
    },
    {
     "name": "**PreSwingActive** As Boolean",
     "description": ""
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**NumKeyframes** As Integer *[read-only]*",
     "description": "Deprecated. Use *KeyframeCount*."
    }
   ],
   "methods": [
    {
     "name": "Function **AddKeyframe**(time As Double) As Keyframe"
    },
    {
     "name": "Function **CopyToDirector**(destination As Director) As Boolean"
    },
    {
     "name": "Sub **Delete**()"
    },
    {
     "name": "Function **DeleteKeyframe**(kf As Keyframe) As Boolean"
    },
    {
     "name": "Function **DeleteKeyframe**(index As Integer) As Boolean"
    },
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframe**(keyframeName As String) As Keyframe",
     "description": "Searches for a keyframe named *keyframeName*."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **GetKeyframe**(n As Integer) As Keyframe",
     "description": "Returns the *n*'th keyframe of the channel."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Function **MoveToDirector**(destination As Director) As Boolean"
    },
    {
     "name": "Sub **Rebuild**()",
     "description": "Rebuilds the channel after it has been modified. Normally, there is no need to call this procedure."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "ClipChannel",
   "descripton": "A ClipChannel object. The *ClipChannel* member of the Base type provides access to the clip channel. Use System.GetClipChannel(number as Integer), whereas *number* >= 0, to get a ClipChannel instance. See also examples section ClipChannel.",
   "properties": [
    {
     "name": "**Alpha** As Double",
     "description": "Get/Set the *Alpha* value for the channel."
    },
    {
     "name": "**AutoRun** As Boolean",
     "description": "Get/Set the autorun mode. If *true* then the clip start playing automatically upon load."
    },
    {
     "name": "**ClipChannelID** As Integer *[read-only]*",
     "description": "Get the clip channel number."
    },
    {
     "name": "**CropBottom** As Double",
     "description": "Get/Set the *Crop Bottom* value for the channel."
    },
    {
     "name": "**CropLeft** As Double",
     "description": "Get/Set the *Crop Left* value for the channel."
    },
    {
     "name": "**CropRight** As Double",
     "description": "Get/Set the *Crop Right* value for the channel."
    },
    {
     "name": "**CropTop** As Double",
     "description": "Get/Set the *Crop Top* value for the channel."
    },
    {
     "name": "**CurrentFrame** As Integer *[read-only]*",
     "description": "Get the current frame."
    },
    {
     "name": "**CurrentFramePending** As Integer *[read-only]*",
     "description": "Get the current frame of the pending clip."
    },
    {
     "name": "**Duration** As Integer *[read-only]*",
     "description": "Get the number of frames of the current clip."
    },
    {
     "name": "**DurationPending** As Integer *[read-only]*",
     "description": "Get the number of frames of the pending clip."
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**FrameIn** As Integer",
     "description": "Get/Set the *In* frame."
    },
    {
     "name": "**FrameInActive** As Integer",
     "description": "Get/Set the *In* frame on the active clip player."
    },
    {
     "name": "**FrameInPending** As Integer",
     "description": "Get/Set the *In* frame on the pending clip player."
    },
    {
     "name": "**FrameOut** As Integer",
     "description": "Get/Set the *Out* frame."
    },
    {
     "name": "**FrameOutActive** As Integer",
     "description": "Get/Set the *Out* frame on the active clip player."
    },
    {
     "name": "**FrameOutPending** As Integer",
     "description": "Get/Set the *Out* frame on the pending clip player."
    },
    {
     "name": "**Height** As Double",
     "description": "Get/Set the *Height* value for the channel."
    },
    {
     "name": "**LoopCount** As Integer",
     "description": "Get/Set the loop count for 3/4-point loop."
    },
    {
     "name": "**LoopInFrame** As Integer",
     "description": "Get/Set the loop in time for 3/4-point loop."
    },
    {
     "name": "**LoopMode** As Boolean",
     "description": "Get/Set the loop mode. If *true* (=default), then the clip will be looped."
    },
    {
     "name": "**LoopModeActive** As Boolean",
     "description": "Get/Set the loop mode on the active clip player. If *true* (=default), then the clip will be looped."
    },
    {
     "name": "**LoopModePending** As Boolean",
     "description": "Get/Set the loop mode on the pending clip player. If *true* (=default), then the clip will be looped."
    },
    {
     "name": "**LoopOutFrame** As Integer",
     "description": "Get/Set the loop out time for 3/4-point loop."
    },
    {
     "name": "**MasterVolume** As Double",
     "description": "Get/Set the *MasterVolume* value for the channel."
    },
    {
     "name": "**ModeOnLoadError** As Integer",
     "description": "Determines the mode upon an error situation when loading a clip. none|pause|stop|flush"
    },
    {
     "name": "**ModeOnLoadError_FLUSH** As Integer *[read-only]*",
     "description": "Constant for *mode on load error* flush."
    },
    {
     "name": "**ModeOnLoadError_NONE** As Integer *[read-only]*",
     "description": "Constant for *mode on load error* none."
    },
    {
     "name": "**ModeOnLoadError_PAUSE** As Integer *[read-only]*",
     "description": "Constant for *mode on load error* pause."
    },
    {
     "name": "**ModeOnLoadError_STOP** As Integer *[read-only]*",
     "description": "Constant for *mode on load error* stop."
    },
    {
     "name": "**PendingClipSupported** As Boolean *[read-only]*",
     "description": "Determines if support for loading pending clips is available."
    },
    {
     "name": "**PlayBackSpeed** As Double",
     "description": "Get/Set the playback speed."
    },
    {
     "name": "**PlayBackSpeedActive** As Double",
     "description": "Get/Set the playback speed on the active clip player."
    },
    {
     "name": "**PlayBackSpeedPending** As Double",
     "description": "Get/Set the playback speed on the pending clip palyer."
    },
    {
     "name": "**PlayerStatus_PENDINGREADY** As Integer *[read-only]*",
     "description": "Constant for *current player status * PENDINGREADY."
    },
    {
     "name": "**PlayMode** As Integer *[read-only]*",
     "description": "Get the current mode of the clip channel."
    },
    {
     "name": "**PlayMode_ERROR** As Integer *[read-only]*",
     "description": "Constant for *current mode * ERROR."
    },
    {
     "name": "**PlayMode_NONE** As Integer *[read-only]*",
     "description": "Constant for *current mode * NONE."
    },
    {
     "name": "**PlayMode_PLAY** As Integer *[read-only]*",
     "description": "Constant for *current mode * PLAYING."
    },
    {
     "name": "**PlayMode_PLAY_PENDING** As Integer *[read-only]*",
     "description": "Constant for *current mode * PLAYING_PENDING."
    },
    {
     "name": "**PlayMode_SCRUB** As Integer *[read-only]*",
     "description": "Constant for *current mode * SCRUBBING."
    },
    {
     "name": "**PlayMode_SCRUB_EOF** As Integer *[read-only]*",
     "description": "Constant for *current mode * SCRUBBING_EOF."
    },
    {
     "name": "**PlayMode_STOP** As Integer *[read-only]*",
     "description": "Constant for *current mode * STOP."
    },
    {
     "name": "**PlayModePending** As Integer *[read-only]*",
     "description": "Get the current mode of the pending clip player."
    },
    {
     "name": "**PosX** As Double",
     "description": "Get/Set the *Position X* value for the channel."
    },
    {
     "name": "**PosY** As Double",
     "description": "Get/Set the *Position Y* value for the channel."
    },
    {
     "name": "**RepeatMode** As Integer",
     "description": "Get/Set the repeat mode for playback and pause. none|field|frame."
    },
    {
     "name": "**RepeatMode_FIELD** As Integer *[read-only]*",
     "description": "Constant for *repeat mode* field."
    },
    {
     "name": "**RepeatMode_FRAME** As Integer *[read-only]*",
     "description": "Constant for *repeat mode* frame."
    },
    {
     "name": "**RepeatMode_NONE** As Integer *[read-only]*",
     "description": "Constant for *repeat mode* none."
    },
    {
     "name": "**RepeatModeActive** As Integer",
     "description": "Get/Set the repeat mode for playback and pause on the active clip player. none|field|frame."
    },
    {
     "name": "**RepeatModePending** As Integer",
     "description": "Get/Set the repeat mode for playback and pause on the pending clip player. none|field|frame."
    },
    {
     "name": "**ReverseFields** As Boolean",
     "description": "If *true* swap fields when playing interlaced material backwards."
    },
    {
     "name": "**ReverseFieldsActive** As Boolean",
     "description": "If *true* swap fields when playing interlaced material backwards on the active clip player."
    },
    {
     "name": "**ReverseFieldsPending** As Boolean",
     "description": "If *true* swap fields when playing interlaced material backwards on the pending clip player."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**UpscaleLuma** As Boolean",
     "description": "If *true* then upscale the luma value in the separate key file."
    },
    {
     "name": "**UpscaleLumaActive** As Boolean",
     "description": "If *true* then upscale the luma value in the separate key file on the active clip player."
    },
    {
     "name": "**UpscaleLumaPending** As Boolean",
     "description": "If *true* then upscale the luma value in the separate key file on the pending clip player."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**Width** As Double",
     "description": "Get/Set the *Width* value for the channel."
    }
   ],
   "methods": [
    {
     "name": "Function **AnimationLoopConfigured**() As Boolean",
     "description": "Returns true if the channel has a valid animation loop, false otherwise."
    },
    {
     "name": "Sub **AnimationLoopFlush**()",
     "description": "Resets all values to their default values."
    },
    {
     "name": "Sub **AnimationLoopStop**()",
     "description": "Sets the loop count to 0 and stops the actual loop."
    },
    {
     "name": "Sub **AnimationStageScrub**(param_1 As Integer)",
     "description": "Resets all values to their default values."
    },
    {
     "name": "Sub **Continue**()",
     "description": "Resume playback from Pause."
    },
    {
     "name": "Sub **ContinueActive**()",
     "description": "Resume playback from Pause in active clip player."
    },
    {
     "name": "Sub **ContinuePending**()",
     "description": "Resume playback from Pause in pending clip player."
    },
    {
     "name": "Function **ConvertFramesToSeconds**(param_1 As Integer) As Double",
     "description": "Converts frames to seconds."
    },
    {
     "name": "Function **ConvertSecondsToFrames**(param_1 As Double) As Integer",
     "description": "Converts seconds to frames."
    },
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Sub **Flush**()",
     "description": "Unload active and pending clip."
    },
    {
     "name": "Sub **FlushActive**()",
     "description": "Unload active clip."
    },
    {
     "name": "Sub **FlushPending**()",
     "description": "Unload pending clip."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **GetClipName**() As String",
     "description": "Get the *ClipName* currently loaded."
    },
    {
     "name": "Function **GetClipNameAbsolute**(ClipName As String) As String",
     "description": "Get absolute clip name."
    },
    {
     "name": "Function **GetClipNameActive**() As String",
     "description": "Get the *ClipName* currently loaded in the active clip player."
    },
    {
     "name": "Function **GetClipNamePending**() As String",
     "description": "Get the *ClipName* currently loaded in the pending clip player."
    },
    {
     "name": "Function **GetFramesPerSecond**() As Double",
     "description": "Get the frames per second."
    },
    {
     "name": "Function **GetRegisterChangedClipFrame**() As String",
     "description": "Returns the registered *ShmKey* set by SetRegisterChangedClipFrame or an empty string if not set."
    },
    {
     "name": "Function **GetRegisterChangedClipMode**() As String",
     "description": "Returns the registered *ShmKey* set by SetRegisterChangedClipMode or an empty string if not set."
    },
    {
     "name": "Function **GetRegisterChangedClipModePending**() As String",
     "description": "Returns the registered *ShmKey* set by SetRegisterChangedClipModePending or an empty string if not set."
    },
    {
     "name": "Sub **GetReportValues**([out] Duration As Integer, [out] CurrentFrame As Integer, [out] PlayMode As Integer)",
     "description": "Shortcut for Duration(), CurrentFrame(), PlayMode()."
    },
    {
     "name": "Sub **GetReportValuesPending**([out] Duration As Integer, [out] CurrentFrame As Integer, [out] PlayMode As Integer)",
     "description": "Shortcut for Duration(), CurrentFrame(), PlayMode()."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Function **IsClipLoaded**(ClipName As String) As Boolean",
     "description": "Determines if given clip is loaded in activeor pending clip player."
    },
    {
     "name": "Function **IsClipLoadedActive**(ClipName As String) As Boolean",
     "description": "Determines if given clip is loaded in active clip player."
    },
    {
     "name": "Function **IsClipLoadedPending**(ClipName As String) As Boolean",
     "description": "Determines if given clip is loaded in pending clip player."
    },
    {
     "name": "Function **IsInterlaced**() As Boolean",
     "description": "Returns true if the clip is interlaced, false otherwise."
    },
    {
     "name": "Sub **Pause**()",
     "description": "Pauses the clip on this channel."
    },
    {
     "name": "Sub **PauseActive**()",
     "description": "Pauses the active clip on this channel."
    },
    {
     "name": "Sub **PausePending**()",
     "description": "Pauses the pending clip on this channel."
    },
    {
     "name": "Sub **Play**(StartFrame As Integer)",
     "description": "Start *Playing* from *StartFrame* position."
    },
    {
     "name": "Sub **PlayActive**(StartFrame As Integer)",
     "description": "Start *Playing* the active clip player from *StartFrame* position."
    },
    {
     "name": "Sub **PlayPending**(StartFrame As Integer)",
     "description": "Start *Playing* the pending clip player from *StartFrame* position."
    },
    {
     "name": "Sub **QueueDelete**(param_1 As Integer)",
     "description": "Deletes the clip from the given position in the queue."
    },
    {
     "name": "Sub **QueueFlush**()",
     "description": "Empties the complete clip queue."
    },
    {
     "name": "Sub **QueueInsert**([out] ClipName As String, [out] FrameIn As Integer, [out] FrameOut As Integer, [out] AutoStart As Boolean, [out] Position As Integer)",
     "description": "Inserts a clip at the given position in the queue."
    },
    {
     "name": "Function **QueueList**() As String",
     "description": "Returns the list of queued clip."
    },
    {
     "name": "Sub **QueueMove**([out] Source As Integer, [out] Target As Integer)",
     "description": "Moves a clip from the given position to a new one in the queue."
    },
    {
     "name": "Sub **QueueReplace**([out] ClipName As String, [out] FrameIn As Integer, [out] FrameOut As Integer, [out] AutoStart As Boolean, [out] Position As Integer)",
     "description": "Replaces a clip at the given postion with the new one."
    },
    {
     "name": "Function **RequestClipStatus**() As String",
     "description": "Requests the clip channel to broadcast its status."
    },
    {
     "name": "Sub **Scrub**(Frame As Integer)",
     "description": "Scrub the clip to *Frame* position."
    },
    {
     "name": "Sub **ScrubActive**(Frame As Integer)",
     "description": "Scrub the active clip to *Frame* position."
    },
    {
     "name": "Sub **ScrubPending**(Frame As Integer)",
     "description": "Scrub the pending clip to *Frame* position."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    },
    {
     "name": "Sub **SetClipName**(ClipName As String)",
     "description": "Load *ClipName* into clip channel with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun."
    },
    {
     "name": "Sub **SetClipNameBack2Back**(ClipName As String)",
     "description": "Load *ClipName* as Back2Back into pending clip player with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun."
    },
    {
     "name": "Sub **SetClipNameBack2BackEx**(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)",
     "description": "Load *ClipName* as Back2Back into pending clip player with parameters in/out and AutoRun."
    },
    {
     "name": "Sub **SetClipNameEx**(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)",
     "description": "Load *ClipName* into clip channel with parameters in/out and AutoRun."
    },
    {
     "name": "Sub **SetClipNamePending**(ClipName As String)",
     "description": "Load *ClipName* into pending clip player with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun."
    },
    {
     "name": "Sub **SetClipNamePendingEx**(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)",
     "description": "Load *ClipName* into pending clip player with parameters in/out and AutoRun."
    },
    {
     "name": "Sub **SetFrameInOut**([out] In As Integer, [out] Out As Integer)",
     "description": "Set the *In* and *Out* frame."
    },
    {
     "name": "Sub **SetFrameInOutActive**([out] In As Integer, [out] Out As Integer)",
     "description": "Set the *In* and *Out* frame on the active clip player."
    },
    {
     "name": "Sub **SetFrameInOutPending**([out] In As Integer, [out] Out As Integer)",
     "description": "Set the *In* and *Out* frame on the pending clip player."
    },
    {
     "name": "Sub **SetNextCueIsInstant**(param_1 As Boolean)",
     "description": "Cue command should be executed on the spot."
    },
    {
     "name": "Sub **SetRegisterChangedClipFrame**(ShmKey As String)",
     "description": "Causes *ShmKey* to be set to the current frame whenever it changes.An empty string removes the binding."
    },
    {
     "name": "Sub **SetRegisterChangedClipMode**(ShmKey As String)",
     "description": "Causes *ShmKey* to be set to the new mode whenever it changes.An empty string removes the binding."
    },
    {
     "name": "Sub **SetRegisterChangedClipModePending**(ShmKey As String)",
     "description": "Causes *ShmKey* to be set to the new mode whenever it changes.An empty string removes the binding."
    },
    {
     "name": "Sub **SetRegisterChangedPlayerStatus**(ShmKey As String)",
     "description": "Causes *ShmKey* to be set to the new status whenever it changes.An empty string removes the binding."
    },
    {
     "name": "Sub **Stop**()",
     "description": "Stops the clip on this channel."
    },
    {
     "name": "Sub **StopActive**()",
     "description": "Stops the active clip on this channel."
    },
    {
     "name": "Sub **StopPending**()",
     "description": "Stops the pending clip on this channel."
    },
    {
     "name": "Sub **SwapEofPending**()",
     "description": "Activate pending clip at EOF of activ clip."
    },
    {
     "name": "Sub **SwapPending**()",
     "description": "Activate pending clip ."
    }
   ]
  },
  {
   "name": "Color",
   "descripton": "A color object consisting of 4 members: red, green blue, alpha.",
   "properties": [
    {
     "name": "**Alpha** As Double",
     "description": "The alpha component [0.0, 1.0]"
    },
    {
     "name": "**Alpha8** As Integer",
     "description": "The alpha component in 8bit [0, 255]"
    },
    {
     "name": "**Blue** As Double",
     "description": "The blue component [0.0, 1.0]"
    },
    {
     "name": "**Blue8** As Integer",
     "description": "The blue component in 8bit [0, 255]"
    },
    {
     "name": "**Green** As Double",
     "description": "The green component [0.0, 1.0]"
    },
    {
     "name": "**Green8** As Integer",
     "description": "The green component in 8bit [0, 255]"
    },
    {
     "name": "**Red** As Double",
     "description": "The red component [0.0, 1.0]"
    },
    {
     "name": "**Red8** As Integer",
     "description": "The red component in 8bit [0, 255]"
    },
    {
     "name": "**Rgb** As Vertex",
     "description": "The red/green/blue components combined into a Vertex value [0.0, 1.0]"
    }
   ],
   "methods": [
    {
     "name": "Sub **GetRGB**([out] r As Double, [out] g As Double, [out] b As Double)",
     "description": "Gets the red, green and blue component [0.0, 1.0]"
    },
    {
     "name": "Sub **GetRGB8**([out] r As Integer, [out] g As Integer, [out] b As Integer)",
     "description": "Gets the red, green and blue component in 8bit [0, 255]"
    },
    {
     "name": "Sub **GetRGBA**([out] r As Double, [out] g As Double, [out] b As Double, [out] a As Double)",
     "description": "Gets the red, green, blue and alpha component [0.0, 1.0]"
    },
    {
     "name": "Sub **GetRGBA8**([out] r As Integer, [out] g As Integer, [out] b As Integer, [out] a As Integer)",
     "description": "Gets the red, green, blue and alpha component in 8bit [0, 255]"
    },
    {
     "name": "Sub **SetRGB**(r As Double, g As Double, b As Double)",
     "description": "Sets the red, green and blue component [0.0, 1.0]"
    },
    {
     "name": "Sub **SetRGB8**(r As Integer, g As Integer, b As Integer)",
     "description": "Sets the red, green and blue component in 8bit [0, 255]"
    },
    {
     "name": "Sub **SetRGBA**(r As Double, g As Double, b As Double, a As Double)",
     "description": "Sets the red, green, blue and alpha component [0.0, 1.0]"
    },
    {
     "name": "Sub **SetRGBA8**(r As Integer, g As Integer, b As Integer, a As Integer)",
     "description": "Sets the red, green, blue and alpha component in 8bit [0, 255]"
    }
   ]
  },
  {
   "name": "Container",
   "descripton": "A container object.",
   "properties": [
    {
     "name": "**Active** As Boolean",
     "description": "The visibility state"
    },
    {
     "name": "**Alpha** As Alpha",
     "description": "The alpha object"
    },
    {
     "name": "**Center** As Center",
     "description": "The center object"
    },
    {
     "name": "**ChildContainer** As Container *[read-only]*",
     "description": "The first child container"
    },
    {
     "name": "**ChildContainerCount** As Integer *[read-only]*",
     "description": "Gets the number of child containers."
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**ExactPicking** As Boolean",
     "description": "Enables/Disables exact picking for OnEnter/OnLeave."
    },
    {
     "name": "**Expert** As Expert",
     "description": "The expert object"
    },
    {
     "name": "**FirstChildContainer** As Container *[read-only]*",
     "description": "The first child container"
    },
    {
     "name": "**Geometry** As Geometry",
     "description": "The geometry object"
    },
    {
     "name": "**Glow** As Glow",
     "description": "The glow object"
    },
    {
     "name": "**HDR** As HDR",
     "description": "The HDR object"
    },
    {
     "name": "**InfoText** As InfoText",
     "description": "The infotext object"
    },
    {
     "name": "**Key** As Key",
     "description": "The key object"
    },
    {
     "name": "**LastChildContainer** As Container *[read-only]*",
     "description": "The last child container"
    },
    {
     "name": "**Material** As Material",
     "description": "The material object"
    },
    {
     "name": "**Matrix** As Matrix *[read-only]*",
     "description": "The model matrix of the cotainer."
    },
    {
     "name": "**Merged** As Boolean *[read-only]*",
     "description": "Indicates whether the container is merged."
    },
    {
     "name": "**MergedChildContainer** As Container *[read-only]*",
     "description": "The first child container within a merged object"
    },
    {
     "name": "**MergedParentContainer** As Container *[read-only]*",
     "description": "The merged parent container"
    },
    {
     "name": "**Name** As String",
     "description": "The name of the container"
    },
    {
     "name": "**NextContainer** As Container *[read-only]*",
     "description": "The next container in the tree"
    },
    {
     "name": "**Open** As Boolean",
     "description": "Indicates whether the container is open, i.e. its subcontainers are visible in the tree"
    },
    {
     "name": "**ParentContainer** As Container *[read-only]*",
     "description": "The parent container"
    },
    {
     "name": "**Position** As Position",
     "description": "The position object"
    },
    {
     "name": "**PreviousContainer** As Container *[read-only]*",
     "description": "The previous container"
    },
    {
     "name": "**Rotation** As Rotation",
     "description": "The rotation object"
    },
    {
     "name": "**Scaling** As Scaling",
     "description": "The scaling object"
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Script** As Script *[read-only]*",
     "description": "The script object: it can be used to dynamically call member procedures of the container"
    },
    {
     "name": "**ScriptPluginInstance** As PluginInstance *[read-only]*",
     "description": "The script's plugin instance"
    },
    {
     "name": "**ScriptSettings** As ScriptSettings *[read-only]*",
     "description": "The script's local settings"
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Texture** As Texture",
     "description": "The texture object"
    },
    {
     "name": "**Uuid** As Uuid *[read-only]*",
     "description": "The UUID of the container"
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**NumChildContainers** As Integer *[read-only]*",
     "description": "Deprecated. Use *ChildContainerCount* instead."
    },
    {
     "name": "**Transform** As Transform",
     "description": "Deprecated."
    }
   ],
   "methods": [
    {
     "name": "Function **AddContainer**(where As Integer) As Container",
     "description": "Inserts and returns a new container; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN."
    },
    {
     "name": "Function **AddScreenOffset**(dx As Integer, dy As Integer) As Vertex",
     "description": "This procedure is identical to *ScreenOffsetToContainerOffset* except that it automatically adds the resulting container offset to the local container position. This procedure is typically called in OnMouseMove to implement dragging of containers."
    },
    {
     "name": "Function **ContainsMouseCursor**() As Boolean",
     "description": "Returns true if and only if the mouse curser is inside the container. For this method to work correctly, it is required that at least one enter or leave callback be defined on the container or on a super-container."
    },
    {
     "name": "Function **CopyTo**(destination As Container, where As Integer) As Container",
     "description": "Copies the container; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN."
    },
    {
     "name": "Function **CreateAlpha**() As Alpha",
     "description": "Creates and returns an alpha object."
    },
    {
     "name": "Function **CreateExpert**() As Expert"
    },
    {
     "name": "Function **CreateFunction**(location As String) As PluginInstance",
     "description": "Creates a plugin instance by name, e.g. \"BUILT_IN*FUNCTION*Autofollow\""
    },
    {
     "name": "Function **CreateGeometry**(location As String) As Geometry",
     "description": "Creates a geometry by name, e.g. \"BUILT_IN*GEOM*Circle\" (for built-ins) or \"GEOM*ObjectName\" (for pool objects)"
    },
    {
     "name": "Function **CreateGeometryBGL**(location As String) As Integer",
     "description": "Creates a geometry by name using background loading, e.g. \"BUILT_IN*GEOM*Circle\" (for built-ins) or \"GEOM*ObjectName\" (for pool objects)"
    },
    {
     "name": "Function **CreateGlow**() As Glow"
    },
    {
     "name": "Function **CreateHDR**() As HDR"
    },
    {
     "name": "Function **CreateInfoText**() As InfoText"
    },
    {
     "name": "Function **CreateKey**() As Key"
    },
    {
     "name": "Function **CreateMaterial**() As Material"
    },
    {
     "name": "Function **CreateMaterial**(location As String) As Material"
    },
    {
     "name": "Function **CreateTexture**(name As String) As Texture",
     "description": "Creates a texture object by name, e.g. \"IMAGE*ImageName\""
    },
    {
     "name": "Function **CreateTexture**(image As Image) As Texture"
    },
    {
     "name": "Function **CreateTextureBGL**(name As String) As Integer",
     "description": "Creates a texture object by name using background loading, e.g. \"IMAGE*ImageName\""
    },
    {
     "name": "Sub **Delete**()",
     "description": "Deletes the container."
    },
    {
     "name": "Sub **DeleteAlpha**()",
     "description": "Deletes the alpha object."
    },
    {
     "name": "Sub **DeleteChildren**()",
     "description": "Deletes the container's child containers."
    },
    {
     "name": "Sub **DeleteExpert**()"
    },
    {
     "name": "Sub **DeleteFunction**(location As String)",
     "description": "Deletes a plugin instance by name, e.g. \"Autofollow\""
    },
    {
     "name": "Sub **DeleteGeometry**()"
    },
    {
     "name": "Sub **DeleteGlow**()"
    },
    {
     "name": "Sub **DeleteHDR**()"
    },
    {
     "name": "Sub **DeleteInfoText**()"
    },
    {
     "name": "Sub **DeleteKey**()"
    },
    {
     "name": "Sub **DeleteMaterial**()"
    },
    {
     "name": "Sub **DeleteTexture**()"
    },
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **FindSiblingSubContainer**(name As String) As Container",
     "description": "Searches among the container's siblings (as well as the container itself) and their sub-containers for a container with the specified name. Otherwise identical to FindSubContainer."
    },
    {
     "name": "Function **FindSubContainer**(name As String) As Container",
     "description": "Searches for a sub-container with the specified name. The search mode is breadth-first. It's possible to combine multiple calls to this function into one call by concatenating the individual container names using $ as a separator. For example, FindSubContainer(\"name1$name2\") has the same effect as FindSubContainer(\"name1\").FindSubContainer(\"name2\")."
    },
    {
     "name": "Function **FindSuperContainer**(name As String) As Container",
     "description": "Searches for a super-container with the specified name."
    },
    {
     "name": "Sub **GetBoundingBox**(v1_out As Vertex, v2_out As Vertex)",
     "description": "Returns in *v1_out* and *v2_out* the left-bottom-back and right-top-front vertices of the container's bounding box."
    },
    {
     "name": "Function **GetBoundingBoxDimensions**() As Vertex",
     "description": "Returns the dimensions (width, height, depth) of the container's bounding box. (The used bounding box was calculated in the last frame.)"
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **GetChildContainerByIndex**(index As Integer) As Container",
     "description": "Returns the child container specified by *index*."
    },
    {
     "name": "Function **GetChildContainerContainingMouseCursor**() As Container",
     "description": "Returns the first child container containing the mouse cursor."
    },
    {
     "name": "Sub **GetContainerAndSubContainers**([out] v As Array[Container], traverseMergedGeometries As Boolean)"
    },
    {
     "name": "Function **GetDirector**() As Director",
     "description": "Finds the first director containing an animation of this container."
    },
    {
     "name": "Function **GetDirectorOfMergedGeometry**() As Director",
     "description": "If this container holds a merged geometry with an embedded animation, this function returns the corresponding director."
    },
    {
     "name": "Function **GetFirstActiveChildContainer**() As Container",
     "description": "Returns the first (=topmost) active child container."
    },
    {
     "name": "Function **GetFunctionPluginInstance**(pluginName As String) As PluginInstance",
     "description": "Provides access to the parameters of a function plugin residing on the container."
    },
    {
     "name": "Function **GetFunctionPluginInstances**([out] v As Array[PluginInstance]) As Integer",
     "description": "Fills the array *v* with all function plugininstances of this container."
    },
    {
     "name": "Function **GetGeometryPluginInstance**() As PluginInstance",
     "description": "Provides access to the parameters of a geometry plugin residing on the container."
    },
    {
     "name": "Function **GetIndexOfFirstActiveChildContainer**() As Integer",
     "description": "Returns the 0-based index of the first active child container within the container (or -1 if there is no active child)."
    },
    {
     "name": "Function **GetLocalIndex**() As Integer",
     "description": "Returns the 0-based index of the container within its parent."
    },
    {
     "name": "Sub **GetScreenBounds**(v1_out As Vertex, v2_out As Vertex)",
     "description": "Returns in *v1_out* and *v2_out* the left-bottom and right-top screen coordinates defining the rectangle occupied by the container. (The used bounding box was calculated in the last frame.)"
    },
    {
     "name": "Sub **GetScreenBoundsProjectOnEditorResolution**(v1_out As Vertex, v2_out As Vertex)",
     "description": "Returns in *v1_out* and *v2_out* the left-bottom and right-top screen coordinates defining the rectangle occupied by the container. (The used bounding box was calculated in the last frame.)The bounding box projection is forced against the editor resolution. This makes a difference in case of halfheight rendering."
    },
    {
     "name": "Function **GetScreenPointToGeomSurface**(x As Integer, y As Integer, pos As Vertex) As Boolean",
     "description": "This procedure calculates the geometry intersection with the projected ray from the specified screen position and returns true on success. The intersection point is returned in world coordinates."
    },
    {
     "name": "Function **GetScreenPositionOrtho**(x As Integer, y As Integer) As Boolean",
     "description": "This procedure gets the container's screen position for orthogonal objects."
    },
    {
     "name": "Function **GetScreenSizeOrtho**(x As Integer, y As Integer) As Boolean",
     "description": "This procedure gets the container's screen size in the same way as you can do it via GUI in the Transformation Editor. There can't be any rotation on the object."
    },
    {
     "name": "Function **GetShaderPluginInstance**() As PluginInstance",
     "description": "Provides access to the parameters of a shader plugin residing on the container."
    },
    {
     "name": "Sub **GetTransformedBoundingBox**(v1_out As Vertex, v2_out As Vertex)",
     "description": "Returns in *v1_out* and *v2_out* the left-bottom-back and right-top-front vertices of the container's bounding box with applied transformation matrix."
    },
    {
     "name": "Function **GetTransformedBoundingBoxDimensions**() As Vertex",
     "description": "Returns the dimensions (width, height, depth) of the container's bounding box with applied transformation matrix. (The used bounding box was calculated in the last frame.)"
    },
    {
     "name": "Function **GetUVCoordinatesOfScreenPoint**(x As Integer, y As Integer) As Vertex",
     "description": "Transforms *(x, y)* into *(u, v)* coordinates that are relative to the x/y cross section of the container's bounding box. The *(u, v)* coordinates are returned in the x and y components of the returned vertex (the z coordinate is always 0.0). If *(x, y)* are within the bounding-box area, *u* and *v* will be within the range [0.0, 1.0]."
    },
    {
     "name": "Sub **HideAllChildContainers**()",
     "description": "Makes all child containers invisible."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Function **IsOnTop**() As Boolean",
     "description": "Returns true if and only if the container is on top at the mouse cursor position. For this procedure to work correctly, it is required that at least one enter or leave callback be defined on the container or on a super-container."
    },
    {
     "name": "Function **IsScreenPointInBoundingBox**(x As Integer, y As Integer) As Boolean",
     "description": "Returns true if the screen point *(x, y)* is inside the area covered by the container's bounding box. (The used bounding box was calculated in the last frame.)"
    },
    {
     "name": "Function **IsVertexInBoundingBox**(v As Vertex) As Boolean",
     "description": "Returns true if *v* (which must be specified in world coordinates) is inside the container's bounding box. (The used bounding box was calculated in the last frame.)"
    },
    {
     "name": "Sub **LocalPosToScreenPos**(pos As Vertex, [out] dX As Double, [out] dY As Double)",
     "description": "Converts local position to the position on the screen."
    },
    {
     "name": "Function **LocalPosToWorldPos**(pos As Vertex) As Vertex",
     "description": "Converts the local position to a world coordinate space position."
    },
    {
     "name": "Sub **MoveAllChannelsToDirector**(director As Director)",
     "description": "Moves the animation channels to the specified director."
    },
    {
     "name": "Sub **MoveAllChannelsToDirector**(dest As Director, root As Director)",
     "description": "Moves the animation channels to the specified director and rebuilds the director hierarchy starting from the specified ancestor."
    },
    {
     "name": "Function **MoveTo**(destination As Container, where As Integer) As Container",
     "description": "Moves the container; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN."
    },
    {
     "name": "Function **MoveToKeepTransformation**(destination As Container, where As Integer) As Container",
     "description": "Moves the container preserving the containers transformation; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN."
    },
    {
     "name": "Sub **RecomputeMatrix**()",
     "description": "Recalculate transformation matrix of the container. This function is useful if you can't wait one field for the updated matrix. Use it carefully and only where it is really needed (current transformation matrix, transformed bounding box, screen-position or screen-size)"
    },
    {
     "name": "Function **ScreenAbsoluteOffsetToLocalPlaneXYOffset**(dXOld As Double, dYOld As Double, dXNew As Double, dYNew As Double, [out] pos As Vertex) As Boolean",
     "description": "Converts the screen offset to a offset on the local object plane. This would mean if you add the returned vertex to the local container's position then it moves exactly to the passed screenposition (on the object plane). With the ability to define start- and stoppoint you can do accurate movements of non-orthogonal objects as well (in contrary to *ScreenOffsetToLocalPlaneXYOffset*). The function returns true on success."
    },
    {
     "name": "Function **ScreenAbsoluteOffsetToLocalPlaneXZOffset**(dXOld As Double, dYOld As Double, dXNew As Double, dYNew As Double, [out] pos As Vertex) As Boolean",
     "description": "Same as *ScreenOffsetToLocalPlaneXYOffset* but on the XZ plane."
    },
    {
     "name": "Function **ScreenAbsoluteOffsetToLocalPlaneYZOffset**(dXOld As Double, dYOld As Double, dXNew As Double, dYNew As Double, [out] pos As Vertex) As Boolean",
     "description": "Same as *ScreenOffsetToLocalPlaneXYOffset* but on the YZ plane."
    },
    {
     "name": "Function **ScreenOffsetToContainerOffset**(dx As Integer, dy As Integer) As Vertex",
     "description": "Transforms a pixel offset into the corresponding offset in local container coordinates. In other words, the vector returned by this procedure is the vector you need to add to the container's local position (i.e. *Position.Xyz*) in order to make the container move *(dx, dy)* pixels on the screen."
    },
    {
     "name": "Function **ScreenOffsetToLocalPlaneXYOffset**(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
     "description": "Converts the screen offset to a offset on the local object plane. This would mean if you add the returned vertex to the local container's position then it moves exactly to the passed screenposition (on the object plane). The function returns true on success."
    },
    {
     "name": "Function **ScreenOffsetToLocalPlaneXZOffset**(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
     "description": "Same as *ScreenOffsetToLocalPlaneXYOffset* but on the XZ plane."
    },
    {
     "name": "Function **ScreenOffsetToLocalPlaneYZOffset**(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
     "description": "Same as *ScreenOffsetToLocalPlaneXYOffset* but on the YZ plane."
    },
    {
     "name": "Function **ScreenPosToLocalGrid**(dX As Double, dY As Double) As Vertex",
     "description": "Converts the screen position to current grid intersection point. The returned coordinates are in local container coordinate space."
    },
    {
     "name": "Function **ScreenPosToLocalPlaneXY**(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
     "description": "Converts the screen position to a position on the local object plane. This would mean if you assign the returned vertex to the local container's position then it moves exactly to the passed screenposition (on the object plane). The function returns true on success."
    },
    {
     "name": "Function **ScreenPosToLocalPlaneXZ**(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
     "description": "Same as *ScreenPosToLocalPlaneXY* but on the XZ plane."
    },
    {
     "name": "Function **ScreenPosToLocalPlaneYZ**(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
     "description": "Same as *ScreenPosToLocalPlaneXY* but on the YZ plane."
    },
    {
     "name": "Function **ScreenPosToLocalPos**(dX As Double, dY As Double) As Vertex",
     "description": "Converts the screen position to the local container position. This would mean that if you assign the returned vertex to the local container's position then it moves exactly to the passed screen position (orthogonal to camera)."
    },
    {
     "name": "Sub **SetCenterPositionLocked**(center As Vertex)",
     "description": "This procedure sets the container's center point without affecting its position."
    },
    {
     "name": "Sub **SetCenterScreenGridPositionLocked**(dX As Double, dY As Double)",
     "description": "This procedure sets the container's center point to the passed screen position, using the current grid, without affecting the container position."
    },
    {
     "name": "Sub **SetCenterScreenPositionLocked**(dX As Double, dY As Double)",
     "description": "This procedure sets the container's center point to the passed screen position without affecting the container position."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    },
    {
     "name": "Function **SetScreenPositionOrtho**(x As Integer, y As Integer) As Boolean",
     "description": "This procedure sets the container's screen position for orthogonal objects."
    },
    {
     "name": "Function **SetScreenSizeOrtho**(x As Integer, y As Integer) As Boolean",
     "description": "This procedure sets the container's screen size in the same way as you can do it via GUI in the Transformation Editor."
    },
    {
     "name": "Sub **ShowAllChildContainers**()",
     "description": "Makes all child containers visible."
    },
    {
     "name": "Sub **ShowOneChildContainer**(index As Integer)",
     "description": "Makes the child container specified by *index* visible and all other child containers invisible."
    },
    {
     "name": "Sub **Update**()",
     "description": "Redraws the container's entry in the scene tree GUI. Ignored in on-air mode."
    },
    {
     "name": "Function **WorldPosToLocalPos**(pos As Vertex) As Vertex",
     "description": "Converts the world position to a local coordinate space position."
    },
    {
     "name": "Function **ScreenOffsetToWorldOffset**(dx As Integer, dy As Integer) As Vertex",
     "description": "Deprecated."
    }
   ]
  },
  {
   "name": "DateTime",
   "descripton": "A type storing date/time information.",
   "properties": [
    {
     "name": "**DayOfMonth** As Integer",
     "description": "Day of month (1-31)"
    },
    {
     "name": "**DayOfWeek** As Integer",
     "description": "Day of week (0-6; Sunday = 0)"
    },
    {
     "name": "**DayOfYear** As Integer",
     "description": "Day of year (0-365)"
    },
    {
     "name": "**Hour** As Integer",
     "description": "Hours after midnight (0-23)"
    },
    {
     "name": "**Minute** As Integer",
     "description": "Minutes after hour (0-59)"
    },
    {
     "name": "**Month** As Integer",
     "description": "Month (1-12)"
    },
    {
     "name": "**Second** As Integer",
     "description": "Seconds after minute (0-59)"
    },
    {
     "name": "**TotalSeconds** As Integer",
     "description": ""
    },
    {
     "name": "**Year** As Integer",
     "description": "Year"
    }
   ],
   "methods": [
    {
     "name": "Sub **Normalize**()",
     "description": "Computes *DayOfWeek* and *DayOfYear* members and forces the other members to standard ranges."
    },
    {
     "name": "Function **ToString**() As String",
     "description": "Returns a date+time string of the form *Wed Jan 02 02:03:55 1980*."
    }
   ]
  },
  {
   "name": "Director",
   "descripton": "A director in the stage.",
   "properties": [
    {
     "name": "**ActionChannelCount** As Integer *[read-only]*",
     "description": "Gets the number of action channels."
    },
    {
     "name": "**ChildDirector** As Director *[read-only]*",
     "description": "The topmost child director"
    },
    {
     "name": "**EventChannel** As Channel *[read-only]*",
     "description": "Gets the event channel."
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Field** As Integer *[read-only]*",
     "description": "The director field"
    },
    {
     "name": "**Name** As String",
     "description": "The name of the director"
    },
    {
     "name": "**NextDirector** As Director *[read-only]*",
     "description": "The next director in the stage tree"
    },
    {
     "name": "**Offset** As Double",
     "description": "The offset of the director (wrt to the parent director)"
    },
    {
     "name": "**ParentDirector** As Director *[read-only]*",
     "description": "The parent director"
    },
    {
     "name": "**PreviousDirector** As Director *[read-only]*",
     "description": "The previous director in the stage tree"
    },
    {
     "name": "**Reverse** As Boolean",
     "description": "Enables/Disables reverse playing."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Time** As Double",
     "description": "The director time"
    },
    {
     "name": "**TotalOffset** As Double *[read-only]*",
     "description": "The sum of all offsets (of this director and its parents)"
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**NumActionChannels** As Integer *[read-only]*",
     "description": "Deprecated. Use *ActionChannelCount*."
    },
    {
     "name": "**NumAnimationChannels** As Integer *[read-only]*",
     "description": "Deprecated. Call *GetAnimationChannels* to get a list of animation channels."
    }
   ],
   "methods": [
    {
     "name": "Function **AddDirector**(where As Integer) As Director",
     "description": "Inserts a new director; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN"
    },
    {
     "name": "Sub **ContinueAnimation**()",
     "description": "Continues the animation."
    },
    {
     "name": "Sub **ContinueAnimationReverse**()",
     "description": "Continues the animation in reverse direction."
    },
    {
     "name": "Function **CopyTo**(destination As Director, where As Integer) As Director",
     "description": "Copies a director; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN"
    },
    {
     "name": "Sub **Delete**()",
     "description": "Removes this director from the stage."
    },
    {
     "name": "Function **FindActionChannel**(channelName As String) As Channel",
     "description": "Searches for an action channel named *channelName*."
    },
    {
     "name": "Function **FindChannel**(channelName As String) As Channel",
     "description": "Searches for an animation channel named *channelName*."
    },
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframe**(keyframeName As String) As Keyframe",
     "description": "Searches for a keyframe named *keyframeName*."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **FindSubDirector**(name As String) As Director",
     "description": "Searches for a sub-director named *name*."
    },
    {
     "name": "Function **GetActionChannel**(index As Integer) As Channel",
     "description": "Returns the action channel at *index*."
    },
    {
     "name": "Sub **GetAnimationChannels**([out] v As Array[Channel])",
     "description": "Fills the specified array with the director's animation channels."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Sub **GetKeyframes**([out] v As Array[Keyframe])",
     "description": "Fills the specified array with the director's keyframes."
    },
    {
     "name": "Sub **GoTo**(stopA As String, stopB As String)",
     "description": "Animate from stop a to b. (stops could be defined as: ${keyframename}, CURRENT (time), F{framenumber}, T{timecode} or a {floating point value} (time))"
    },
    {
     "name": "Sub **GoToRel**(stopA As String, stopB As String)",
     "description": "Animate from stop a to b relative to the director offset. (stops could be defined as: ${keyframename}, CURRENT (time), F{framenumber}, T{timecode} or a {floating point value} (time))"
    },
    {
     "name": "Sub **GoToTrio**(stopA As String, stopB As String)",
     "description": "Animate from stop a to b according to the Trio rules. (stops could be defined as: ${keyframename}, CURRENT (time), F{framenumber}, T{timecode} or a {floating point value} (time))"
    },
    {
     "name": "Function **HasAnimationChannels**() As Boolean",
     "description": "Determines whether this director contains any animation channels (not counting channels in sub-directors)."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Function **IsAnimationRunning**() As Boolean",
     "description": "Returns true if the animation of this director is active."
    },
    {
     "name": "Sub **MoveTo**(destination As Director, where As Integer)",
     "description": "Moves a director; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN"
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    },
    {
     "name": "Sub **Show**(time As Double)",
     "description": "Sets director time."
    },
    {
     "name": "Sub **StartAnimation**()",
     "description": "Starts the animation in this director and its sub-directors."
    },
    {
     "name": "Sub **StartAnimationReverse**()",
     "description": "Starts the animation in this director and its sub-directors in reverse direction."
    },
    {
     "name": "Sub **StopAnimation**()",
     "description": "Stops the animation of this director and its sub-directors."
    },
    {
     "name": "Sub **StopAnimation**(recursive As Boolean)",
     "description": "Stops the animation of this director and, optionally, its sub-directors."
    },
    {
     "name": "Function **GetAnimationChannel**(index As Integer) As Channel",
     "description": "Deprecated. Use *GetAnimationChannels* instead."
    }
   ]
  },
  {
   "name": "Double",
   "descripton": "A double precision floating-point number (64 bits)."
  },
  {
   "name": "Eventpool",
   "descripton": "This type provides access to system-wide event pool.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Sub **emitEvent**(eventname As String, arguments As StringMap)",
     "description": "Emits the given event, sends arguments as keymap-value for optional event arguments. The objectname is derived from the sender (see registerEvents call)."
    },
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **registerAsListener**(objectname As String, eventname As String)",
     "description": "Registers this script as listener for the given event (objectname, event). Callback method OnEvent(objectname, event, arguments) will be called when the event is triggered."
    },
    {
     "name": "Sub **registerEvents**(objectname As String, eventnames As Array[String])",
     "description": "Registers the array of events for the given objectname as available events. Other scripts/objects can now register to them and will be notified when an event is triggered. Must be only called once."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    },
    {
     "name": "Sub **unregisterAsListener**(objectname As String, eventname As String)",
     "description": "Unregisters this script as listener for the given event (objectname, event)."
    }
   ]
  },
  {
   "name": "Expert",
   "descripton": "A container's Expert property. This type provides access to the parameters of the Expert plugin.",
   "properties": [
    {
     "name": "**BackFace** As Boolean",
     "description": "Get/Set back face rendering."
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**ExactPicking** As Boolean",
     "description": "Get/Set exact picking mode."
    },
    {
     "name": "**LineAntialiasing** As Boolean",
     "description": "Get/Set line antialiasing."
    },
    {
     "name": "**Mirror** As Integer",
     "description": "Get/Set mirror mode. Possible settings are:\nEXPERT_MIRROR_NONE\nEXPERT_MIRROR_X\nEXPERT_MIRROR_Y\nEXPERT_MIRROR_Z"
    },
    {
     "name": "**Outline** As Boolean",
     "description": "Get/Set outline rendering."
    },
    {
     "name": "**RenderMode** As Integer",
     "description": "Get/Set render mode. Possible settings are:\nEXPERT_RENDER_ADD\nEXPERT_RENDER_BLEND\nEXPERT_RENDER_REV_SUBTRACT\nEXPERT_RENDER_SUBTRACT\nEXPERT_RENDER_MULTIPLY\nEXPERT_RENDER_REV_MULTIPLY"
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**SeparateSpecular** As Boolean",
     "description": "Get/Set separate specular rendering."
    },
    {
     "name": "**ShadeModel** As Integer",
     "description": "Get/Set shading model. Possible modes are:\nEXPERT_SHADE_FLAT\nEXPERT_SHADE_SMOOTH"
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**TransparancyMode** As Integer",
     "description": "Get/Set transparancy mode. Possible settings are:\nEXPERT_TRANSP_BLEND\nEXPERT_TRANSP_MASK\nEXPERT_TRANSP_FASTEST\nEXPERT_TRANSP_HIGH_QUALITY"
    },
    {
     "name": "**TwoSidedLighting** As Boolean",
     "description": "Get/Set two-sided lighting."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**Wireframe** As Boolean",
     "description": "Get/Set drawing in wireframe mode."
    },
    {
     "name": "**WireframeWidth** As Double",
     "description": "Get/Set line width in wireframe mode (typically ranges from 0.0 to 10.0)."
    },
    {
     "name": "**ZBuffer** As Boolean",
     "description": "Get/Set drawing of Z-Buffer."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Geometry",
   "descripton": "A container's geometry. Depending on whether the geometry is a plugin or a text, this type provides access to the parameters of the plugin or the text.",
   "properties": [
    {
     "name": "**Active** As Boolean",
     "description": ""
    },
    {
     "name": "**Direction** As Integer",
     "description": "The text direction:\nTEXT_DIRECTION_LEFT_TO_RIGHT\nTEXT_DIRECTION_RIGHT_TO_LEFT\nTEXT_DIRECTION_TOP_TO_BOTTOM\nTEXT_DIRECTION_BOTTOM_TO_TOP"
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Kerning** As Double",
     "description": "The kerning value"
    },
    {
     "name": "**LineSpacing** As Double",
     "description": "The line spacing"
    },
    {
     "name": "**Name** As String *[read-only]*",
     "description": "The name of the geometry"
    },
    {
     "name": "**Orientation** As Integer",
     "description": "The text orientation:\nTEXT_ORIENTATION_LEFT\nTEXT_ORIENTATION_RIGHT\nTEXT_ORIENTATION_CENTER\nTEXT_ORIENTATION_CHAR"
    },
    {
     "name": "**PluginInstance** As PluginInstance *[read-only]*",
     "description": "Gets the geometry's plugin data (if this is a geometry plugin)."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Text** As String",
     "description": "The text string (if this is a text geometry)"
    },
    {
     "name": "**Uuid** As Uuid *[read-only]*",
     "description": "The UUID of the geometry"
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VerticalOrientation** As Integer",
     "description": "The vertical text orientation:\nTEXT_ORIENTATION_VERTICAL_TOP\nTEXT_ORIENTATION_VERTICAL_BOTTOM\nTEXT_ORIENTATION_VERTICAL_CENTER\nTEXT_ORIENTATION_VERTICAL_FIRST_LINE"
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**WordSpacing** As Double",
     "description": "The word spacing"
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **GetParameterBool**(parName As String) As Boolean",
     "description": "Gets a geometry parameter of type Boolean."
    },
    {
     "name": "Function **GetParameterColor**(parName As String) As Color",
     "description": "Gets a geometry parameter of type Color."
    },
    {
     "name": "Function **GetParameterContainer**(parName As String) As Container",
     "description": "Gets a geometry parameter of type Container."
    },
    {
     "name": "Function **GetParameterDouble**(parName As String) As Double",
     "description": "Gets a geometry parameter of type Double."
    },
    {
     "name": "Function **GetParameterInt**(parName As String) As Integer",
     "description": "Gets a geometry parameter of type Integer."
    },
    {
     "name": "Function **GetParameterString**(parName As String) As String",
     "description": "Gets a geometry parameter of type String."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **RegisterChangedCallback**()",
     "description": "Causes *OnGeometryChanged* to be invoked whenever the geometry changes."
    },
    {
     "name": "Sub **RegisterTextChangedCallback**()",
     "description": "Causes *OnGeometryChanged* to be invoked whenever the geometry's text changes."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    },
    {
     "name": "Sub **SetParameterBool**(parName As String, v As Boolean)",
     "description": "Sets a geometry parameter of type Boolean."
    },
    {
     "name": "Sub **SetParameterColor**(parName As String, v As Color)",
     "description": "Sets a geometry parameter of type Color."
    },
    {
     "name": "Sub **SetParameterContainer**(parName As String, v As Container)",
     "description": "Sets a geometry parameter of type Container."
    },
    {
     "name": "Sub **SetParameterDouble**(parName As String, v As Double)",
     "description": "Sets a geometry parameter of type Double."
    },
    {
     "name": "Sub **SetParameterInt**(parName As String, v As Integer)",
     "description": "Sets a geometry parameter of type Integer."
    },
    {
     "name": "Sub **SetParameterString**(parName As String, v As String)",
     "description": "Sets a geometry parameter of type String."
    },
    {
     "name": "Sub **UnregisterChangedCallback**()",
     "description": "Removes the binding set up by *RegisterChangedCallback*."
    }
   ]
  },
  {
   "name": "Gesture",
   "descripton": "Holds data of a single gesture event.",
   "properties": [
    {
     "name": "**Event** As Integer *[read-only]*",
     "description": "Returns the gesture event type (GESTURE_MANIPULATION_START, GESTURE_MANIPULATION_STOP, GESTURE_MOMENTUM_START, GESTURE_MOMENTUM_STOP, GESTURE_TAP, GESTURE_DOUBLE_TAP, GESTURE_TAP_HOLD, GESTURE_TRANSFORMATION, GESTURE_PATTERN)."
    },
    {
     "name": "**PatternId** As Integer *[read-only]*",
     "description": "Returns the Id of the recognized gesture pattern (PATTERN_INVALID, PATTERN_RIGHT, PATTERN_LEFT, PATTERN_UP, PATTERN_DOWN, PATTERN_CIRCLE, PATTERN_SQUARE, PATTERN_TRIANGLE)"
    },
    {
     "name": "**Pressure** As Double *[read-only]*",
     "description": "Returns the normalized pressure value in the range 0.0 to 1.0."
    },
    {
     "name": "**Recognizer** As GestureRecognizer *[read-only]*",
     "description": "Returns the recognizer which generated this gesture."
    },
    {
     "name": "**TraceCount** As Integer *[read-only]*",
     "description": "Returns the number of traces involved in this gesture."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "Returns true if the object is valid."
    },
    {
     "name": "**xy** As Vertex *[read-only]*",
     "description": "Returns the gesture position in screen-coordinates."
    }
   ]
  },
  {
   "name": "GestureRecognizer",
   "descripton": "Controls gesture recognition.",
   "properties": [
    {
     "name": "**Active** As Boolean",
     "description": "Activates or deactivates recognition."
    },
    {
     "name": "**CheckPatternOrientation** As Boolean",
     "description": "Gets or sets gesture pattern orientation checking."
    },
    {
     "name": "**HandlePatterns** As Boolean",
     "description": "Gets or sets gesture pattern handling."
    },
    {
     "name": "**HandleTaps** As Boolean",
     "description": "Gets or sets tap handling."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "Returns true if the object is valid."
    }
   ],
   "methods": [
    {
     "name": "Sub **AddHandler**(base As Base)",
     "description": "Adds an event handler (*PluginInstance*)."
    },
    {
     "name": "Sub **AddTrace**(trace As Trace)",
     "description": "Adds a trace to the gesture recognizer."
    },
    {
     "name": "Sub **RemoveHandler**(base As Base)",
     "description": "Removes an event handler (*PluginInstance*)."
    },
    {
     "name": "Sub **RemoveTrace**(trace As Trace)",
     "description": "Removes a trace from the gesture recognizer."
    }
   ]
  },
  {
   "name": "GfxChannel",
   "descripton": "Graphics-channel objects",
   "properties": [
    {
     "name": "**Alpha** As Double",
     "description": "(*Inherited from AVChannel)* Alpha of this AVChannel"
    },
    {
     "name": "**Center** As Vertex",
     "description": "(*Inherited from AVChannel)* Transformation center of this AVChannel"
    },
    {
     "name": "**ContentBorderColor** As Color",
     "description": "(*Inherited from AVChannel)* AVChannel content border color"
    },
    {
     "name": "**ContentCenter** As Vertex",
     "description": "(*Inherited from AVChannel)* AVChannel content relative center in percent"
    },
    {
     "name": "**ContentCropBottom** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content bottom crop"
    },
    {
     "name": "**ContentCropLeft** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content left crop"
    },
    {
     "name": "**ContentCropRight** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content right crop"
    },
    {
     "name": "**ContentCropTop** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content top crop"
    },
    {
     "name": "**ContentPosition** As Vertex",
     "description": "(*Inherited from AVChannel)* AVChannel content relative position in percent"
    },
    {
     "name": "**ContentSize** As Vertex",
     "description": "(*Inherited from AVChannel)* AVChannel content relative size in percent"
    },
    {
     "name": "**ContentZoomMode** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content zoom mode"
    },
    {
     "name": "**ControlledAnimation** As Boolean",
     "description": "(*Inherited from AVChannel)* Is animation controlled by parent Scene or by this AVChannel"
    },
    {
     "name": "**CropBottom** As Double",
     "description": "(*Inherited from AVChannel)* Bottom crop of this AVChannel"
    },
    {
     "name": "**CropLeft** As Double",
     "description": "(*Inherited from AVChannel)* Left crop of this AVChannel"
    },
    {
     "name": "**CropRight** As Double",
     "description": "(*Inherited from AVChannel)* Right crop of this AVChannel"
    },
    {
     "name": "**CropTop** As Double",
     "description": "(*Inherited from AVChannel)* Top crop of this AVChannel"
    },
    {
     "name": "**CurrentCamera** As Integer",
     "description": "Current set camera of this GFXChannel"
    },
    {
     "name": "**ForceKey** As Boolean",
     "description": "(*Inherited from AVChannel)* Force key of this AVChannel"
    },
    {
     "name": "**KeepAspect** As Boolean",
     "description": "(*Inherited from AVChannel)* Keep aspect of this AVChannel"
    },
    {
     "name": "**LocalScene** As Scene",
     "description": "Set local Scene by Scene object"
    },
    {
     "name": "**MasterVolume** As Double",
     "description": "(*Inherited from AVChannel)* Master volume of this AVChannel"
    },
    {
     "name": "**Position** As Vertex",
     "description": "(*Inherited from AVChannel)* Position of this AVChannel"
    },
    {
     "name": "**ScreenCenter** As Vertex",
     "description": "(*Inherited from AVChannel)* Transformation center of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropBottom** As Double",
     "description": "(*Inherited from AVChannel)* Bottom crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropLeft** As Double",
     "description": "(*Inherited from AVChannel)* Left crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropRight** As Double",
     "description": "(*Inherited from AVChannel)* Right crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropTop** As Double",
     "description": "(*Inherited from AVChannel)* Top crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenPosition** As Vertex",
     "description": "(*Inherited from AVChannel)* Position of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenSize** As Vertex",
     "description": "(*Inherited from AVChannel)* Size of this AVChannel (in Pixels)"
    },
    {
     "name": "**Size** As Vertex",
     "description": "(*Inherited from AVChannel)* Size of this AVChannel"
    }
   ],
   "methods": [
    {
     "name": "Function **GetAudioChannelVolume**(param_1 As Integer) As Double",
     "description": "*(Inherited from AVChannel)* Volume of audio channel (up to 16 channels)"
    },
    {
     "name": "Function **IsValid**() As Boolean",
     "description": "Is this a valid GFXChannel"
    },
    {
     "name": "Function **IsValid**() As Boolean",
     "description": "*(Inherited from AVChannel)* Checks if this AVChannel is valid"
    },
    {
     "name": "Function **SetAudioChannelVolume**(param_1 As Integer) As Double",
     "description": "*(Inherited from AVChannel)* Volume of audio channel (up to 16 channels)"
    },
    {
     "name": "Sub **SetObject**(param_1 As String)",
     "description": "Set local Scene by location (UUID)"
    }
   ]
  },
  {
   "name": "Glow",
   "descripton": "A container's Glow property. This type provides access to the parameters of the Glow plugin.",
   "properties": [
    {
     "name": "**BlurWidth** As Double",
     "description": "Get/Set blur width."
    },
    {
     "name": "**Color** As Color",
     "description": "Get/Set color."
    },
    {
     "name": "**DrawTexture** As Boolean",
     "description": "Get/Set texture drawing active state."
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**ObjectStrength** As Double",
     "description": "Get/Set object strength."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**Strength** As Double",
     "description": "Get/Set glow strength."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Textured** As Boolean",
     "description": "Get/Set textured mode active state."
    },
    {
     "name": "**TextureUnit** As Integer",
     "description": "Get/Set texture unit."
    },
    {
     "name": "**UseColor** As Boolean",
     "description": "Get/Set use of color."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Grid",
   "descripton": "A grid object.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Locked** As Boolean",
     "description": "Gets or sets grid lock."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Type** As Integer",
     "description": "Gets or sets the grid type. Possible types are:\nGRID_TYPE_XY\nGRID_TYPE_XZ\nGRID_TYPE_ZY\nGRID_TYPE_FREE\nGRID_TYPE_NONE"
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **MoveToContainer**(container As Container)",
     "description": "Moves grid to the specified container and aligns it."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "HDR",
   "descripton": "A container's HDR property. This type provides access to the parameters of the HDR plugin.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Image",
   "descripton": "An image object. This is used to retrieve an image's properties.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Name** As String *[read-only]*",
     "description": "The name of the image"
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Uuid** As Uuid *[read-only]*",
     "description": "The UUID of the image"
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "ImageChannel",
   "descripton": "Image-channel objects",
   "properties": [
    {
     "name": "**Alpha** As Double",
     "description": "(*Inherited from AVChannel)* Alpha of this AVChannel"
    },
    {
     "name": "**Center** As Vertex",
     "description": "(*Inherited from AVChannel)* Transformation center of this AVChannel"
    },
    {
     "name": "**ContentBorderColor** As Color",
     "description": "(*Inherited from AVChannel)* AVChannel content border color"
    },
    {
     "name": "**ContentCenter** As Vertex",
     "description": "(*Inherited from AVChannel)* AVChannel content relative center in percent"
    },
    {
     "name": "**ContentCropBottom** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content bottom crop"
    },
    {
     "name": "**ContentCropLeft** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content left crop"
    },
    {
     "name": "**ContentCropRight** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content right crop"
    },
    {
     "name": "**ContentCropTop** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content top crop"
    },
    {
     "name": "**ContentPosition** As Vertex",
     "description": "(*Inherited from AVChannel)* AVChannel content relative position in percent"
    },
    {
     "name": "**ContentSize** As Vertex",
     "description": "(*Inherited from AVChannel)* AVChannel content relative size in percent"
    },
    {
     "name": "**ContentZoomMode** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content zoom mode"
    },
    {
     "name": "**ControlledAnimation** As Boolean",
     "description": "(*Inherited from AVChannel)* Is animation controlled by parent Scene or by this AVChannel"
    },
    {
     "name": "**CropBottom** As Double",
     "description": "(*Inherited from AVChannel)* Bottom crop of this AVChannel"
    },
    {
     "name": "**CropLeft** As Double",
     "description": "(*Inherited from AVChannel)* Left crop of this AVChannel"
    },
    {
     "name": "**CropRight** As Double",
     "description": "(*Inherited from AVChannel)* Right crop of this AVChannel"
    },
    {
     "name": "**CropTop** As Double",
     "description": "(*Inherited from AVChannel)* Top crop of this AVChannel"
    },
    {
     "name": "**ForceKey** As Boolean",
     "description": "(*Inherited from AVChannel)* Force key of this AVChannel"
    },
    {
     "name": "**KeepAspect** As Boolean",
     "description": "(*Inherited from AVChannel)* Keep aspect of this AVChannel"
    },
    {
     "name": "**MasterVolume** As Double",
     "description": "(*Inherited from AVChannel)* Master volume of this AVChannel"
    },
    {
     "name": "**Position** As Vertex",
     "description": "(*Inherited from AVChannel)* Position of this AVChannel"
    },
    {
     "name": "**ScreenCenter** As Vertex",
     "description": "(*Inherited from AVChannel)* Transformation center of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropBottom** As Double",
     "description": "(*Inherited from AVChannel)* Bottom crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropLeft** As Double",
     "description": "(*Inherited from AVChannel)* Left crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropRight** As Double",
     "description": "(*Inherited from AVChannel)* Right crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropTop** As Double",
     "description": "(*Inherited from AVChannel)* Top crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenPosition** As Vertex",
     "description": "(*Inherited from AVChannel)* Position of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenSize** As Vertex",
     "description": "(*Inherited from AVChannel)* Size of this AVChannel (in Pixels)"
    },
    {
     "name": "**Size** As Vertex",
     "description": "(*Inherited from AVChannel)* Size of this AVChannel"
    }
   ],
   "methods": [
    {
     "name": "Function **GetAudioChannelVolume**(param_1 As Integer) As Double",
     "description": "*(Inherited from AVChannel)* Volume of audio channel (up to 16 channels)"
    },
    {
     "name": "Function **IsValid**() As Boolean",
     "description": "Is this a valid ImageChannel"
    },
    {
     "name": "Function **IsValid**() As Boolean",
     "description": "*(Inherited from AVChannel)* Checks if this AVChannel is valid"
    },
    {
     "name": "Function **SetAudioChannelVolume**(param_1 As Integer) As Double",
     "description": "*(Inherited from AVChannel)* Volume of audio channel (up to 16 channels)"
    }
   ]
  },
  {
   "name": "InfoText",
   "descripton": "A container's InfoText property. This type provides access to the parameters of the InfoText plugin.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Text** As String",
     "description": "Get/Set info text."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Integer",
   "descripton": "A 32-bit signed integer."
  },
  {
   "name": "Key",
   "descripton": "A key object. This is used to control a container's key object.",
   "properties": [
    {
     "name": "**Active** As Boolean",
     "description": ""
    },
    {
     "name": "**AlphaValue** As Double",
     "description": ""
    },
    {
     "name": "**AutoAlpha** As Boolean",
     "description": ""
    },
    {
     "name": "**DrawKey** As Boolean",
     "description": ""
    },
    {
     "name": "**DrawRGB** As Boolean",
     "description": ""
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Keyframe",
   "descripton": "An animation keyframe.",
   "properties": [
    {
     "name": "**ActionString** As String",
     "description": "Gets or sets the command string of an action keyframe."
    },
    {
     "name": "**BoolValue** As Boolean",
     "description": "Gets or sets the value of a boolean keyframe."
    },
    {
     "name": "**Channel** As Channel *[read-only]*",
     "description": "Gets the channel that contains this keyframe."
    },
    {
     "name": "**ColorValue** As Color",
     "description": "Gets or sets the value of a color keyframe."
    },
    {
     "name": "**EventDirection** As Integer",
     "description": "Get or sets the direction of an event keyframe. Possible values are: ED_BOTH, ED_NORMAL, ED_REVERSE"
    },
    {
     "name": "**EventDuration** As Double",
     "description": "Get or sets the duration of an event keyframe (in seconds)."
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**EventValue** As Integer",
     "description": "Get or sets the type of an event keyframe. Possible values are: ET_STOP, ET_LOCAL_STOP, ET_TAG."
    },
    {
     "name": "**FloatValue** As Double",
     "description": "Gets or sets the value of a float keyframe."
    },
    {
     "name": "**IntValue** As Integer",
     "description": "Gets or sets the value of an integer keyframe."
    },
    {
     "name": "**Locked** As Boolean",
     "description": "Gets or sets the locked status of a path point keyframe."
    },
    {
     "name": "**MaterialValue** As Material *[read-only]*",
     "description": "Gets or sets the value of a material keyframe."
    },
    {
     "name": "**Name** As String",
     "description": "Gets or sets the keyframe's name."
    },
    {
     "name": "**NextKeyframe** As Keyframe *[read-only]*",
     "description": "Gets the next keyframe."
    },
    {
     "name": "**NumberOfAxes** As Integer *[read-only]*",
     "description": "Returns the number of spline axes."
    },
    {
     "name": "**PathHandle** As BezierHandle *[read-only]*",
     "description": "Gets the associated path handle if this is a position keyframe. If not, *Null* is returned."
    },
    {
     "name": "**PreviousKeyframe** As Keyframe *[read-only]*",
     "description": "Gets the previous keyframe."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Time** As Double",
     "description": "Gets or sets the keyframe's time (in seconds)."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**XyzValue** As Vertex",
     "description": "Gets or sets the value of a a rotation or scaling keyframe or a path point keyframe."
    },
    {
     "name": "**NumAxes** As Integer *[read-only]*",
     "description": "Deprecated. Use *NumberOfAxes*."
    }
   ],
   "methods": [
    {
     "name": "Function **Delete**() As Boolean",
     "description": "Deletes the keyframe."
    },
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetBezierHandle**(axis As Integer) As BezierHandle",
     "description": "Returns the bezier handle for the specified axis. The *axis* parameter is only used if the keyframe has multiple splines, which is the case for rotation, scaling, and material keyframes. When called on a position keyframe, this procedure returns the handle for the distance spline. To get the path handle, use the *PathHandle* property instead."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    },
    {
     "name": "Sub **UpdateAnimation**()",
     "description": "Update animation to reflect changes to keyframe. (This update isn't performed in OnAir mode where the update is done as soon as the animation is started.)"
    }
   ]
  },
  {
   "name": "Light",
   "descripton": "A light object. Light objects are returned by the Scene's *GetLight* member.",
   "properties": [
    {
     "name": "**Attenuation** As Double",
     "description": ""
    },
    {
     "name": "**Color** As Color",
     "description": ""
    },
    {
     "name": "**Direction** As Rotation",
     "description": ""
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Position** As Position",
     "description": ""
    },
    {
     "name": "**PositionTrackingActive** As Boolean",
     "description": ""
    },
    {
     "name": "**PositionTrackingContainer** As Container",
     "description": ""
    },
    {
     "name": "**RotationTrackingActive** As Boolean",
     "description": ""
    },
    {
     "name": "**RotationTrackingContainer** As Container",
     "description": ""
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Type** As Integer",
     "description": "The light type:\nLIGHT_TYPE_LOCAL\nLIGHT_TYPE_SPOT\nLIGHT_TYPE_INFINITE"
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **ResetPositionTracking**()"
    },
    {
     "name": "Sub **ResetRotationTracking**()"
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "LiveChannel",
   "descripton": "A LiveChannel object. The *LiveChannel* member of the Base type provides access to the live channel. Use System.GetLiveChannel(number as Integer), whereas *number* >= 0, to get a LiveChannel instance. See also examples section LiveChannel.",
   "properties": [
    {
     "name": "**Alpha** As Double",
     "description": "Get/Set the *Alpha* value for the channel."
    },
    {
     "name": "**CropBottom** As Double",
     "description": "Get/Set the *Crop Bottom* value for the channel."
    },
    {
     "name": "**CropLeft** As Double",
     "description": "Get/Set the *Crop Left* value for the channel."
    },
    {
     "name": "**CropRight** As Double",
     "description": "Get/Set the *Crop Right* value for the channel."
    },
    {
     "name": "**CropTop** As Double",
     "description": "Get/Set the *Crop Top* value for the channel."
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Height** As Double",
     "description": "Get/Set the *Height* value for the channel."
    },
    {
     "name": "**LiveChannelID** As Integer *[read-only]*",
     "description": "Get the live channel number."
    },
    {
     "name": "**MasterVolume** As Double",
     "description": "Get/Set the *MasterVolume* value for the channel."
    },
    {
     "name": "**PosX** As Double",
     "description": "Get/Set the *Position X* value for the channel."
    },
    {
     "name": "**PosY** As Double",
     "description": "Get/Set the *Position Y* value for the channel."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**Width** As Double",
     "description": "Get/Set the *Width* value for the channel."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Material",
   "descripton": "A material object. This is used to control a container's material.",
   "properties": [
    {
     "name": "**Alpha** As Double",
     "description": "The alpha value [0.0, 1.0]"
    },
    {
     "name": "**Alpha8** As Integer",
     "description": "The alpha value in 8bit [0, 255]"
    },
    {
     "name": "**Ambient** As Color",
     "description": "The ambient color"
    },
    {
     "name": "**Color** As Color",
     "description": "The color"
    },
    {
     "name": "**Diffuse** As Color",
     "description": "The diffuse color"
    },
    {
     "name": "**Emission** As Color",
     "description": "The emission color"
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Lit** As Boolean",
     "description": "Controls whether lighting is enabled."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Shininess** As Double",
     "description": "The shininess [0.0, 1.0]"
    },
    {
     "name": "**Specular** As Color",
     "description": "The specular color"
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Matrix",
   "descripton": "A 4x4 matrix. The index operator [] can be used to access individual entries, with indices 0, 1, 2, 3 referring to the entries of the first column, 4, 5, 6, 7 to the second, etc.",
   "methods": [
    {
     "name": "Sub **Frustum**(left As Double, right As Double, bottom As Double, top As Double, near As Double, far As Double)"
    },
    {
     "name": "Function **GetDeterminant**() As Double"
    },
    {
     "name": "Function **GetRotation**() As Vertex"
    },
    {
     "name": "Function **GetRotationXYZ**(v As Vertex, v2 As Vertex) As Boolean",
     "description": "This function can be used to retrieve the rotations used by a container. The return value is true if two solutions for the x, y and z rotation were found. If the return value is false, the solution is undefined (x rotation is either 90 or 270 degrees)."
    },
    {
     "name": "Function **GetRotationZXY**(v As Vertex, v2 As Vertex) As Boolean",
     "description": "This function can be used to retrieve the rotations used by a camera. The return value is true if two solutions for the x, y and z rotation were found. If the return value is false, the solution is undefined (x rotation is either 90 or 270 degrees)."
    },
    {
     "name": "Function **GetScaling**() As Vertex"
    },
    {
     "name": "Function **GetScaling2**() As Vertex",
     "description": "Returns the squared scaling factors."
    },
    {
     "name": "Function **GetTranslation**() As Vertex"
    },
    {
     "name": "Function **Invert**() As Boolean"
    },
    {
     "name": "Sub **LoadIdentity**()"
    },
    {
     "name": "Sub **LoadMatrix**()",
     "description": "Performs a glLoadMatrix()."
    },
    {
     "name": "Sub **MultMatrix**()",
     "description": "Performs a glMultMatrix()."
    },
    {
     "name": "Sub **Ortho**(left As Double, right As Double, bottom As Double, top As Double, near As Double, far As Double)"
    },
    {
     "name": "Sub **Perspective**(fov As Double, aspect As Double, near As Double, far As Double)"
    },
    {
     "name": "Sub **Rotate**(angle As Double, v As Vertex)"
    },
    {
     "name": "Sub **Rotate**(v As Vertex)"
    },
    {
     "name": "Sub **RotateX**(angle As Double)"
    },
    {
     "name": "Sub **RotateY**(angle As Double)"
    },
    {
     "name": "Sub **RotateZ**(angle As Double)"
    },
    {
     "name": "Sub **Scale**(v As Vertex)"
    },
    {
     "name": "Sub **Translate**(v As Vertex)"
    },
    {
     "name": "Sub **Transpose**()"
    }
   ]
  },
  {
   "name": "PluginInstance",
   "descripton": "This type provides access to the parameters of geometry or function plugin. Objects of this type are returned by members of Geometry and Container.",
   "properties": [
    {
     "name": "**Active** As Boolean",
     "description": "Gets or sets the plugin instance's active state."
    },
    {
     "name": "**DOFEventDistribution** As Boolean",
     "description": "Distribute DOF events to other plugin instances (default) or fire them only on the local instance."
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**HitContainer** As Container *[read-only]*",
     "description": "Returns the last hit container."
    },
    {
     "name": "**MTAlignGrid** As Boolean",
     "description": "Gets or sets grid alignment on or off (default)."
    },
    {
     "name": "**MTDOFEventDistribution** As Boolean",
     "description": "Distribute multi-touch DOF events to other plugin instances (default) or fire them only on the local instance."
    },
    {
     "name": "**MTGrid** As Grid",
     "description": "Gets or sets the grid for the current plugin instance."
    },
    {
     "name": "**MTHasMomentum** As Boolean *[read-only]*",
     "description": "Is true if the *PluginInstance* is receiving multi-touch momentum updates."
    },
    {
     "name": "**MTObjectPlane** As Integer",
     "description": "Gets or sets coordinate plane (XY) projection."
    },
    {
     "name": "**MTRegistered** As Boolean *[read-only]*",
     "description": "Is true if a control type was already registered for the current plugin instance."
    },
    {
     "name": "**MTTouched** As Boolean *[read-only]*",
     "description": "Is true if the *Container* is touched."
    },
    {
     "name": "**MTUseCenter** As Boolean",
     "description": "Gets or sets automatic center shift on (default) or off."
    },
    {
     "name": "**PluginName** As String *[read-only]*",
     "description": "Gets the plugin name."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Script** As Script *[read-only]*",
     "description": "Provides dynamic access to the script functions of the plugin instance. (This only makes sense for scripted plugins.)"
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**TraceCount** As Integer *[read-only]*",
     "description": "Gets the current number of traces acting on this object."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **GetParameterBool**(parName As String) As Boolean",
     "description": "Gets a parameter value of type Boolean."
    },
    {
     "name": "Function **GetParameterColor**(parName As String) As Color",
     "description": "Gets a parameter value of type Color."
    },
    {
     "name": "Function **GetParameterContainer**(parName As String) As Container",
     "description": "Gets a parameter value of type Container."
    },
    {
     "name": "Function **GetParameterDouble**(parName As String) As Double",
     "description": "Gets a parameter value of type Double."
    },
    {
     "name": "Function **GetParameterInt**(parName As String) As Integer",
     "description": "Gets a parameter value of type Integer."
    },
    {
     "name": "Function **GetParameterString**(parName As String) As String",
     "description": "Gets a parameter value of type string."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **MTRegister**(stroke As Integer, controlType As Integer)",
     "description": "Registers a control for a certain stroke in the multitouch core. Control types:\nMT_CONTROL_BUTTON\nMT_CONTROL_PZR2D\nMT_CONTROL_PZR2D_TILT"
    },
    {
     "name": "Sub **MTRegisterEx**(stroke As Integer, controlType As Integer, params As Array[Double])",
     "description": "Same as *MTRegister* but with the additional possibility to set parameters for the specified control. E.g.:\ndim params as array[double]\nparams.push(0) 'lock x\nparams.push(0) 'lock y\nparams.push(0) 'lock position\nparams.push(0) 'lock rotation\nparams.push(0) 'lock scale\nparams.push(1) 'momentum\nparams.push(0.027) 'friction coefficient (here: steel on ice)\nscriptplugininstance.MTRegisterEx(stroke, MT_CONTROL_PZR2D, params)"
    },
    {
     "name": "Sub **MTSetPosition**(x As Integer, y As Integer)",
     "description": "Sets the position of the container"
    },
    {
     "name": "Sub **MTUnregister**()",
     "description": "Unregisters a control in the multitouch core."
    },
    {
     "name": "Sub **PushButton**(parName As String)",
     "description": "Calls the *OnExecAction* handler of the push button identified by *parName*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    },
    {
     "name": "Sub **SetParameterBool**(parName As String, v As Boolean)",
     "description": "Sets a parameter value of type Boolean."
    },
    {
     "name": "Sub **SetParameterColor**(parName As String, v As Color)",
     "description": "Sets a parameter value of type Color."
    },
    {
     "name": "Sub **SetParameterContainer**(parName As String, v As Container)",
     "description": "Sets a parameter value of type Container"
    },
    {
     "name": "Sub **SetParameterDouble**(parName As String, v As Double)",
     "description": "Sets a parameter value of type Double."
    },
    {
     "name": "Sub **SetParameterInt**(parName As String, v As Integer)",
     "description": "Sets a parameter value of type Integer."
    },
    {
     "name": "Sub **SetParameterString**(parName As String, v As String)",
     "description": "Sets a parameter value of type Dtring."
    }
   ]
  },
  {
   "name": "Position",
   "descripton": "A position object. This is used to control the position of a container, camera, or light.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**x** As Double",
     "description": "Gets or sets the x component."
    },
    {
     "name": "**xyz** As Vertex",
     "description": "Gets or sets the x, y, z components combined into a vertex."
    },
    {
     "name": "**y** As Double",
     "description": "Gets or sets the y component."
    },
    {
     "name": "**z** As Double",
     "description": "Gets or sets the z component."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "ProxyChannel",
   "descripton": "Proxy-channel objects act as a placeholder for other channel types like Live, Clip, Stream, Gfx, ...",
   "properties": [
    {
     "name": "**Alpha** As Double",
     "description": "ProxyChannel alpha value"
    },
    {
     "name": "**AudioVolume** As Double",
     "description": "ProxyChannel audio volume"
    },
    {
     "name": "**Center** As Vertex",
     "description": "ProxyChannel center in percent"
    },
    {
     "name": "**ContentBorderColor** As Color",
     "description": "ProxyChannel content border color"
    },
    {
     "name": "**ContentCenter** As Vertex",
     "description": "ProxyChannel content relative center in percent"
    },
    {
     "name": "**ContentCropBottom** As Integer",
     "description": "ProxyChannel content bottom crop"
    },
    {
     "name": "**ContentCropLeft** As Integer",
     "description": "ProxyChannel content left crop"
    },
    {
     "name": "**ContentCropRight** As Integer",
     "description": "ProxyChannel content right crop"
    },
    {
     "name": "**ContentCropTop** As Integer",
     "description": "ProxyChannel content top crop"
    },
    {
     "name": "**ContentPosition** As Vertex",
     "description": "ProxyChannel content relative position in percent"
    },
    {
     "name": "**ContentSize** As Vertex",
     "description": "ProxyChannel content relative size in percent"
    },
    {
     "name": "**ContentZoomMode** As Integer",
     "description": "ProxyChannel content zoom mode"
    },
    {
     "name": "**CropBottom** As Integer",
     "description": "ProxyChannel bottom crop"
    },
    {
     "name": "**CropLeft** As Integer",
     "description": "ProxyChannel left crop"
    },
    {
     "name": "**CropRight** As Integer",
     "description": "ProxyChannel right crop"
    },
    {
     "name": "**CropTop** As Integer",
     "description": "ProxyChannel top crop"
    },
    {
     "name": "**Position** As Vertex",
     "description": "ProxyChannel relative position in percent"
    },
    {
     "name": "**Size** As Vertex",
     "description": "ProxyChannel center in percent"
    }
   ],
   "methods": [
    {
     "name": "Function **GetWrappedChannelType**() As String",
     "description": "Returns the type of the wrapped channel object"
    },
    {
     "name": "Function **GetWrappedChannelVizId**() As Integer",
     "description": "Returns the internal id of the wrapped channel object"
    },
    {
     "name": "Function **IsValid**() As Boolean",
     "description": "Is this a valid ProxyChannel"
    },
    {
     "name": "Function **SetObject**(param_1 As String) As Boolean",
     "description": "Sets a new object into the channel"
    }
   ]
  },
  {
   "name": "Rotation",
   "descripton": "A rotation object. This is used to control the position of a container or light.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**x** As Double",
     "description": "Gets or sets the x component."
    },
    {
     "name": "**xyz** As Vertex",
     "description": "Gets or sets the x, y, z components combined into a vertex."
    },
    {
     "name": "**y** As Double",
     "description": "Gets or sets the y component."
    },
    {
     "name": "**z** As Double",
     "description": "Gets or sets the z component."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Scaling",
   "descripton": "A scaling object. This is used to control the scaling of a container.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**x** As Double",
     "description": "Gets or sets the x component."
    },
    {
     "name": "**xyz** As Vertex",
     "description": "Gets or sets the x, y, z components combined into a vertex."
    },
    {
     "name": "**y** As Double",
     "description": "Gets or sets the y component."
    },
    {
     "name": "**z** As Double",
     "description": "Gets or sets the z component."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Scene",
   "descripton": "A scene object. The *Scene* member of the Base type provides access to the current scene.",
   "properties": [
    {
     "name": "**AlphaClearValue** As Integer",
     "description": ""
    },
    {
     "name": "**AutoKeyActive** As Boolean",
     "description": ""
    },
    {
     "name": "**AutoKeyPosition** As Vertex",
     "description": ""
    },
    {
     "name": "**BackgroundColor** As Color",
     "description": ""
    },
    {
     "name": "**CurrentCamera** As Camera *[read-only]*",
     "description": "The current camera"
    },
    {
     "name": "**CurrentCameraIndex** As Integer",
     "description": "The index of the current camera"
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Location** As String *[read-only]*",
     "description": "The location of the scene"
    },
    {
     "name": "**LocationPath** As String *[read-only]*",
     "description": "The full db location of the scene"
    },
    {
     "name": "**Map** As SharedMemory *[read-only]*",
     "description": "The scene's memory map, used for data sharing within a scene."
    },
    {
     "name": "**Name** As String *[read-only]*",
     "description": "The name of the scene"
    },
    {
     "name": "**RootContainer** As Container *[read-only]*",
     "description": "The topmost container in the scene tree"
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Script** As Script *[read-only]*",
     "description": "The script object: it can be used used to dynamically call member procedures of the scene"
    },
    {
     "name": "**ScriptPluginInstance** As PluginInstance *[read-only]*",
     "description": "The script's plugin instance"
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Uuid** As Uuid *[read-only]*",
     "description": "The UUID of the scene"
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Sub **AddLogMessage**(message As String)",
     "description": "Adds a log message to the scene log."
    },
    {
     "name": "Function **CreateRootContainer**() As Container"
    },
    {
     "name": "Function **DeformScreenPos**([out] dX As Double, [out] dY As Double) As Boolean",
     "description": "Applies the lens deformation to the passed screen coordinates."
    },
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindContainer**(name As String) As Container",
     "description": "Searches the scene tree for a container named *name*. The search mode is breadth-first. It's possible to combine a call to this function and multiple calls to Container.FindSubContainer into a single call by concatenating the individual container names using $ as a separator. For example, scene.FindContainer(\"name1$name2\") has the same effect as scene.FindContainer(\"name1\").FindSubContainer(\"name2\")."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetCamera**(cameraIndex As Integer) As Camera"
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **GetGfxChannel**(param_1 As Integer) As GfxChannel",
     "description": "Gets the GfxChannel n, where n is a zero based index"
    },
    {
     "name": "Function **GetGrid**(gridNumber As Integer) As Grid",
     "description": "Gets a grid from the scene."
    },
    {
     "name": "Function **GetImageChannel**(param_1 As Integer) As ImageChannel",
     "description": "Gets the ImageChannel n, where n is a zero based index"
    },
    {
     "name": "Function **GetLight**(lightIndex As Integer) As Light"
    },
    {
     "name": "Function **GetScenePluginInstance**(pluginName As String) As PluginInstance",
     "description": "Provides access to the parameters of a scene plugin instance."
    },
    {
     "name": "Function **GetSuperChannel**(param_1 As Integer) As SuperChannel",
     "description": "Gets the Super Channel n, where n is a zero based index"
    },
    {
     "name": "Function **GetUnlockedGrid**() As Grid",
     "description": "Gets the next unused grid from the scene."
    },
    {
     "name": "Function **GetVbiChannel**() As String",
     "description": "Gets the VBI channel used for capturing"
    },
    {
     "name": "Function **GetVbiChannelList**() As String",
     "description": "Gets a list of possible VBI channels used for capturing"
    },
    {
     "name": "Function **GetVideoChannel**(channel_id As Integer) As AVChannel",
     "description": "Return AVChannel according to the provided channel_id"
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Function **IsBacklayer**() As Boolean",
     "description": "Returns true, if the script is executed within Backlayer"
    },
    {
     "name": "Function **IsFrontlayer**() As Boolean",
     "description": "Returns true, if the script is executed within Frontlayer"
    },
    {
     "name": "Function **IsMainlayer**() As Boolean",
     "description": "Returns true, if the script is executed within Mainlayer"
    },
    {
     "name": "Function **ScreenPosToWorldGrid**(dX As Double, dY As Double) As Vertex",
     "description": "Converts the screen position to current grid intersection point."
    },
    {
     "name": "Function **ScreenPosToWorldPos**(dX As Double, dY As Double) As Vertex",
     "description": "Converts the screen position to the world position.\nThis would mean that if you assign the returned vertex to a container (on root level no parent containers) position then it moves exactly to the passed screen position (orthogonal to camera)."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    },
    {
     "name": "Function **SetGrid**(gridNumber As Integer) As Boolean",
     "description": "Sets the current scene grid."
    },
    {
     "name": "Sub **SetVbiChannel**(vbiChannel As String)",
     "description": "Sets the VBI channel used for capturing"
    },
    {
     "name": "Function **UndeformScreenPos**([out] dX As Double, [out] dY As Double) As Boolean",
     "description": "Applies the inverse lens deformation to the passed screen coordinates."
    },
    {
     "name": "Sub **UpdateSceneTree**()",
     "description": "In authoring mode, this method causes the scene tree GUI to be rebuilt. Ignored in on-air mode."
    },
    {
     "name": "Sub **WorldPosToScreenPos**(pos As Vertex, [out] dX As Double, [out] dY As Double)",
     "description": "Converts the world position to the position on the screen."
    }
   ]
  },
  {
   "name": "Script",
   "descripton": "The container's script object. This is used to dynamically call member procedures of another container."
  },
  {
   "name": "ScriptSettings",
   "descripton": "A script's local settings.",
   "properties": [
    {
     "name": "**CallButtonDownForTopObjectsOnly** As Boolean",
     "description": "If set to true, the OnXButtonDown procedures are called only if the container contains the mouse cursor and is on top at the mouse cursor position. Default = *true*."
    },
    {
     "name": "**CallEnterLeaveForTopObjectsOnly** As Boolean",
     "description": "If set to true, OnEnter/OnLeave/OnEnterSubContainer/OnLeaveSubContainer is called only if the container is on top at the mouse cursor position. Default = *true*."
    },
    {
     "name": "**CallMouseMoveForTopObjectsOnly** As Boolean",
     "description": "If set to true, OnMouseMove is called only if the container contains the mouse cursor and is on top at the mouse cursor position. Default = *false*."
    },
    {
     "name": "**CallEnterLeaveForBackgroundObjects** As Boolean",
     "description": "Deprecated. Use *CallEnterLeaveForTopObjectsOnly* instead."
    },
    {
     "name": "**CallMouseMoveForBackgroundObjects** As Boolean",
     "description": "Deprecated. Use *CallMouseMoveForTopObjectsOnly* instead."
    }
   ]
  },
  {
   "name": "SharedMemory",
   "descripton": "A storage object that holds a map of *Variant* objects indexed by a string.\nIt can be used for system-wide or scene-wide data sharing.\nTo access an individual value, use the index operator. Example:",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **ContainsKey**(key As String) As Boolean",
     "description": "Tests whether an element with the specified key is in the map."
    },
    {
     "name": "Function **CreateKey**(key As String) As Boolean",
     "description": "Creates a new empty variable."
    },
    {
     "name": "Function **DeleteKey**(key As String) As Boolean",
     "description": "Deletes a variable."
    },
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Sub **GetKeys**(keys As Array[String])",
     "description": "Fills the passed array with all defined keys."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Function **LoadFromDb**(path As String) As Boolean",
     "description": "Loads the contents of the map from a database file. The file is specified by *path*, which must be an absolute path, such as \"/User/mem_map\"."
    },
    {
     "name": "Function **LoadFromDbAsync**(path As String) As Boolean",
     "description": "Loads the contents of the map from a database file. The file is specified by *path*, which must be an absolute path, such as \"/User/mem_map\". This function is called asynchronous, so the value does not have to be loaded when the function returns."
    },
    {
     "name": "Sub **RegisterChangedCallback**(key As String)",
     "description": "Causes *OnSharedMemoryVariableChanged* to be invoked whenever the variable identified by *key* is changed and *OnSharedMemoryVariableDeleted* in response to the key being deleted. If you pass an empty string for *key*, the callbacks will be invoked whenever *any* variable in the map is changed or deleted."
    },
    {
     "name": "Function **SaveToDb**(path As String) As Boolean",
     "description": "Saves the contents of the map into a database file. The file is specified by *path*, which must be an absolute path, such as \"/User/mem_map\". Attention: If you are calling this function with a high frequency (e.g.: in *OnExecPerField*) then this can result in slow rendering and incomplete GH replications!"
    },
    {
     "name": "Function **SaveToDbAsync**(path As String) As Boolean",
     "description": "Saves the contents of the map into a database file. The file is specified by *path*, which must be an absolute path, such as \"/User/mem_map\". This function is called asynchronous, so the value does not have to be stored when the function returns.Attention: asynchronous call"
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    },
    {
     "name": "Function **SetValueDelayed**(key As String, value As Variant) As Boolean",
     "description": "Sets value via the corresponding transport mechanism (e.g. GraphicHub). This prevents possible re-triggering of the OnSharedMemoryVariableChanged callback."
    },
    {
     "name": "Sub **UnregisterChangedCallback**(key As String)",
     "description": "Removes the binding set up by *RegisterChangedCallback*."
    }
   ]
  },
  {
   "name": "Stage",
   "descripton": "A stage object. The *Stage* member of the Base type provides access to the current scene's stage.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**RootDirector** As Director *[read-only]*",
     "description": "Gets the topmost director in the stage."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Sub **ContinueAnimation**()",
     "description": "Continues the animation."
    },
    {
     "name": "Function **CreateRootDirector**() As Director",
     "description": "If there is no root director this method creates and returns a new one."
    },
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindDirector**(directorName As String) As Director",
     "description": "Searches for a director named *directorName*."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Function **IsAnimationRunning**() As Boolean",
     "description": "Returns true if the animation active."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    },
    {
     "name": "Sub **StartAnimation**()",
     "description": "Starts the animation in the directors selected in the diretor tree."
    },
    {
     "name": "Sub **StopAnimation**()",
     "description": "Stops the animation in all directors."
    }
   ]
  },
  {
   "name": "String",
   "descripton": "A character string. Use the '&' operator to concatenate strings.",
   "properties": [
    {
     "name": "**Length** As Integer *[read-only]*",
     "description": "Gets the length of the string.\nChecking the length of a doublebyte string:\nYou have to make sure to use the correct function for calculating double byte strings. Normal Doublebyte Fonts (Asian/Cyrillic) are calculated wrong if you use the string.length() function.\nSolution: To get the prober length, you have to convert it using Utf8ToAnsi()"
    }
   ],
   "methods": [
    {
     "name": "Sub **AnsiToUtf8**()",
     "description": "Converts an ANSI encoded string (using the system code-page) to UTF-8."
    },
    {
     "name": "Sub **Append**(str As String)",
     "description": "Appends 'str' to the string"
    },
    {
     "name": "Function **EndsWith**(str As String) As Boolean",
     "description": "Returns true if the string ends with 'str'"
    },
    {
     "name": "Sub **Erase**(pos As Integer, len As Integer)",
     "description": "Erases a range of 'len' characters starting at 'pos'"
    },
    {
     "name": "Sub **EraseChar**(pos As Integer)",
     "description": "Erases the string, starting at 'pos'"
    },
    {
     "name": "Function **Find**(substring As String) As Integer",
     "description": "Searches for a substring"
    },
    {
     "name": "Function **FindFirstNotOf**(chars As String) As Integer",
     "description": "Searches for the first character that is not equal to any character within 'chars'"
    },
    {
     "name": "Function **FindFirstOf**(chars As String) As Integer",
     "description": "Searches for the first character that is equal to any character within 'chars'"
    },
    {
     "name": "Function **FindLastNotOf**(chars As String) As Integer",
     "description": "Searches for the last character that is not equal to any character within 'chars'"
    },
    {
     "name": "Function **FindLastOf**(chars As String) As Integer",
     "description": "Searches for the last character that is equal to any character within 'chars'"
    },
    {
     "name": "Function **GetChar**(pos As Integer) As String",
     "description": "Returns the character at 'pos'"
    },
    {
     "name": "Function **GetSubstring**(pos As Integer, len As Integer) As String",
     "description": "Returns a substring"
    },
    {
     "name": "Sub **Insert**(pos As Integer, str As String)",
     "description": "Inserts 'str' before position 'pos'"
    },
    {
     "name": "Sub **Join**(strings As Array[String], joiner As String)",
     "description": "Concatenates individual strings"
    },
    {
     "name": "Function **Left**(len As Integer) As String",
     "description": "Extracts 'len' characters from the left end of the string"
    },
    {
     "name": "Sub **MakeLower**()",
     "description": "Converts the string to an lower-case string"
    },
    {
     "name": "Sub **MakeUpper**()",
     "description": "Converts the string to an upper-case string"
    },
    {
     "name": "Function **Match**(regex As String) As Boolean",
     "description": "Returns true if the regular expression 'regex' is found int the string"
    },
    {
     "name": "Sub **PadLeft**(totalWidth As Integer, paddingChar As String)",
     "description": "Right-aligns the characters of the string"
    },
    {
     "name": "Sub **PadRight**(totalWidth As Integer, paddingChar As String)",
     "description": "Left-aligns the characters of the string"
    },
    {
     "name": "Sub **Prepend**(str As String)",
     "description": "Inserts 'str' at the beginning of the string"
    },
    {
     "name": "Sub **Replace**(pos As Integer, len As Integer, str As String)",
     "description": "Replaces the substring specified by 'pos' and 'len' with 'str'"
    },
    {
     "name": "Sub **ReplaceChar**(pos As Integer, str As String)",
     "description": "Replaces the character at 'pos' with 'str'"
    },
    {
     "name": "Function **RFind**(substring As String) As Integer",
     "description": "Searches backward for a substring"
    },
    {
     "name": "Function **Right**(len As Integer) As String",
     "description": "Extracts 'len' characters from the right end of the string"
    },
    {
     "name": "Sub **Split**(separators As String, [out] result As Array[String])",
     "description": "Splits a string into substrings; if 'separators' is empty, whitespace sequences act as separators. Example:\ndim a as string = \"Monday Thuesday Wednesday\"\ndim b as array[string]\na.split(\" \",b)\nb will be [\"Monday\",\"Thuesday\",\"Wednesday\"]"
    },
    {
     "name": "Function **StartsWith**(str As String) As Boolean",
     "description": "Returns true if the string starts with 'str'"
    },
    {
     "name": "Function **Substitute**(regex As String, subst As String, global As Boolean) As Integer",
     "description": "Replaces 'regex' with 'subst'. If 'global' is true, all occurences of 'regex' are replaced. Otherwise, only the first occurrece is replaced."
    },
    {
     "name": "Sub **TclSplit**([out] result As Array[String])",
     "description": "Splits a string TCL-style-wise, using whitespace as separators (TCL-style means: Braced and double-quoted strings are never split even if they contain whitespace)."
    },
    {
     "name": "Sub **Trim**()",
     "description": "Removes whitspace characters from both ends of the string"
    },
    {
     "name": "Sub **URLDecode**()",
     "description": "Decodes a URL as string."
    },
    {
     "name": "Sub **URLEncode**()",
     "description": "Encodes a string as URL."
    },
    {
     "name": "Sub **Utf8ToAnsi**()",
     "description": "Converts a UTF-8 encoded string to ANSI (using the system code-page)."
    }
   ]
  },
  {
   "name": "StringMap",
   "descripton": "An associative array that maps strings to *Variant* objects. Use the index operator [] to access individual elements.",
   "properties": [
    {
     "name": "**Size** As Integer *[read-only]*",
     "description": "The size of the string map."
    }
   ],
   "methods": [
    {
     "name": "Sub **Clear**()"
    },
    {
     "name": "Function **ContainsKey**(key As String) As Boolean"
    },
    {
     "name": "Sub **DeleteKey**(key As String)"
    },
    {
     "name": "Sub **GetKeys**(keys As Array[String])",
     "description": "Fills the passed array with all defined keys."
    }
   ]
  },
  {
   "name": "SuperChannel",
   "descripton": "Super-channel objects",
   "properties": [
    {
     "name": "**A** As ProxyChannel *[read-only]*",
     "description": "Get sub-channel A."
    },
    {
     "name": "**Alpha** As Double",
     "description": "(*Inherited from AVChannel)* Alpha of this AVChannel"
    },
    {
     "name": "**B** As ProxyChannel *[read-only]*",
     "description": "Get sub-channel B."
    },
    {
     "name": "**Center** As Vertex",
     "description": "(*Inherited from AVChannel)* Transformation center of this AVChannel"
    },
    {
     "name": "**ContentBorderColor** As Color",
     "description": "(*Inherited from AVChannel)* AVChannel content border color"
    },
    {
     "name": "**ContentCenter** As Vertex",
     "description": "(*Inherited from AVChannel)* AVChannel content relative center in percent"
    },
    {
     "name": "**ContentCropBottom** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content bottom crop"
    },
    {
     "name": "**ContentCropLeft** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content left crop"
    },
    {
     "name": "**ContentCropRight** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content right crop"
    },
    {
     "name": "**ContentCropTop** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content top crop"
    },
    {
     "name": "**ContentPosition** As Vertex",
     "description": "(*Inherited from AVChannel)* AVChannel content relative position in percent"
    },
    {
     "name": "**ContentSize** As Vertex",
     "description": "(*Inherited from AVChannel)* AVChannel content relative size in percent"
    },
    {
     "name": "**ContentZoomMode** As Integer",
     "description": "(*Inherited from AVChannel)* AVChannel content zoom mode"
    },
    {
     "name": "**ControlledAnimation** As Boolean",
     "description": "(*Inherited from AVChannel)* Is animation controlled by parent Scene or by this AVChannel"
    },
    {
     "name": "**CropBottom** As Double",
     "description": "(*Inherited from AVChannel)* Bottom crop of this AVChannel"
    },
    {
     "name": "**CropLeft** As Double",
     "description": "(*Inherited from AVChannel)* Left crop of this AVChannel"
    },
    {
     "name": "**CropRight** As Double",
     "description": "(*Inherited from AVChannel)* Right crop of this AVChannel"
    },
    {
     "name": "**CropTop** As Double",
     "description": "(*Inherited from AVChannel)* Top crop of this AVChannel"
    },
    {
     "name": "**ForceKey** As Boolean",
     "description": "(*Inherited from AVChannel)* Force key of this AVChannel"
    },
    {
     "name": "**KeepAspect** As Boolean",
     "description": "(*Inherited from AVChannel)* Keep aspect of this AVChannel"
    },
    {
     "name": "**MasterVolume** As Double",
     "description": "(*Inherited from AVChannel)* Master volume of this AVChannel"
    },
    {
     "name": "**Pending** As ProxyChannel *[read-only]*",
     "description": "Get pending sub-channel. This channel is not valid during transitions. Check with *IsValid*."
    },
    {
     "name": "**Playing** As ProxyChannel *[read-only]*",
     "description": "Get playing sub-channel. This channel is not valid during transitions. Check with *IsValid*."
    },
    {
     "name": "**Position** As Vertex",
     "description": "(*Inherited from AVChannel)* Position of this AVChannel"
    },
    {
     "name": "**ScreenCenter** As Vertex",
     "description": "(*Inherited from AVChannel)* Transformation center of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropBottom** As Double",
     "description": "(*Inherited from AVChannel)* Bottom crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropLeft** As Double",
     "description": "(*Inherited from AVChannel)* Left crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropRight** As Double",
     "description": "(*Inherited from AVChannel)* Right crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenCropTop** As Double",
     "description": "(*Inherited from AVChannel)* Top crop of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenPosition** As Vertex",
     "description": "(*Inherited from AVChannel)* Position of this AVChannel (in Pixels)"
    },
    {
     "name": "**ScreenSize** As Vertex",
     "description": "(*Inherited from AVChannel)* Size of this AVChannel (in Pixels)"
    },
    {
     "name": "**Size** As Vertex",
     "description": "(*Inherited from AVChannel)* Size of this AVChannel"
    },
    {
     "name": "**TransitionAB** As Director *[read-only]*",
     "description": "Get director transition."
    },
    {
     "name": "**TransitionABManual** As Director",
     "description": "Get or set director transition."
    },
    {
     "name": "**TransitionABReverse** As Boolean",
     "description": "Get or set director transition reverse direction."
    },
    {
     "name": "**TransitionAutoMode** As Boolean",
     "description": "Get or set status of transition mode."
    },
    {
     "name": "**TransitionBA** As Director *[read-only]*",
     "description": "Get director transition."
    },
    {
     "name": "**TransitionBAManual** As Director",
     "description": "Get or set director transition."
    },
    {
     "name": "**TransitionBAReverse** As Boolean",
     "description": "Get or set director transition reverse direction."
    }
   ],
   "methods": [
    {
     "name": "Function **GetAudioChannelVolume**(param_1 As Integer) As Double",
     "description": "*(Inherited from AVChannel)* Volume of audio channel (up to 16 channels)"
    },
    {
     "name": "Function **IsValid**() As Boolean",
     "description": "Is this a valid SuperChannel"
    },
    {
     "name": "Function **IsValid**() As Boolean",
     "description": "*(Inherited from AVChannel)* Checks if this AVChannel is valid"
    },
    {
     "name": "Function **SetAudioChannelVolume**(param_1 As Integer) As Double",
     "description": "*(Inherited from AVChannel)* Volume of audio channel (up to 16 channels)"
    },
    {
     "name": "Function **Toggle**() As Boolean",
     "description": "Toggles playing and pending channel"
    }
   ]
  },
  {
   "name": "System",
   "descripton": "This type provides access to system-wide parameters and procedures.",
   "properties": [
    {
     "name": "**BackScene** As Scene *[read-only]*",
     "description": "Returns the scene that is in the back layer of the scene/render editor."
    },
    {
     "name": "**CurrentDirectoryPath** As String",
     "description": "Gets or sets the current directory path."
    },
    {
     "name": "**CurrentRefreshRate** As Double *[read-only]*",
     "description": "Gets the current refresh rate in seconds."
    },
    {
     "name": "**EngineInstance** As Integer *[read-only]*",
     "description": "Get the instance of VizEngine."
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**FrontScene** As Scene *[read-only]*",
     "description": "Returns the scene that is in the front layer of the scene/render editor."
    },
    {
     "name": "**GpuCount** As Integer *[read-only]*",
     "description": "Get the number of GPUs."
    },
    {
     "name": "**GpuDevice** As Integer *[read-only]*",
     "description": "Get the GPU instance."
    },
    {
     "name": "**HostName** As String *[read-only]*",
     "description": "Gets the host name of the local computer."
    },
    {
     "name": "**IPAddressString** As String *[read-only]*",
     "description": "Gets the IP address of the local computer. The format is a string that looks like \"10.211.54.199\"."
    },
    {
     "name": "**IsPostRecording** As Boolean *[read-only]*",
     "description": "Determines if in post mode."
    },
    {
     "name": "**LButtonState** As Boolean *[read-only]*",
     "description": "True if the left mouse button is pressed."
    },
    {
     "name": "**MainScene** As Scene *[read-only]*",
     "description": "Returns the scene that is in the main layer of the scene/render editor."
    },
    {
     "name": "**Map** As SharedMemory *[read-only]*",
     "description": "The global memory map, used for system-wide data sharing."
    },
    {
     "name": "**MButtonState** As Boolean *[read-only]*",
     "description": "True if the middle mouse button is pressed."
    },
    {
     "name": "**MouseX** As Integer *[read-only]*",
     "description": "Gets the x position of the mouse cursor (in screen coordinates)."
    },
    {
     "name": "**MouseY** As Integer *[read-only]*",
     "description": "Gets the y position of the mouse cursor (in screen coordinates)."
    },
    {
     "name": "**OutputAspect** As Double *[read-only]*",
     "description": "Gets the output aspect ratio."
    },
    {
     "name": "**OutputFieldDominance** As Integer *[read-only]*",
     "description": "Gets the field dominance of current the output field. (0=first field or progressive, 1=second field; )"
    },
    {
     "name": "**OutputInterlaced** As Boolean *[read-only]*",
     "description": "Determines if the output format is interlaced."
    },
    {
     "name": "**OutputRefreshRate** As Double *[read-only]*",
     "description": "Gets the output refresh rate in seconds."
    },
    {
     "name": "**OutputRetraceCounter** As Integer *[read-only]*",
     "description": "Gets the retrace counter."
    },
    {
     "name": "**OutputRingbufferSize** As Integer *[read-only]*",
     "description": "Configured size of output ringbuffer."
    },
    {
     "name": "**OutputRingbufferUsed** As Integer *[read-only]*",
     "description": "Number of filled fields in the output ringbuffer."
    },
    {
     "name": "**OutputSystem** As Integer *[read-only]*",
     "description": "Gets the output system. (VIZ_INACTIVE, VIZ_COMP_480I_5994, VIZ_COMP_576I_5000, VIZ_SDI_480I_5994_SMPTE259_NTSC, VIZ_SDI_576I_5000_SMPTE259_PAL, VIZ_SDI_720P_5994_SMPTE296, VIZ_SDI_720P_6000_SMPTE296, VIZ_SDI_1035I_5994_SMPTE260, VIZ_SDI_1035I_6000_SMPTE260, VIZ_SDI_1080I_5000_SMPTE295, VIZ_SDI_1080I_5000_SMPTE274, VIZ_SDI_1080I_5994_SMPTE274, VIZ_SDI_1080I_6000_SMPTE274, VIZ_SDI_1080PSF_23976_SMPTE274, VIZ_SDI_1080PSF_2400_SMPTE274, VIZ_SDI_1080PSF_2500_SMPTE274, VIZ_SDI_1080P_23976_SMPTE274, VIZ_SDI_1080P_2400_SMPTE274, VIZ_SDI_1080P_2500_SMPTE274, VIZ_SDI_1080P_2997_SMPTE274, VIZ_SDI_1080P_3000_SMPTE274, VIZ_SDI_720P_5000_SMPTE296, VIZ_SDI_720P_3000_SMPTE296, VIZ_SDI_720P_2997_SMPTE296, VIZ_SDI_720P_2500_SMPTE296, VIZ_SDI_720P_2400_SMPTE296, VIZ_SDI_720P_2398_SMPTE296, VIZ_SDI_1080P_5000_SMPTE424M, VIZ_SDI_1080P_5994_SMPTE424M, VIZ_SDI_1080P_6000_SMPTE424M, VIZ_SDI_2048P_24_00_SMPTE372, VIZ_SDI_2048P_25_00_SMPTE372, VIZ_SDI_2048P_29_97_SMPTE372, VIZ_SDI_2048P_30_00_SMPTE372, VIZ_SDI_2160P_2500_UHDTV1, VIZ_SDI_2160P_2997_UHDTV1, VIZ_SDI_2160P_3000_UHDTV1, VIZ_SDI_2160P_5000_SMPTE2036_UHDTV1, VIZ_SDI_2160P_5994_SMPTE2036_UHDTV1, VIZ_SDI_2160P_6000_SMPTE2036_UHDTV1, VIZ_SDI_2160P_5000_SMPTE425_5_UHDTV1, VIZ_SDI_2160P_5994_SMPTE425_5_UHDTV1, VIZ_SDI_2160P_5000_4K, VIZ_SDI_2160P_5994_4K, VIZ_SDI_2160P_6000_4K, VIZ_FULL_SCREEN, VIZ_USER_DEFINED)."
    },
    {
     "name": "**PostCurrentTime** As Double *[read-only]*",
     "description": "Get the current time in post mode."
    },
    {
     "name": "**PostFieldDominance** As Integer *[read-only]*",
     "description": "Gets the field dominance in post mode. (0=first field or progressive, 1=second field; )"
    },
    {
     "name": "**PostRetraceCounter** As Integer *[read-only]*",
     "description": "Gets the retrace counter in post mode."
    },
    {
     "name": "**RButtonState** As Boolean *[read-only]*",
     "description": "True if the right mouse button is pressed."
    },
    {
     "name": "**RenderEditorHeight** As Integer *[read-only]*",
     "description": "Gets the height in pixels of the render editor."
    },
    {
     "name": "**RenderEditorWidth** As Integer *[read-only]*",
     "description": "Gets the width in pixels of the render editor."
    },
    {
     "name": "**Renderer** As Base *[read-only]*",
     "description": "The main renderer"
    },
    {
     "name": "**RenderWindowHeight** As Integer *[read-only]*",
     "description": "Gets the height in pixels of the render window."
    },
    {
     "name": "**RenderWindowWidth** As Integer *[read-only]*",
     "description": "Gets the width in pixels of the render window."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**ScreenHeight** As Integer *[read-only]*",
     "description": "Gets the height in pixels of the screen."
    },
    {
     "name": "**ScreenWidth** As Integer *[read-only]*",
     "description": "Gets the width in pixels of the screen."
    },
    {
     "name": "**ShowMouseCursor** As Boolean",
     "description": "Gets or sets the visibility state of the mouse cursor."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**TraceCount** As Integer *[read-only]*",
     "description": "Returns the number of traces (touch inputs)."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VideoHeight** As Integer *[read-only]*",
     "description": "Gets the height in pixels of the output video."
    },
    {
     "name": "**VideooutInputRetraceCounter** As Integer *[read-only]*",
     "description": "Gets the retrace counter of the input of the videoout object."
    },
    {
     "name": "**VideooutOutputRetraceCounter** As Integer *[read-only]*",
     "description": "Gets the retrace counter of the output of the videoout object."
    },
    {
     "name": "**VideooutPropagationDelay** As Integer *[read-only]*",
     "description": "Number of fields it takes until a rendered buffer is played out."
    },
    {
     "name": "**VideooutRetraceCounter** As Integer *[read-only]*",
     "description": "Gets the retrace counter of the videoout object."
    },
    {
     "name": "**VideoWidth** As Integer *[read-only]*",
     "description": "Gets the width in pixels of the output video."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**RefreshRate** As Double *[read-only]*",
     "description": "Deprecated."
    }
   ],
   "methods": [
    {
     "name": "Function **DeleteFile**(filename As String) As Boolean",
     "description": "Deletes the file *filename*, returns true when successfully"
    },
    {
     "name": "Function **DirectoryExists**(directory As String) As Boolean",
     "description": "Returns true if the directory exists"
    },
    {
     "name": "Function **ExploreDocument**(filename As String, activate As Boolean) As Boolean",
     "description": "Opens a directory in the Windows Explorer. If *activate* is false, the Explorer window is minimized."
    },
    {
     "name": "Function **FileExists**(filename As String) As Boolean",
     "description": "Returns true if the file exists"
    },
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **GetClipChannel**(param_1 As Integer) As ClipChannel",
     "description": "Gets the Clip Channel n . where n is a zero based index up to exluding GetNumberOfClipChannel()"
    },
    {
     "name": "Function **GetDirectoryContent**(dirname As String, pattern As String) As Array[String]",
     "description": "Returns an array with all files in the directory *dirname* matching the *pattern*, e.g.: *.jpg"
    },
    {
     "name": "Function **GetElapsedTime**() As Double",
     "description": "Gets the time (in seconds) that has passed since Viz was started."
    },
    {
     "name": "Function **GetLiveChannel**(param_1 As Integer) As LiveChannel",
     "description": "Gets the Live Channel n . where n is a zero based index up to exluding GetNumberOfLiveChannel()"
    },
    {
     "name": "Function **GetNumberOfActiveClipChannel**() As Integer",
     "description": "Gets the number of available and active Clip Channels"
    },
    {
     "name": "Function **GetNumberOfActiveLiveChannel**() As Integer",
     "description": "Gets the number of available and active Live Channels"
    },
    {
     "name": "Function **GetNumberOfClipChannel**() As Integer",
     "description": "Gets the number of available Clip Channels"
    },
    {
     "name": "Function **GetNumberOfLiveChannel**() As Integer",
     "description": "Gets the number of available Live Channels"
    },
    {
     "name": "Function **GetNumberOfTimecodeSources**() As Integer",
     "description": "Returns the number of registered timecodes."
    },
    {
     "name": "Function **GetTimecode**(Device As String, Type As String) As Timecode",
     "description": "Returns a timecode object from *device* with *type*."
    },
    {
     "name": "Function **GetTimecodeByIndex**(Index As Integer) As Timecode",
     "description": "Returns a timecode object by its *index*."
    },
    {
     "name": "Function **GetTrace**(id As Integer) As Trace",
     "description": "Returns the trace with the passed trace Id"
    },
    {
     "name": "Function **GetTraceByIndex**(index As Integer) As Trace",
     "description": "Returns the trace with the passed index"
    },
    {
     "name": "Function **GetTrackedCameraTimecode**(Index As Integer) As Timecode",
     "description": "Returns a test value in order to see if we can add a method this way."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Function **IsKeyDown**(keyCode As Integer) As Boolean",
     "description": "Returns true if the specified key is pressed."
    },
    {
     "name": "Function **LoadBackScene**(scenepath As String) As Scene",
     "description": "Loads a scene file into the back layer of the scene/render editor."
    },
    {
     "name": "Function **LoadFrontScene**(scenepath As String) As Scene",
     "description": "Loads a scene file into the front layer of the scene/render editor."
    },
    {
     "name": "Function **LoadMainScene**(scenepath As String) As Scene",
     "description": "Loads a scene file into the main layer of the scene/render editor."
    },
    {
     "name": "Function **LoadTextFile**(filepath As String, [out] result As String) As Boolean",
     "description": "Loads the text file identified by *filepath* into *result*. Returns false if the file does not exist or is not accessible."
    },
    {
     "name": "Function **MouseOverIPDefineServer**(serverAddress As String, serverPort As Integer, localPort As Integer) As Integer",
     "description": "Define another VizMouseServer"
    },
    {
     "name": "Function **MouseOverIPQuitServer**() As Boolean",
     "description": "Kill the all defined VizMouseServer"
    },
    {
     "name": "Function **MouseOverIPQuitServer**(serverID As Integer) As Boolean",
     "description": "Kill this VizMouseServer"
    },
    {
     "name": "Function **MouseOverIPRegister**() As Boolean",
     "description": "Register the viz engine as client to receive mouse events from all defined VizMouseServer"
    },
    {
     "name": "Function **MouseOverIPRegister**(serverID As Integer) As Boolean",
     "description": "Register the viz engine as client to receive mouse events from this VizMouseServer"
    },
    {
     "name": "Function **MouseOverIPUndefineAllServers**() As Boolean",
     "description": "Undefine all known VizMouseServers."
    },
    {
     "name": "Function **MouseOverIPUndefineServer**(serverAddress As String, serverPort As Integer, localPort As Integer) As Boolean",
     "description": "Unefine the VizMouseServer with the address *serverAddress*, the server port *serverPort* and the local listening port *localPort*"
    },
    {
     "name": "Function **MouseOverIPUndefineServer**(serverID As Integer) As Boolean",
     "description": "Undefine the VizMouseServer with the ID serverID."
    },
    {
     "name": "Function **MouseOverIPUnregister**() As Boolean",
     "description": "Unregister the viz engine from all defined VizMouseServer"
    },
    {
     "name": "Function **MouseOverIPUnregister**(serverID As Integer) As Boolean",
     "description": "Unregister the viz engine from this VizMouseServer"
    },
    {
     "name": "Function **MouseOverIPUnregisterAll**() As Boolean",
     "description": "Unregister all viz engines from all defined VizMouseServer"
    },
    {
     "name": "Function **MouseOverIPUnregisterAll**(serverID As Integer) As Boolean",
     "description": "Unregister all viz engines from this VizMouseServer"
    },
    {
     "name": "Function **OpenDocument**(filename As String, activate As Boolean) As Boolean",
     "description": "Opens a document file. If *activate* is false, the application loading the file is minimized."
    },
    {
     "name": "Sub **PlaySound**(filename As String)",
     "description": "Plays a sound file."
    },
    {
     "name": "Function **SaveTextFile**(filepath As String, text As String) As Boolean",
     "description": "Saves the contents of *text* into the file identified by *filepath*. Returns false if the file cannot be written to."
    },
    {
     "name": "Function **SendCommand**(command As String) As String",
     "description": "Sends a command to the local viz engine."
    },
    {
     "name": "Function **SendRemoteCommand**(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String",
     "description": "Sends a command string to a viz engine running on another PC.\nIf *timeoutInMs* > 0, the procedure waits at most *timeoutInMs* milliseconds for an answer, and susequently returns that answer.\nIf *timeoutInMs* = 0, the procedure returns immediatly, ignoring any answer."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    },
    {
     "name": "Function **StartApplication**(filename As String, parameters As String, activate As Boolean) As Boolean",
     "description": "Launches an application. If *activate* is false, the application window is minimized."
    },
    {
     "name": "Sub **StopSound**()",
     "description": "Stops sound playback. See *PlaySound*."
    },
    {
     "name": "Function **TcpSend**(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String",
     "description": "Sends a command string via TCP/IP to a remote socket. Unlike *SendRemoteCommand*, this procedure sends the command string as is, that is without a viz command identifier attached.\nThe *timeoutInMs* has the same meaning as for *SendRemoteCommand*."
    },
    {
     "name": "Sub **TcpSendAsync**(sharedMemoryKey As String, hostname As String, port As Integer, commandString As String, timeoutInMs As Integer)",
     "description": "Sends a command string via TCP/IP to a remote socket. Unlike *TcpSend*, this procedure works asynchron and the return result is stored in a shared memory map, at your defined *sharedMemoryKey*.\nThe defined *sharedMemoryKey* or its RegisterChangedCallback will be searched in the maps in the following order: *Scene.Map*, *System.Map* and *VizCommunication.Map*\nIf *timeoutInMs* is set to 0 then *TcpSendAsync* will wait until a answer is received or as long as no error occurs (e.g. host doesn't exist)."
    },
    {
     "name": "Sub **TcpSendAsyncStatus**(sharedMemoryKey As String, hostname As String, port As Integer, commandString As String, timeoutInMs As Integer, sharedMemoryKeyStatus As String)",
     "description": "Same as *TcpSendAsync* but with additional status Shared Memory Key which informs you about the transmission process. The following Messages (Strings) will be returned in *sharedMemoryKeyStatus*:\n*SENDING*\n*RECEIVED*\n*ERROR*\n*TIMEOUT*\nThe *timeoutInMs* has the same meaning as for *TcpSendAsync*."
    }
   ]
  },
  {
   "name": "Texture",
   "descripton": "A container's texture object.",
   "properties": [
    {
     "name": "**Active** As Boolean",
     "description": ""
    },
    {
     "name": "**EffectType** As Integer",
     "description": "The effect type:\nTX_EFFECT_BLUR\nTX_EFFECT_MOSAIC"
    },
    {
     "name": "**EffectValue** As Integer",
     "description": "The effect value as an integer ranging 0-100"
    },
    {
     "name": "**EffectValueDouble** As Double",
     "description": "The effect value as a double ranging 0.0-100.0"
    },
    {
     "name": "**EnvironmentType** As Integer",
     "description": "The environment type:\nTX_ENV_BLEND\nTX_ENV_DECAL\nTX_ENV_MODULATE"
    },
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Image** As Image",
     "description": "The texture image"
    },
    {
     "name": "**MapPosition** As Vertex",
     "description": "The mapping position"
    },
    {
     "name": "**MapRotation** As Vertex",
     "description": "The mapping rotation"
    },
    {
     "name": "**MapScaling** As Vertex",
     "description": "The mapping scaling"
    },
    {
     "name": "**MapType** As Integer",
     "description": "The mapping type:\nTX_MAP_VERTEX\nTX_MAP_LINEAR\nTX_MAP_REFLECT\nTX_MAP_SPHERICAL\nTX_MAP_CYLINDRICAL\nTX_MAP_CUBE"
    },
    {
     "name": "**QualityType** As Integer",
     "description": "The quality type:\nTX_QUAL_PIXEL\nTX_QUAL_LINEAR\nTX_QUAL_MIPMAP\nTX_QUAL_SHARPEN"
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**SharpenValue** As Integer",
     "description": "The sharpen value as an integer ranging 0-100"
    },
    {
     "name": "**SharpenValueDouble** As Double",
     "description": "The sharpen value as a double ranging 0.0-100.0"
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    },
    {
     "name": "**WrapType** As Integer",
     "description": "The wrap type:\nTX_WRAP_REPEAT\nTX_WRAP_CLAMP"
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Timecode",
   "descripton": "Class for easier timecode handling.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Sub **Get**([out] Hours As Integer, [out] Minutes As Integer, [out] Seconds As Integer, [out] Frames As Integer)",
     "description": "Writes the current value of the timecode into *Hours*, *Minutes*, *Seconds*, and *Frames*."
    },
    {
     "name": "Sub **Get2**([out] Hours As Integer, [out] Minutes As Integer, [out] Seconds As Integer, [out] Frames As Integer, [out] Field2 As Boolean)",
     "description": "Writes the current value of the timecode into *Hours*, *Minutes*, *Seconds*, *Frames*, and *Field2*."
    },
    {
     "name": "Function **GetAssigned**() As Boolean",
     "description": "Returns true if the Assigned flag is set."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **GetCheckColorFrame**() As Boolean",
     "description": "Returns true if the CheckColorFrame flag is set."
    },
    {
     "name": "Function **GetCheckDropFrameCompensation**() As Boolean",
     "description": "Returns true if the time code does drop frame compensation."
    },
    {
     "name": "Function **GetCheckPolarityCorrectness**() As Boolean",
     "description": "Returns true if the CheckPolarityCorrectness flag is set."
    },
    {
     "name": "Function **GetDevice**() As String",
     "description": "Returns the device name of the timecode."
    },
    {
     "name": "Function **GetExternalClockRef**() As Boolean",
     "description": "Returns true if the timecode is referenced by an external clock."
    },
    {
     "name": "Function **GetField2**() As Boolean",
     "description": "Returns true if the current timecode is at field2."
    },
    {
     "name": "Function **GetFields**() As Integer",
     "description": "Returns the number of fields."
    },
    {
     "name": "Function **GetFieldsIn24H**() As Integer",
     "description": "Returns the number of fields in 24H."
    },
    {
     "name": "Function **GetFrames**() As Integer",
     "description": "Returns the number of frames."
    },
    {
     "name": "Function **GetProgressive**() As Boolean",
     "description": "Returns true the timecode is progressive."
    },
    {
     "name": "Function **GetString**() As String",
     "description": "Returns the current value of the timecode as string."
    },
    {
     "name": "Function **GetType**() As String",
     "description": "Returns the type of the timecode."
    },
    {
     "name": "Function **GetUserBits**() As Integer",
     "description": "Returns the user bits."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Touch",
   "properties": [
    {
     "name": "**Direction** As Vertex *[read-only]*",
     "description": "Returns the touch's pointing direction (e.g. direction of finger) as an uniform vector."
    },
    {
     "name": "**Event** As Integer *[read-only]*",
     "description": "Returns the touch event type (TOUCH_DOWN, TOUCH_MOVE, TOUCH_UP)."
    },
    {
     "name": "**Index** As Integer *[read-only]*",
     "description": "Returns the index of the touch object."
    },
    {
     "name": "**Pressure** As Double *[read-only]*",
     "description": "Returns the normalized pressure value in the range 0.0 to 1.0."
    },
    {
     "name": "**Timestamp** As Double *[read-only]*",
     "description": "Returns the timestamp of this touch."
    },
    {
     "name": "**Trace** As Trace *[read-only]*",
     "description": "Returns the parent trace object."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "Returns true if the object is valid."
    },
    {
     "name": "**xy** As Vertex *[read-only]*",
     "description": "Returns the touch position in screen-coordinates."
    }
   ]
  },
  {
   "name": "Trace",
   "descripton": "Holds data of a single touch event which is received from the configured multi-touch input source. A touch describes the *Event* types: down, move and up.",
   "properties": [
    {
     "name": "**Id** As Integer *[read-only]*",
     "description": "Returns the Id of the trace object."
    },
    {
     "name": "**LastTouch** As Touch *[read-only]*",
     "description": "Returns the last touch object."
    },
    {
     "name": "**Source** As Integer *[read-only]*",
     "description": "Returns trace source (TRACE_SRC_UNDEFINED, TRACE_SRC_MOUSE, TRACE_SRC_WIN_TOUCH, TRACE_SRC_TUIO, TRACE_SRC_LEAP, TRACE_SRC_WIN_STYLUS)."
    },
    {
     "name": "**TouchCount** As Touch *[read-only]*",
     "description": "Returns the number of touches within this trace."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "Returns true if the object is valid."
    }
   ],
   "methods": [
    {
     "name": "Function **GetTouch**(Index As Integer) As Touch",
     "description": "Get Touch object with the defined index."
    },
    {
     "name": "Sub **GetType**([out] Type As Integer, [out] SubType As Integer)",
     "description": "Get trace type (and subtype).\nTRACE_TYPE_UNDEFINED (TRACE_TYPE_UNDEFINED),\nTRACE_TYPE_TOOL (TRACE_TYPE_UNDEFINED),\nTRACE_TYPE_FINGER (TRACE_TYPE_UNDEFINED),\nTRACE_TYPE_HAND (TRACE_TYPE_UNDEFINED),\nTRACE_TYPE_PALM (TRACE_TYPE_UNDEFINED),\nTRACE_TYPE_STYLUS (TRACE_TYPE_UNDEFINED, TRACE_TYPE_STYLUS_ERASER),"
    }
   ]
  },
  {
   "name": "Uuid",
   "descripton": "A Universally Unique Identifier.",
   "properties": [
    {
     "name": "**FullString** As String *[read-only]*",
     "description": "Returns the uuid as a string, enclosed in angle brackets, e.g. “7410EF6B-4271-4EFA-8E8E30212D9AD2A5”."
    },
    {
     "name": "**String** As String *[read-only]*",
     "description": "Returns the uuid as a string, e.g. “7410EF6B-4271-4EFA-8E8E30212D9AD2A5”."
    }
   ],
   "methods": [
    {
     "name": "Sub **GenerateNewUuid**()",
     "description": "Generates a new UUID."
    }
   ]
  },
  {
   "name": "Variant",
   "descripton": "A variant type. Objects of this type can hold objects of any other type."
  },
  {
   "name": "Vertex",
   "descripton": "A vertex/vector consisting of 3 double components. The components can be accessed either via the *x*, *y* and *z* members, or using the index operator []. For example, v.y and v[1] both refer to the y component.",
   "properties": [
    {
     "name": "**Length** As Double *[read-only]*",
     "description": "The length of the vector"
    },
    {
     "name": "**X** As Double",
     "description": "The x component"
    },
    {
     "name": "**Y** As Double",
     "description": "The y component"
    },
    {
     "name": "**Z** As Double",
     "description": "The z component"
    }
   ],
   "methods": [
    {
     "name": "Function **DistanceToLine**(linePoint1 As Vertex, linePoint2 As Vertex) As Double"
    },
    {
     "name": "Function **DistanceToPlane**(planeNormal As Vertex, planePoint As Vertex) As Double"
    },
    {
     "name": "Function **DistanceToPlaneSigned**(planeNormal As Vertex, planePoint As Vertex) As Double"
    },
    {
     "name": "Function **FaceOutputNormal**(v1 As Vertex, v2 As Vertex, v3 As Vertex) As Double",
     "description": "Calculates the face-output-normal of the passed 3 vertices."
    },
    {
     "name": "Function **MirrorAroundLine**(linePoint1 As Vertex, linePoint2 As Vertex) As Vertex"
    },
    {
     "name": "Function **MirrorAroundVector**(v As Vertex) As Vertex"
    },
    {
     "name": "Function **Norm**() As Double",
     "description": "Returns the length of the vector."
    },
    {
     "name": "Function **Normalize**() As Double",
     "description": "Normalizes the vertex, i.e. scales it to length 1."
    },
    {
     "name": "Function **Project**(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer) As Boolean"
    },
    {
     "name": "Function **Project**(mat As Matrix, halfwidth As Integer, halfweight As Integer) As Boolean"
    },
    {
     "name": "Function **ProjectOnLine**(linePoint1 As Vertex, linePoint2 As Vertex) As Vertex"
    },
    {
     "name": "Function **ProjectOnVector**(v As Vertex) As Vertex"
    },
    {
     "name": "Function **SquaredNorm**() As Double",
     "description": "Returns the squared length of the vector."
    },
    {
     "name": "Sub **Unproject**(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer)"
    },
    {
     "name": "Function **Unproject**(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer, plane1 As Vertex, plane2 As Vertex, plane3 As Vertex) As Boolean"
    },
    {
     "name": "Sub **GlNormal**()",
     "description": "Deprecated."
    },
    {
     "name": "Sub **GlVertex**()",
     "description": "Deprecated."
    }
   ]
  },
  {
   "name": "VizCommunication",
   "descripton": "This class maintains a group of viz hosts that you can simultaneously send commands to. In addition, there is a *SharedMemory* member (*Map*) that shares its data among all engines connected to the database.",
   "properties": [
    {
     "name": "**Eventpool** As Eventpool *[read-only]*",
     "description": "(*Inherited from Base)* Gets system eventpool."
    },
    {
     "name": "**Map** As SharedMemory *[read-only]*",
     "description": "Distributed shared memory map. Note that other viz machines are notified of changes made to this map only if they running at the time the change is made."
    },
    {
     "name": "**Scene** As Scene *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current scene."
    },
    {
     "name": "**Stage** As Stage *[read-only]*",
     "description": "(*Inherited from Base)* Gets the current stage."
    },
    {
     "name": "**System** As System *[read-only]*",
     "description": "(*Inherited from Base)* Gets system wide data."
    },
    {
     "name": "**Valid** As Boolean *[read-only]*",
     "description": "(*Inherited from Base)* Returns true if the object is valid."
    },
    {
     "name": "**VizCommunication** As VizCommunication *[read-only]*",
     "description": "(*Inherited from Base)* Gets the VizCommunication object."
    },
    {
     "name": "**VizEventName** As String *[read-only]*",
     "description": "(*Inherited from Base)* The object event name which could be used in *registerAsListener* and the corresponding callback (the viz object event name could change)"
    },
    {
     "name": "**VizId** As Integer",
     "description": "(*Inherited from Base)* Gets or sets the internal id of this object."
    }
   ],
   "methods": [
    {
     "name": "Sub **AddHostToGroup**(hostname As String, port As Integer)",
     "description": "Adds a hostname to the group of hostnames."
    },
    {
     "name": "Sub **ClearHostGroup**()",
     "description": "Clears the group of hostnames."
    },
    {
     "name": "Function **FindChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the *channelName* argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\"."
    },
    {
     "name": "Function **FindKeyframeOfObject**(keyframeName As String) As Keyframe",
     "description": "*(Inherited from Base)* Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as *Director*), it returns *null*.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the *keyframeName* argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\"."
    },
    {
     "name": "Function **FindOrCreateChannelOfObject**(channelName As String) As Channel",
     "description": "*(Inherited from Base)* This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created."
    },
    {
     "name": "Function **GetChannelsOfObject**([out] v As Array[Channel]) As Integer",
     "description": "*(Inherited from Base)* Fills the array *v* with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as *Director*), *v* will be empty."
    },
    {
     "name": "Function **IsAnimated**() As Boolean",
     "description": "*(Inherited from Base)* Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as *Director*), it always returns *false*."
    },
    {
     "name": "Sub **SendVizCommandToHostGroup**(command As String)",
     "description": "Sends a viz command to the group of hostnames (which was previously filled by calls to *AddHostToGroup*)."
    },
    {
     "name": "Sub **SetChanged**()",
     "description": "*(Inherited from Base)* Mark this object as changed."
    }
   ]
  },
  {
   "name": "Global Procedures",
   "properties": [
    {
     "name": "Function **Abs**(x As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **Acos**(x As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **AngleBetweenVectors**(v1 As Vertex, v2 As Vertex) As Double",
     "description": ""
    },
    {
     "name": "Function **Asc**(s As String) As Integer",
     "description": "Returns the ASCII/UTF8 code (0-255) for the specified character."
    },
    {
     "name": "Function **Asin**(x As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **Atan**(x As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **Atan2**(x As Double, y As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **CBool**(v As Integer) As Boolean",
     "description": "Converts an integer to a boolean."
    },
    {
     "name": "Function **CBool**(v As Double) As Boolean",
     "description": "Converts a double to a boolean."
    },
    {
     "name": "Function **CBool**(v As Uuid) As Boolean",
     "description": "Converts a UUID to a boolean."
    },
    {
     "name": "Function **CColor**(r As Double, g As Double, b As Double) As Color",
     "description": "Constructs a a color object."
    },
    {
     "name": "Function **CColor**(r As Double, g As Double, b As Double, a As Double) As Color",
     "description": "Constructs a a color object."
    },
    {
     "name": "Function **CDbl**(v As Boolean) As Double",
     "description": "Converts a boolean to a double."
    },
    {
     "name": "Function **CDbl**(v As Integer) As Double",
     "description": "Converts an integer to a double."
    },
    {
     "name": "Function **CDbl**(v As String) As Double",
     "description": "Converts a string to a double."
    },
    {
     "name": "Function **Ceil**(x As Double) As Double",
     "description": "Returns the smallest integer that is larger than or equal to *x*."
    },
    {
     "name": "Function **Chr**(charCode As Integer) As String",
     "description": "Returns the character associated with the specified ASCII/UTF8 code (0-255)."
    },
    {
     "name": "Function **CInt**(v As Boolean) As Integer",
     "description": "Converts a boolean to an integer."
    },
    {
     "name": "Function **CInt**(v As Double) As Integer",
     "description": "Converts a double to an integer."
    },
    {
     "name": "Function **CInt**(v As String) As Integer",
     "description": "Converts a string to an integer."
    },
    {
     "name": "Function **Cos**(x As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **Cosh**(x As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **CStr**(v As Boolean) As String",
     "description": "Converts a boolean to a string."
    },
    {
     "name": "Function **CStr**(v As Integer) As String",
     "description": "Converts a integer to a string."
    },
    {
     "name": "Function **CStr**(v As Double) As String",
     "description": "Converts a double to a string."
    },
    {
     "name": "Function **CStr**(v As Uuid) As String",
     "description": "Converts a UUID to a string."
    },
    {
     "name": "Function **CTrace**(v As Integer) As Trace",
     "description": "Constructs a trace from a integer value."
    },
    {
     "name": "Function **CUuid**(v As String) As Uuid",
     "description": "Constructs a uuid from a string value."
    },
    {
     "name": "Function **CVertex**(v As Boolean) As Vertex",
     "description": "Constructs a vertex from a bool value, assigning the value to x, y, and z."
    },
    {
     "name": "Function **CVertex**(v As Integer) As Vertex",
     "description": "Constructs a vertex from an integer value, assigning the value to x, y, and z."
    },
    {
     "name": "Function **CVertex**(v As Double) As Vertex",
     "description": "Constructs a vertex from an double value, assigning the value to x, y, and z."
    },
    {
     "name": "Function **CVertex**(x As Double, y As Double, z As Double) As Vertex",
     "description": "Constructs a vertex from 3 double values."
    },
    {
     "name": "Function **Determinant**(a As Vertex, b As Vertex, c As Vertex) As Double",
     "description": ""
    },
    {
     "name": "Function **Distance**(v1 As Vertex, v2 As Vertex) As Double",
     "description": "Returns the distance between two vertices."
    },
    {
     "name": "Function **Distance2**(v1 As Vertex, v2 As Vertex) As Double",
     "description": "Returns the squared distance between two vertices."
    },
    {
     "name": "Function **DoubleToString**(value As Double, precision As Integer) As String",
     "description": "Converts a double value to a string."
    },
    {
     "name": "Function **DoubleToString**(value As Double, precision As Integer, width As Integer) As String",
     "description": "Converts a double value to a string."
    },
    {
     "name": "Function **Exp**(x As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **Fix**(x As Double) As Double",
     "description": "Returns *Floor(x)* if x larger than or equal to 0.0, otherwise *Ceil(x)*."
    },
    {
     "name": "Function **Floor**(x As Double) As Double",
     "description": "Returns the largest integer that is smaller than or equal to *x*."
    },
    {
     "name": "Function **GetCurrentTime**() As DateTime",
     "description": "Gets the current time."
    },
    {
     "name": "Function **GetParameterBool**(parameterName As String) As Boolean",
     "description": "Returns the value of the Boolean parameter *parameterName*."
    },
    {
     "name": "Function **GetParameterColor**(parameterName As String) As Color",
     "description": "Returns the value of the Color parameter *parameterName*."
    },
    {
     "name": "Function **GetParameterContainer**(parameterName As String) As Container",
     "description": "Returns the value of the Container parameter *parameterName*."
    },
    {
     "name": "Function **GetParameterDouble**(parameterName As String) As Double",
     "description": "Returns the value of the Double parameter *parameterName*."
    },
    {
     "name": "Function **GetParameterInt**(parameterName As String) As Integer",
     "description": "Returns the value of the Integer parameter *parameterName*."
    },
    {
     "name": "Function **GetParameterString**(parameterName As String) As String",
     "description": "Returns the value of the String parameter *parameterName*."
    },
    {
     "name": "Function **GetTickCount**() As Integer",
     "description": "Returns the processor time in milliseconds. Note that the timing resolution provided by this procedure is fairly low. For more accurate timing, use *System.GetElapsedTime()* instead."
    },
    {
     "name": "Function **Int**(x As Double) As Double",
     "description": "Identical to *Floor*."
    },
    {
     "name": "Function **IntToString**(value As Integer, width As Integer) As String",
     "description": "Converts an integer value to a right-aligned string, filling empty space with blanks."
    },
    {
     "name": "Function **IntToString**(value As Integer, width As Integer, addLeadingZeros As Boolean) As String",
     "description": "Converts an integer value to a right-aligned string, filling empty space with blanks or (if *addLeadingZeros* is true) with zeros."
    },
    {
     "name": "Function **Len**(s As String) As Integer",
     "description": "Returns the length of the specified string."
    },
    {
     "name": "Function **LineLineIntersection**(line1Point As Vertex, line1Direction As Vertex, line2Point As Vertex, line2Direction As Vertex) As Vertex",
     "description": ""
    },
    {
     "name": "Function **Log**(x As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **Max**(a As Integer, b As Integer) As Integer",
     "description": "Returns the larger of the two values."
    },
    {
     "name": "Function **Max**(a As Double, b As Double) As Double",
     "description": "Returns the larger of the two values."
    },
    {
     "name": "Function **Min**(a As Integer, b As Integer) As Integer",
     "description": "Returns the smaller of the two values."
    },
    {
     "name": "Function **Min**(a As Double, b As Double) As Double",
     "description": "Returns the smaller of the two values."
    },
    {
     "name": "Function **PlaneLineIntersection**(planePoint As Vertex, planeNormal As Vertex, linePoint As Vertex, lineDirection As Vertex) As Vertex",
     "description": ""
    },
    {
     "name": "Sub **Println**(colorindex As Integer, v As Boolean)",
     "description": "Prints a boolean in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light)."
    },
    {
     "name": "Sub **Println**()",
     "description": "Prints a newline."
    },
    {
     "name": "Sub **Println**(v As Boolean)",
     "description": "Prints a boolean."
    },
    {
     "name": "Sub **Println**(v As Vertex)",
     "description": "Prints a vertex."
    },
    {
     "name": "Sub **Println**(v As Integer)",
     "description": "Prints an integer."
    },
    {
     "name": "Sub **Println**(colorindex As Integer, v As Integer)",
     "description": "Prints an integer in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light)."
    },
    {
     "name": "Sub **Println**(v As Double)",
     "description": "Prints a double."
    },
    {
     "name": "Sub **Println**(colorindex As Integer, v As Double)",
     "description": "Prints a double in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light)."
    },
    {
     "name": "Sub **Println**(v As String)",
     "description": "Prints a string."
    },
    {
     "name": "Sub **Println**(colorindex As Integer, v As String)",
     "description": "Prints a string in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light)."
    },
    {
     "name": "Sub **Println**(colorindex As Integer, v As Vertex)",
     "description": "Prints a vertex in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light)."
    },
    {
     "name": "Sub **Println**(v As Variant)",
     "description": "Prints an object of type *Variant*."
    },
    {
     "name": "Sub **Println**(colorindex As Integer, v As Variant)",
     "description": "Prints an object of type *Variant* in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light)."
    },
    {
     "name": "Sub **Println**(v As Uuid)",
     "description": "Prints a uuid."
    },
    {
     "name": "Sub **Println**(colorindex As Integer, v As Uuid)",
     "description": "Prints a uuid in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light)."
    },
    {
     "name": "Function **Random**() As Double",
     "description": "Returns a random number of type double in the range [0, 1)."
    },
    {
     "name": "Function **Random**(i As Integer) As Integer",
     "description": "Returns a random integer in the range 0 through i-1."
    },
    {
     "name": "Sub **RegisterDirSelector**(parameterName As String, label As String, default As String)",
     "description": "Registers a directory parameter."
    },
    {
     "name": "Sub **RegisterFileSelector**(parameterName As String, label As String, defaultPath As String, defaultFile As String, filter As String)",
     "description": "Registers a file parameter."
    },
    {
     "name": "Sub **RegisterInfoText**(infoText As String)",
     "description": "Call this function to provide documentation for the script (accessible via the 'i'-button)."
    },
    {
     "name": "Sub **RegisterParameterBool**(parameterName As String, label As String, defaultName As Boolean)",
     "description": "Registers a parameter of type Boolean."
    },
    {
     "name": "Sub **RegisterParameterColor**(parameterName As String, label As String, defaultValue As Color)",
     "description": "Registers a parameter of type Color."
    },
    {
     "name": "Sub **RegisterParameterContainer**(parameterName As String, label As String)",
     "description": "Registers a parameter of type Container."
    },
    {
     "name": "Sub **RegisterParameterDouble**(parameterName As String, label As String, defaultValue As Double, minValue As Double, maxValue As Double)",
     "description": "Registers a parameter of type Double."
    },
    {
     "name": "Sub **RegisterParameterDropDown**(parameterName As String, label As String, default As Integer, entries As Array[String], width As Integer, height As Integer)",
     "description": "Registers a dropdown box. *width* defines the parameter's width in number of characters and *height* sets the dropdown box's height in number of lines."
    },
    {
     "name": "Sub **RegisterParameterHList**(parameterName As String, label As String, default As Integer, entries As Array[String], separatorChar As String, width As Integer, height As Integer)",
     "description": "Registers a list box. *separatorChar* defines the character which is used to separate the values. *width* and *height* are defined in pixels."
    },
    {
     "name": "Sub **RegisterParameterImage**(parameterName As String, label As String)",
     "description": "Registers a parameter of type Image."
    },
    {
     "name": "Sub **RegisterParameterInt**(parameterName As String, label As String, defaultValue As Integer, minValue As Integer, maxValue As Integer)",
     "description": "Registers a parameter of type Integer."
    },
    {
     "name": "Sub **RegisterParameterLabel**(parameterName As String, label As String, width As Integer, height As Integer)",
     "description": "Register a label to be shown in the ."
    },
    {
     "name": "Sub **RegisterParameterList**(parameterName As String, label As String, default As Integer, entries As Array[String], width As Integer, height As Integer)",
     "description": "Registers a list box. *width* and *height* are defined in pixels."
    },
    {
     "name": "Sub **RegisterParameterSliderDouble**(parameterName As String, label As String, defaultValue As Double, minValue As Double, maxValue As Double, width As Integer)",
     "description": "Registers a parameter of type Double with slider appearance. *width* specifies the parameter's width in pixels."
    },
    {
     "name": "Sub **RegisterParameterSliderInt**(parameterName As String, label As String, defaultValue As Integer, minValue As Integer, maxValue As Integer, width As Integer)",
     "description": "Registers a parameter of type Integer with slider appearance. *width* specifies the parameter's width in pixels."
    },
    {
     "name": "Sub **RegisterParameterString**(parameterName As String, label As String, defaultString As String, widgetSize As Integer, maxLength As Integer, charSet As String)",
     "description": "Registers a parameter of type String. If *charSet* is empty, all characters are allowed."
    },
    {
     "name": "Sub **RegisterParameterText**(parameterName As String, defaultText As String, width As Integer, height As Integer)",
     "description": "Registers a parameter of type String that is entered in a text box. *width* and *height* specify the size of the text box in pixels."
    },
    {
     "name": "Sub **RegisterPluginVersion**(version As Integer, release As Integer, patchlevel As Integer)",
     "description": "You can use this to set information about your script-plugin's version. It's recommended to set version numbers especially for VSL plugins."
    },
    {
     "name": "Sub **RegisterPushButton**(parameterName As String, label As String, buttonId As Integer)",
     "description": "Registers a push button."
    },
    {
     "name": "Sub **RegisterRadioButton**(parameterName As String, label As String, defaultIndex As Integer, buttonNames As Array[String])",
     "description": "Register a block of radio buttons."
    },
    {
     "name": "Function **Round**(x As Double) As Double",
     "description": "Rounds *x* to the nearest integer"
    },
    {
     "name": "Sub **SendGuiParameterShow**(parameterName As String, state As Integer)",
     "description": "Shows or hides a parameter in the GUI. *state can be set to SHOW or HIDE."
    },
    {
     "name": "Sub **SendGuiParameterUpdate**(parameterName As String, state As Integer)",
     "description": "Enables or disables GUI parameter updates. *state can be set to ENABLED or DISABLED."
    },
    {
     "name": "Sub **SendGuiRefresh**()",
     "description": "Sends a refresh command to the GUI"
    },
    {
     "name": "Sub **SendGuiStatus**(parameterName As String, state As Integer)",
     "description": "Enables or disables a parameter in the GUI. *state can be set to ENABLED or DISABLED."
    },
    {
     "name": "Sub **SetAnimateParameter**(animate As Boolean)",
     "description": "Disable or enable animation on the last registered parameter."
    },
    {
     "name": "Sub **SetHideParameter**()",
     "description": "Hides the last registered parameter in the GUI."
    },
    {
     "name": "Function **Sign**(x As Double) As Integer",
     "description": "Returns -1 if *x* less than 0.0, 1 if *x* larger than 0.0, 0 if *x* equals 0.0."
    },
    {
     "name": "Function **Sin**(x As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **Sinh**(x As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **Sqr**(x As Double) As Double",
     "description": "Returns *x***x*."
    },
    {
     "name": "Function **Sqrt**(x As Double) As Double",
     "description": "Computes the square root of *x*."
    },
    {
     "name": "Function **Tan**(x As Double) As Double",
     "description": ""
    },
    {
     "name": "Function **TriangleArea**(a As Vertex, b As Vertex, c As Vertex) As Double",
     "description": ""
    },
    {
     "name": "Function **TriangleCenter**(a As Vertex, b As Vertex, c As Vertex) As Vertex",
     "description": ""
    },
    {
     "name": "Sub **UpdateGuiParameterDoubleDefMinMax**(parameterName As String, defaultValue As Double, minValue As Double, maxValue As Double)",
     "description": "Sets new default, min and max value for parameters like Double, SliderDouble etc."
    },
    {
     "name": "Sub **UpdateGuiParameterEntries**(parameterName As String, entries As Array[String])",
     "description": "Sets new entries for parameters like List or DropDown"
    },
    {
     "name": "Sub **UpdateGuiParameterIntDefMinMax**(parameterName As String, defaultValue As Integer, minValue As Integer, maxValue As Integer)",
     "description": "Sets new default, min and max value for parameters like Int, SliderInt etc."
    },
    {
     "name": "Function **IsKeyDown**(keyCode As Integer) As Boolean",
     "description": "Deprecated. Use *System.IsKeyDown*."
    },
    {
     "name": "Function **IsLButtonDown**() As Boolean",
     "description": "Deprecated. *System.LButtonState*."
    },
    {
     "name": "Function **IsMButtonDown**() As Boolean",
     "description": "Deprecated. *System.MButtonState*."
    },
    {
     "name": "Function **IsRButtonDown**() As Boolean",
     "description": "Deprecated. *System.RButtonState*."
    },
    {
     "name": "Function **SendCommand**(command As String) As String",
     "description": "Deprecated. Use *System.SendCommand*."
    },
    {
     "name": "Function **SendRemoteCommand**(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String",
     "description": "Deprecated. Use *System.SendRemoteCommand*."
    },
    {
     "name": "Function **TcpSend**(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String",
     "description": "Deprecated. Use *System.TcpSend*."
    }
   ]
  }
 ]
}