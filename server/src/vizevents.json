{
	"event_definitions": {
		"container_script_events": {
			"event": [
				{
					"description": "This procedure must contain all Register... calls (such as RegisterParameterInt), which are used to define the script's parameters. For locally defined scripts, this callback is invoked once for every script instance, immediately before OnInit, while for plugin scripts, it is called at system startup.",
					"code": "Sub OnInitParameters()\n\t\nEnd Sub",
					"name": "OnInitParameters"
				},
				{
					"description": "Called after a script instance has been created (e.g. by pressing Compile and Run or by loading a scene with a script). Initialization code should be placed here.",
					"code": "Sub OnInit()\n\t\nEnd Sub",
					"name": "OnInit"
				},
				{
					"description": "Called when the mouse cursor enters the area occupied by the script's container in the output window. If the container's ExactPicking property, which is true by default, is set to false, it is sufficient that the mouse cursor hits the container's bounding box for OnEnter to be called.",
					"code": "Sub OnEnter()\n\t\nEnd Sub",
					"name": "OnEnter"
				},
				{
					"description": "The reverse of OnEnter: Called when the mouse cursor leaves the container's area. This procedure is called only if OnEnter has previously been called for the script's container.",
					"code": "Sub OnLeave()\n\nEnd Sub",
					"name": "OnLeave"
				},
				{
					"description": "Called when the mouse cursor enters the area occupied by a sub-container of the script's container. Otherwise identical to OnEnter.",
					"code": "Sub OnEnterSubContainer()\n\t\nEnd Sub",
					"name": "OnEnterSubContainer"
				},
				{
					"description": "Called when the mouse cursor leaves the area occupied by a sub-container of the script's container.",
					"code": "Sub OnLeaveSubContainer()\n\t\nEnd Sub",
					"name": "OnLeaveSubContainer"
				},
				{
					"description": "Called once for every field.",
					"code": "Sub OnExecPerField()\n\t\nEnd Sub",
					"name": "OnExecPerField"
				},
				{
					"description": "Called when the user clicks on any push button defined by RegisterPushButton. If the script defines several push buttons, use buttonId to determine which button has been clicked on.",
					"code": "Sub OnExecAction(buttonId As Integer)\n\t\nEnd Sub",
					"name": "OnExecAction"
				},
				{
					"description": "Called whenever the user changes the value of script parameter defined by any of the RegisterParameter... functions.",
					"code": "Sub OnParameterChanged(parameterName As String)\n\nEnd Sub",
					"name": "OnParameterChanged"
				},
				{
					"description": "Called if the GUI wants to refresh the state of the UI. This would be the proper place where the plugin can set the UI state to enabled/disabled with SendGuiStatus or shown/hidden with SendGuiParameterShow.",
					"code": "Sub OnGuiStatus()\n\t\nEnd Sub",
					"name": "OnGuiStatus"
				},
				{
					"description": "Called whenever the user presses a key. \n\"keycode\" identifies the key pressed. Possible values are: KEY_A, KEY_B, ..., KEY_Z, KEY_0, ..., KEY_9, KEY_HOME, KEY_END, KEY_PAGEUP, KEY_PAGEDN, KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT, KEY_INSERT, KEY_DELETE, KEY_BEGIN, KEY_MULTIPLY, KEY_DIVIDE, KEY_ESCAPE, KEY_RETURN, KEY_ENTER, KEY_SEPARATOR, KEY_SPACE, KEY_BACKSPACE, KEY_TAB, KEY_CONTROL, KEY_MENU, KEY_ALT, KEY_SHIFT, KEY_F1, ... KEY_F12, KEY_SCROLL_LOCK, KEY_PAUSE, NUMPAD_INSERT, NUMPAD_END, NUMPAD_DOWN, NUMPAD_PGDN, NUMPAD_LEFT, NUMPAD_BEGIN, NUMPAD_RIGHT, NUMPAD_HOME, NUMPAD_UP, NUMPAD_PGUP, NUMPAD0, ..., NUMPAD9",
					"code": "Sub OnKeyDown(keyCode As Integer)\n\t\nEnd Sub",
					"name": "OnKeyDown"
				},
				{
					"description": "Called whenever the user releases a key.\n\"keycode\" identifies the key pressed. Possible values are: KEY_A, KEY_B, ..., KEY_Z, KEY_0, ..., KEY_9, KEY_HOME, KEY_END, KEY_PAGEUP, KEY_PAGEDN, KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT, KEY_INSERT, KEY_DELETE, KEY_BEGIN, KEY_MULTIPLY, KEY_DIVIDE, KEY_ESCAPE, KEY_RETURN, KEY_ENTER, KEY_SEPARATOR, KEY_SPACE, KEY_BACKSPACE, KEY_TAB, KEY_CONTROL, KEY_MENU, KEY_ALT, KEY_SHIFT, KEY_F1, ... KEY_F12, KEY_SCROLL_LOCK, KEY_PAUSE, NUMPAD_INSERT, NUMPAD_END, NUMPAD_DOWN, NUMPAD_PGDN, NUMPAD_LEFT, NUMPAD_BEGIN, NUMPAD_RIGHT, NUMPAD_HOME, NUMPAD_UP, NUMPAD_PGUP, NUMPAD0, ..., NUMPAD9",
					"code": "Sub OnKeyUp(keyCode As Integer)\n\t\nEnd Sub",
					"name": "OnKeyUp"
				},
				{
					"description": "Called when the user clicks on a scene grid. \n\"button\" defines the ID of the pressed button, \n\"pos\" specifies the 3D world position of the cursor and \"rot\" gives you the actual rotation.",
					"code": "Sub OnButtonDown6DOF(button As Integer, pos As Vertex, rot As Vertex)\n\t\nEnd Sub",
					"name": "OnButtonDown6DOF"
				},
				{
					"description": "Called whenever the user releases a mouse button.\n\"button\" defines the ID of the pressed button, \n\"pos\" specifies the 3D world position of the cursor and \"rot\" gives you the actual rotation.",
					"code": "Sub OnButtonUp6DOF(button As Integer, pos As Vertex, rot As Vertex)\n\nEnd Sub",
					"name": "OnButtonUp6DOF"
				},
				{
					"description": "Called when the user moves the cursor on a scene grid. \n\"button\" defines the ID of the pressed button, \n\"pos\" specifies the 3D world position of the cursor and \"rot\" gives you the actual rotation.",
					"code": "Sub OnMove6DOF(button As Integer, pos As Vertex, rot As Vertex)\n\t\nEnd Sub",
					"name": "OnMove6DOF"
				},
				{
					"description": "Called when the user moves the cursor on a scene grid. \n\"button\" defines the ID of the pressed button, \n\"pos\" specifies the offset vector to the last 6DOF position of the cursor and \"rot\" gives you the actual rotation.",
					"code": "Sub OnMoveRelative6DOF(button As Integer, pos As Vertex, rot As Vertex)\n\t\nEnd Sub",
					"name": "OnMoveRelative6DOF"
				},
				{
					"description": "Called when the user performs a scale operation (e.g.: with a multi-touch device) on a scene grid. \n\"button\" defines the ID of the pressed button and \"scale\" specifies the actual scale factor.",
					"code": "Sub OnScale6DOF(button As Integer, scale As Vertex)\n\t\nEnd Sub",
					"name": "OnScale6DOF"
				},
				{
					"description": "Called when the user touches this object (where this scriptplugininstance resides on) at a multi-touch device. stroke gives you the stroke ID of the multi-touch operation. x and y specify the hit position in screen coordinates. This callback is used to instantiate a certain control in the multi-touch server.",
					"code": "Sub OnMTHit(stroke As Integer, x As Integer, y As Integer)\n\t\nEnd Sub",
					"name": "OnMTHit"
				},
				{
					"description": "Called when the user performs a menu gesture on the multi-touch device. x and y specify the hit position in screen coordinates.",
					"code": "Sub OnMTMenu(x As Integer, y As Integer)\n\t\nEnd Sub",
					"name": "OnMTMenu"
				},
				{
					"description": "Called when a PZR2D control was registered. x and y specify the hit position in screen coordinates, rot gives you the object rotation, scale holds the scale factor and pressure contains the current mean contact pressure.",
					"code": "Sub OnMTControlPZR2D(x As Integer, y As Integer rot As Vertex, scale As Vertex, pressure As Double)\n\t\nEnd Sub",
					"name": "OnMTControlPZR2D"
				},
				{
					"description": "Called when a Button control was registered. strokes contains the current hit count on the button object and pressure defines the mean contact pressure.",
					"code": "Sub OnMTControlButton(strokes As Integer, pressure As Double)\n\t\nEnd Sub",
					"name": "OnMTControlButton"
				},
				{
					"description": "Called when a registered multi-touch control became inactive (all strokes were removed from the object).",
					"code": "Sub OnMTControlInactive()\n\t\nEnd Sub",
					"name": "OnMTControlInactive"
				},
				{
					"description": "Called whenever the mouse cursor is moved within the output window. \"x\" and \"y\" specify the cursor position in screen coordinates.",
					"code": "Sub OnMouseMove(x As Integer, y As Integer)\n\t\nEnd Sub",
					"name": "OnMouseMove"
				},
				{
					"description": "Called whenever the user presses the left mouse button.",
					"code": "Sub OnLButtonDown()\n\t\nEnd Sub",
					"name": "OnLButtonDown"
				},
				{
					"description": "Called whenever the user presses the middle mouse button.",
					"code": "Sub OnMButtonDown()\n\t\nEnd Sub",
					"name": "OnMButtonDown"
				},
				{
					"description": "Called whenever the user presses the right mouse button.",
					"code": "Sub OnRButtonDown()\n\t\nEnd Sub",
					"name": "OnRButtonDown"
				},
				{
					"description": "Called whenever the user releases the left mouse button.",
					"code": "Sub OnLButtonUp()\n\t\nEnd Sub",
					"name": "OnLButtonUp"
				},
				{
					"description": "Called whenever the user releases the middle mouse button.",
					"code": "Sub OnMButtonUp()\n\t\nEnd Sub",
					"name": "OnMButtonUp"
				},
				{
					"description": "Called whenever the user releases the right mouse button.",
					"code": "Sub OnRButtonUp()\n\t\nEnd Sub",
					"name": "OnRButtonUp"
				},
				{
					"description": "Called whenever the mouse wheel is rotated within the output window.",
					"code": "Sub OnMouseWheel(distance As Integer)\n\t\nEnd Sub",
					"name": "OnMouseWheel"
				},
				{
					"description": "Called when a variable in a SharedMemory map is changed. The SharedMemory map and the name of the variable are passed to this procedure as parameters. The name of the variable must previously be registered to the SharedMemory map by calling its RegisterChangedCallback procedure.",
					"code": "Sub OnSharedMemoryVariableChanged(map As SharedMemory, mapKey As String)\n\t\nEnd Sub",
					"name": "OnSharedMemoryVariableChanged"
				},
				{
					"description": "Called when a variable in a SharedMemory map is deleted. The SharedMemory map and the name of the variable are passed to this procedure as parameters. The name of the variable must previously be registered to the SharedMemory map by calling its RegisterChangedCallback procedure.",
					"code": "Sub OnSharedMemoryVariableDeleted(map As SharedMemory, mapKey As String)\n\t\nEnd Sub",
					"name": "OnSharedMemoryVariableDeleted"
				},
				{
					"description": "Called when a geometry changed which was registered with RegisterChangedCallback or RegisterTextChangedCallback before.",
					"code": "Sub OnGeometryChanged(geom As Geometry)\n\t\nEnd Sub",
					"name": "OnGeometryChanged"
				}
			]
		},
		"scene_script_events": {
			"event": [
				{
					"description": "This procedure must contain all Register... calls (such as RegisterParameterInt), which are used to define the script's parameters. For locally defined scripts, this callback is invoked once for every script instance, immediately before OnInit, while for plugin scripts, it is called at system startup.",
					"code": "Sub OnInitParameters()\n\t\nEnd Sub",
					"name": "OnInitParameters"
				},
				{
					"description": "Called after a script instance has been created (e.g. by pressing Compile and Run or by loading a scene with a script). Initialization code should be placed here.",
					"code": "Sub OnInit()\n\t\nEnd Sub",
					"name": "OnInit"
				},
				{
					"description": "Called once for every field.",
					"code": "Sub OnExecPerField()\n\t\nEnd Sub",
					"name": "OnExecPerField"
				},
				{
					"description": "Called when the user clicks on any push button defined by RegisterPushButton. If the script defines several push buttons, use buttonId to determine which button has been clicked on.",
					"code": "Sub OnExecAction(buttonId As Integer)\n\t\nEnd Sub",
					"name": "OnExecAction"
				},
				{
					"description": "Called if the GUI wants to refresh the state of the UI. This would be the proper place where the plugin can set the UI state to enabled/disabled with SendGuiStatus or shown/hidden with SendGuiParameterShow.",
					"code": "Sub OnGuiStatus()\n\t\nEnd Sub",
					"name": "OnGuiStatus"
				},
				{
					"description": "Called whenever the user changes the value of script parameter defined by any of the RegisterParameter... functions.",
					"code": "Sub OnParameterChanged(parameterName As String)\n\t\nEnd Sub",
					"name": "OnParameterChanged"
				},
				{
					"description": "Called when a variable in a SharedMemory map is changed. The SharedMemory map and the name of the variable are passed to this procedure as parameters. The name of the variable must previously be registered to the SharedMemory map by calling its RegisterChangedCallback procedure.",
					"code": "Sub OnSharedMemoryVariableChanged(map As SharedMemory, mapKey As String)\n\t\nEnd Sub",
					"name": "OnSharedMemoryVariableChanged"
				},
				{
					"description": "Called when a variable in a SharedMemory map is deleted. The SharedMemory map and the name of the variable are passed to this procedure as parameters. The name of the variable must previously be registered to the SharedMemory map by calling its RegisterChangedCallback procedure.",
					"code": "Sub OnSharedMemoryVariableDeleted(map As SharedMemory, mapKey As String)\n\t\nEnd Sub",
					"name": "OnSharedMemoryVariableDeleted"
				},
				{
					"description": "Called when a geometry changed which was registered with RegisterChangedCallback or RegisterTextChangedCallback before.",
					"code": "Sub OnGeometryChanged(geom As Geometry)\n\t\nEnd Sub",
					"name": "OnGeometryChanged"
				}
			]
		}
	}
}