{
  "scopes": [
    {
      "name": "Global Procedures",
      "description": "",
      "properties": [],
      "member_methods": [
        {
          "name": "Abs",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Abs }",
          "code_insight_hint": "function(){ Function Abs(x As Double) As Double }"
        },
        {
          "name": "Acos",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Acos }",
          "code_insight_hint": "function(){ Function Acos(x As Double) As Double }"
        },
        {
          "name": "AngleBetweenVectors",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ AngleBetweenVectors }",
          "code_insight_hint": "function(){ Function AngleBetweenVectors(v1 As Vertex, v2 As Vertex) As Double }"
        },
        {
          "name": "Asc",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Returns the ASCII/UTF8 code (0-255) for the specified character. }",
          "code_completion_hint": "function(){ Asc }",
          "code_insight_hint": "function(){ Function Asc(s As String) As Integer }"
        },
        {
          "name": "Asin",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Asin }",
          "code_insight_hint": "function(){ Function Asin(x As Double) As Double }"
        },
        {
          "name": "Atan",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Atan }",
          "code_insight_hint": "function(){ Function Atan(x As Double) As Double }"
        },
        {
          "name": "Atan2",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Atan2 }",
          "code_insight_hint": "function(){ Function Atan2(x As Double, y As Double) As Double }"
        },
        {
          "name": "CBool",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Converts an integer to a boolean. }",
          "code_completion_hint": "function(){ CBool }",
          "code_insight_hint": "function(){ Function CBool(v As Integer) As Boolean }"
        },
        {
          "name": "CBool",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Converts a double to a boolean. }",
          "code_completion_hint": "function(){ CBool }",
          "code_insight_hint": "function(){ Function CBool(v As Double) As Boolean }"
        },
        {
          "name": "CBool",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Converts a UUID to a boolean. }",
          "code_completion_hint": "function(){ CBool }",
          "code_insight_hint": "function(){ Function CBool(v As Uuid) As Boolean }"
        },
        {
          "name": "CColor",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "function(){ Constructs a a color object. }",
          "code_completion_hint": "function(){ CColor }",
          "code_insight_hint": "function(){ Function CColor(r As Double, g As Double, b As Double) As Color }"
        },
        {
          "name": "CColor",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "function(){ Constructs a a color object. }",
          "code_completion_hint": "function(){ CColor }",
          "code_insight_hint": "function(){ Function CColor(r As Double, g As Double, b As Double, a As Double) As Color }"
        },
        {
          "name": "CDbl",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Converts a boolean to a double. }",
          "code_completion_hint": "function(){ CDbl }",
          "code_insight_hint": "function(){ Function CDbl(v As Boolean) As Double }"
        },
        {
          "name": "CDbl",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Converts an integer to a double. }",
          "code_completion_hint": "function(){ CDbl }",
          "code_insight_hint": "function(){ Function CDbl(v As Integer) As Double }"
        },
        {
          "name": "CDbl",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Converts a string to a double. }",
          "code_completion_hint": "function(){ CDbl }",
          "code_insight_hint": "function(){ Function CDbl(v As String) As Double }"
        },
        {
          "name": "Ceil",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns the smallest integer that is larger than or equal to x. }",
          "code_completion_hint": "function(){ Ceil }",
          "code_insight_hint": "function(){ Function Ceil(x As Double) As Double }"
        },
        {
          "name": "Chr",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Returns the character associated with the specified ASCII/UTF8 code (0-255). }",
          "code_completion_hint": "function(){ Chr }",
          "code_insight_hint": "function(){ Function Chr(charCode As Integer) As String }"
        },
        {
          "name": "CInt",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Converts a boolean to an integer. }",
          "code_completion_hint": "function(){ CInt }",
          "code_insight_hint": "function(){ Function CInt(v As Boolean) As Integer }"
        },
        {
          "name": "CInt",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Converts a double to an integer. }",
          "code_completion_hint": "function(){ CInt }",
          "code_insight_hint": "function(){ Function CInt(v As Double) As Integer }"
        },
        {
          "name": "CInt",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Converts a string to an integer. }",
          "code_completion_hint": "function(){ CInt }",
          "code_insight_hint": "function(){ Function CInt(v As String) As Integer }"
        },
        {
          "name": "Cos",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Cos }",
          "code_insight_hint": "function(){ Function Cos(x As Double) As Double }"
        },
        {
          "name": "Cosh",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Cosh }",
          "code_insight_hint": "function(){ Function Cosh(x As Double) As Double }"
        },
        {
          "name": "CStr",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Converts a boolean to a string. }",
          "code_completion_hint": "function(){ CStr }",
          "code_insight_hint": "function(){ Function CStr(v As Boolean) As String }"
        },
        {
          "name": "CStr",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Converts a integer to a string. }",
          "code_completion_hint": "function(){ CStr }",
          "code_insight_hint": "function(){ Function CStr(v As Integer) As String }"
        },
        {
          "name": "CStr",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Converts a double to a string. }",
          "code_completion_hint": "function(){ CStr }",
          "code_insight_hint": "function(){ Function CStr(v As Double) As String }"
        },
        {
          "name": "CStr",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Converts a UUID to a string. }",
          "code_completion_hint": "function(){ CStr }",
          "code_insight_hint": "function(){ Function CStr(v As Uuid) As String }"
        },
        {
          "name": "CUuid",
          "deprecated": "false",
          "return_value_scope": "Uuid",
          "description": "function(){ Constructs a uuid from a string value. }",
          "code_completion_hint": "function(){ CUuid }",
          "code_insight_hint": "function(){ Function CUuid(v As String) As Uuid }"
        },
        {
          "name": "CVertex",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Constructs a vertex from a bool value, assigning the value to x, y, and z. }",
          "code_completion_hint": "function(){ CVertex }",
          "code_insight_hint": "function(){ Function CVertex(v As Boolean) As Vertex }"
        },
        {
          "name": "CVertex",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Constructs a vertex from an integer value, assigning the value to x, y, and z. }",
          "code_completion_hint": "function(){ CVertex }",
          "code_insight_hint": "function(){ Function CVertex(v As Integer) As Vertex }"
        },
        {
          "name": "CVertex",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Constructs a vertex from an double value, assigning the value to x, y, and z. }",
          "code_completion_hint": "function(){ CVertex }",
          "code_insight_hint": "function(){ Function CVertex(v As Double) As Vertex }"
        },
        {
          "name": "CVertex",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Constructs a vertex from 3 double values. }",
          "code_completion_hint": "function(){ CVertex }",
          "code_insight_hint": "function(){ Function CVertex(x As Double, y As Double, z As Double) As Vertex }"
        },
        {
          "name": "Determinant",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Determinant }",
          "code_insight_hint": "function(){ Function Determinant(a As Vertex, b As Vertex, c As Vertex) As Double }"
        },
        {
          "name": "Distance",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns the distance between two vertices. }",
          "code_completion_hint": "function(){ Distance }",
          "code_insight_hint": "function(){ Function Distance(v1 As Vertex, v2 As Vertex) As Double }"
        },
        {
          "name": "Distance2",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns the squared distance between two vertices. }",
          "code_completion_hint": "function(){ Distance2 }",
          "code_insight_hint": "function(){ Function Distance2(v1 As Vertex, v2 As Vertex) As Double }"
        },
        {
          "name": "DoubleToString",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Converts a double value to a string. }",
          "code_completion_hint": "function(){ DoubleToString }",
          "code_insight_hint": "function(){ Function DoubleToString(value As Double, precision As Integer) As String }"
        },
        {
          "name": "DoubleToString",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Converts a double value to a string. }",
          "code_completion_hint": "function(){ DoubleToString }",
          "code_insight_hint": "function(){ Function DoubleToString(value As Double, precision As Integer, width As Integer) As String }"
        },
        {
          "name": "Exp",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Exp }",
          "code_insight_hint": "function(){ Function Exp(x As Double) As Double }"
        },
        {
          "name": "Fix",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns Floor(x) if x larger than or equal to 0.0, otherwise Ceil(x). }",
          "code_completion_hint": "function(){ Fix }",
          "code_insight_hint": "function(){ Function Fix(x As Double) As Double }"
        },
        {
          "name": "Floor",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns the largest integer that is smaller than or equal to x. }",
          "code_completion_hint": "function(){ Floor }",
          "code_insight_hint": "function(){ Function Floor(x As Double) As Double }"
        },
        {
          "name": "GetCurrentTime",
          "deprecated": "false",
          "return_value_scope": "DateTime",
          "description": "function(){ Gets the current time. }",
          "code_completion_hint": "function(){ GetCurrentTime }",
          "code_insight_hint": "function(){ Function GetCurrentTime() As DateTime }"
        },
        {
          "name": "GetParameterBool",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns the value of the Boolean parameter parameterName. }",
          "code_completion_hint": "function(){ GetParameterBool }",
          "code_insight_hint": "function(){ Function GetParameterBool(parameterName As String) As Boolean }"
        },
        {
          "name": "GetParameterColor",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "function(){ Returns the value of the Color parameter parameterName. }",
          "code_completion_hint": "function(){ GetParameterColor }",
          "code_insight_hint": "function(){ Function GetParameterColor(parameterName As String) As Color }"
        },
        {
          "name": "GetParameterContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Returns the value of the Container parameter parameterName. }",
          "code_completion_hint": "function(){ GetParameterContainer }",
          "code_insight_hint": "function(){ Function GetParameterContainer(parameterName As String) As Container }"
        },
        {
          "name": "GetParameterDouble",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns the value of the Double parameter parameterName. }",
          "code_completion_hint": "function(){ GetParameterDouble }",
          "code_insight_hint": "function(){ Function GetParameterDouble(parameterName As String) As Double }"
        },
        {
          "name": "GetParameterInt",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Returns the value of the Integer parameter parameterName. }",
          "code_completion_hint": "function(){ GetParameterInt }",
          "code_insight_hint": "function(){ Function GetParameterInt(parameterName As String) As Integer }"
        },
        {
          "name": "GetParameterString",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Returns the value of the String parameter parameterName. }",
          "code_completion_hint": "function(){ GetParameterString }",
          "code_insight_hint": "function(){ Function GetParameterString(parameterName As String) As String }"
        },
        {
          "name": "GetTickCount",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Returns the processor time in milliseconds. Note that the timing resolution provided by this procedure is fairly low. For more accurate timing, use System.GetElapsedTime() instead. }",
          "code_completion_hint": "function(){ GetTickCount }",
          "code_insight_hint": "function(){ Function GetTickCount() As Integer }"
        },
        {
          "name": "Int",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Identical to Floor. }",
          "code_completion_hint": "function(){ Int }",
          "code_insight_hint": "function(){ Function Int(x As Double) As Double }"
        },
        {
          "name": "IntToString",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Converts an integer value to a right-aligned string, filling empty space with blanks. }",
          "code_completion_hint": "function(){ IntToString }",
          "code_insight_hint": "function(){ Function IntToString(value As Integer, width As Integer) As String }"
        },
        {
          "name": "IntToString",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Converts an integer value to a right-aligned string, filling empty space with blanks or (if addLeadingZeros is true) with zeros. }",
          "code_completion_hint": "function(){ IntToString }",
          "code_insight_hint": "function(){ Function IntToString(value As Integer, width As Integer, addLeadingZeros As Boolean) As String }"
        },
        {
          "name": "Len",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Returns the length of the specified string. }",
          "code_completion_hint": "function(){ Len }",
          "code_insight_hint": "function(){ Function Len(s As String) As Integer }"
        },
        {
          "name": "LineLineIntersection",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){}",
          "code_completion_hint": "function(){ LineLineIntersection }",
          "code_insight_hint": "function(){ Function LineLineIntersection(line1Point As Vertex, line1Direction As Vertex, line2Point As Vertex, line2Direction As Vertex) As Vertex }"
        },
        {
          "name": "Log",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Log }",
          "code_insight_hint": "function(){ Function Log(x As Double) As Double }"
        },
        {
          "name": "Max",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Returns the larger of the two values. }",
          "code_completion_hint": "function(){ Max }",
          "code_insight_hint": "function(){ Function Max(a As Integer, b As Integer) As Integer }"
        },
        {
          "name": "Max",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns the larger of the two values. }",
          "code_completion_hint": "function(){ Max }",
          "code_insight_hint": "function(){ Function Max(a As Double, b As Double) As Double }"
        },
        {
          "name": "Min",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns the smaller of the two values. }",
          "code_completion_hint": "function(){ Min }",
          "code_insight_hint": "function(){ Function Min(a As Double, b As Double) As Double }"
        },
        {
          "name": "Min",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Returns the smaller of the two values. }",
          "code_completion_hint": "function(){ Min }",
          "code_insight_hint": "function(){ Function Min(a As Integer, b As Integer) As Integer }"
        },
        {
          "name": "PlaneLineIntersection",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){}",
          "code_completion_hint": "function(){ PlaneLineIntersection }",
          "code_insight_hint": "function(){ Function PlaneLineIntersection(planePoint As Vertex, planeNormal As Vertex, linePoint As Vertex, lineDirection As Vertex) As Vertex }"
        },
        {
          "name": "Println",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Prints a vertex.",
          "code_completion_hint": "Println",
          "code_insight_hint": "Sub Println(v As Vertex)"
        },
        {
          "name": "Println",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Prints a newline.",
          "code_completion_hint": "Println",
          "code_insight_hint": "Sub Println()"
        },
        {
          "name": "Println",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Prints a boolean.",
          "code_completion_hint": "Println",
          "code_insight_hint": "Sub Println(v As Boolean)"
        },
        {
          "name": "Println",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Prints an integer.",
          "code_completion_hint": "Println",
          "code_insight_hint": "Sub Println(v As Integer)"
        },
        {
          "name": "Println",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Prints a double.",
          "code_completion_hint": "Println",
          "code_insight_hint": "Sub Println(v As Double)"
        },
        {
          "name": "Println",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Prints a string.",
          "code_completion_hint": "Println",
          "code_insight_hint": "Sub Println(v As String)"
        },
        {
          "name": "Println",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Prints an object of type Variant.",
          "code_completion_hint": "Println",
          "code_insight_hint": "Sub Println(v As Variant)"
        },
        {
          "name": "Println",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Prints a uuid.",
          "code_completion_hint": "Println",
          "code_insight_hint": "Sub Println(v As Uuid)"
        },
        {
          "name": "Random",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns a random number of type double in the range [0, 1). }",
          "code_completion_hint": "function(){ Random }",
          "code_insight_hint": "function(){ Function Random() As Double }"
        },
        {
          "name": "Random",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Returns a random integer in the range 0 through i-1. }",
          "code_completion_hint": "function(){ Random }",
          "code_insight_hint": "function(){ Function Random(i As Integer) As Integer }"
        },
        {
          "name": "RegisterDirSelector",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a directory parameter.",
          "code_completion_hint": "RegisterDirSelector",
          "code_insight_hint": "Sub RegisterDirSelector(parameterName As String, label As String, default As String)"
        },
        {
          "name": "RegisterFileSelector",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a file parameter.",
          "code_completion_hint": "RegisterFileSelector",
          "code_insight_hint": "Sub RegisterFileSelector(parameterName As String, label As String, defaultPath As String, defaultFile As String, filter As String)"
        },
        {
          "name": "RegisterInfoText",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Call this function to provide documentation for the script (accessible via the 'i'-button).",
          "code_completion_hint": "RegisterInfoText",
          "code_insight_hint": "Sub RegisterInfoText(infoText As String)"
        },
        {
          "name": "RegisterParameterBool",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a parameter of type Boolean.",
          "code_completion_hint": "RegisterParameterBool",
          "code_insight_hint": "Sub RegisterParameterBool(parameterName As String, label As String, defaultName As Boolean)"
        },
        {
          "name": "RegisterParameterColor",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a parameter of type Color.",
          "code_completion_hint": "RegisterParameterColor",
          "code_insight_hint": "Sub RegisterParameterColor(parameterName As String, label As String, defaultValue As Color)"
        },
        {
          "name": "RegisterParameterContainer",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a parameter of type Container.",
          "code_completion_hint": "RegisterParameterContainer",
          "code_insight_hint": "Sub RegisterParameterContainer(parameterName As String, label As String)"
        },
        {
          "name": "RegisterParameterDouble",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a parameter of type Double.",
          "code_completion_hint": "RegisterParameterDouble",
          "code_insight_hint": "Sub RegisterParameterDouble(parameterName As String, label As String, defaultValue As Double, minValue As Double, maxValue As Double)"
        },
        {
          "name": "RegisterParameterDropDown",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a dropdown box. width defines the parameter's width in number of characters and height sets the dropdown box's height in number of lines.",
          "code_completion_hint": "RegisterParameterDropDown",
          "code_insight_hint": "Sub RegisterParameterDropDown(parameterName As String, label As String, default As Integer, entries As Array[String], width As Integer, height As Integer)"
        },
        {
          "name": "RegisterParameterHList",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a list box. separatorChar defines the character which is used to separate the values. width and height are defined in pixels.",
          "code_completion_hint": "RegisterParameterHList",
          "code_insight_hint": "Sub RegisterParameterHList(parameterName As String, label As String, default As Integer, entries As Array[String], separatorChar As String, width As Integer, height As Integer)"
        },
        {
          "name": "RegisterParameterImage",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a parameter of type Image.",
          "code_completion_hint": "RegisterParameterImage",
          "code_insight_hint": "Sub RegisterParameterImage(parameterName As String, label As String)"
        },
        {
          "name": "RegisterParameterInt",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a parameter of type Integer.",
          "code_completion_hint": "RegisterParameterInt",
          "code_insight_hint": "Sub RegisterParameterInt(parameterName As String, label As String, defaultValue As Integer, minValue As Integer, maxValue As Integer)"
        },
        {
          "name": "RegisterParameterList",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a list box. width and height are defined in pixels.",
          "code_completion_hint": "RegisterParameterList",
          "code_insight_hint": "Sub RegisterParameterList(parameterName As String, label As String, default As Integer, entries As Array[String], width As Integer, height As Integer)"
        },
        {
          "name": "RegisterParameterSliderDouble",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a parameter of type Double with slider appearance. width specifies the parameter's width in pixels.",
          "code_completion_hint": "RegisterParameterSliderDouble",
          "code_insight_hint": "Sub RegisterParameterSliderDouble(parameterName As String, label As String, defaultValue As Double, minValue As Double, maxValue As Double, width As Integer)"
        },
        {
          "name": "RegisterParameterSliderInt",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a parameter of type Integer with slider appearance. width specifies the parameter's width in pixels.",
          "code_completion_hint": "RegisterParameterSliderInt",
          "code_insight_hint": "Sub RegisterParameterSliderInt(parameterName As String, label As String, defaultValue As Integer, minValue As Integer, maxValue As Integer, width As Integer)"
        },
        {
          "name": "RegisterParameterString",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a parameter of type String. If charSet is empty, all characters are allowed.",
          "code_completion_hint": "RegisterParameterString",
          "code_insight_hint": "Sub RegisterParameterString(parameterName As String, label As String, defaultString As String, widgetSize As Integer, maxLength As Integer, charSet As String)"
        },
        {
          "name": "RegisterParameterText",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a parameter of type String that is entered in a text box. width and height specify the size of the text box in pixels.",
          "code_completion_hint": "RegisterParameterText",
          "code_insight_hint": "Sub RegisterParameterText(parameterName As String, defaultText As String, width As Integer, height As Integer)"
        },
        {
          "name": "RegisterPluginVersion",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "You can use this to set information about your script-plugin's version. It's recommended to set version numbers especially for VSL plugins.",
          "code_completion_hint": "RegisterPluginVersion",
          "code_insight_hint": "Sub RegisterPluginVersion(version As Integer, release As Integer, patchlevel As Integer)"
        },
        {
          "name": "RegisterPushButton",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a push button.",
          "code_completion_hint": "RegisterPushButton",
          "code_insight_hint": "Sub RegisterPushButton(parameterName As String, label As String, buttonId As Integer)"
        },
        {
          "name": "RegisterRadioButton",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Register a block of radio buttons.",
          "code_completion_hint": "RegisterRadioButton",
          "code_insight_hint": "Sub RegisterRadioButton(parameterName As String, label As String, defaultIndex As Integer, buttonNames As Array[String])"
        },
        {
          "name": "Round",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Rounds x to the nearest integer }",
          "code_completion_hint": "function(){ Round }",
          "code_insight_hint": "function(){ Function Round(x As Double) As Double }"
        },
        {
          "name": "SendGuiParameterShow",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Shows or hides a parameter in the GUI. state can be set to SHOW or HIDE.",
          "code_completion_hint": "SendGuiParameterShow",
          "code_insight_hint": "Sub SendGuiParameterShow(parameterName As String, state As Integer)"
        },
        {
          "name": "SendGuiParameterUpdate",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Enables or disables GUI parameter updates. state can be set to ENABLED or DISABLED.",
          "code_completion_hint": "SendGuiParameterUpdate",
          "code_insight_hint": "Sub SendGuiParameterUpdate(parameterName As String, state As Integer)"
        },
        {
          "name": "SendGuiRefresh",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sends a refresh command to the GUI",
          "code_completion_hint": "SendGuiRefresh",
          "code_insight_hint": "Sub SendGuiRefresh()"
        },
        {
          "name": "SendGuiStatus",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Enables or disables a parameter in the GUI. state can be set to ENABLED or DISABLED.",
          "code_completion_hint": "SendGuiStatus",
          "code_insight_hint": "Sub SendGuiStatus(parameterName As String, state As Integer)"
        },
        {
          "name": "SetAnimateParameter",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Disable or enable animation on the last registered parameter.",
          "code_completion_hint": "SetAnimateParameter",
          "code_insight_hint": "Sub SetAnimateParameter(animate As Boolean)"
        },
        {
          "name": "SetHideParameter",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Hides the last registered parameter in the GUI.",
          "code_completion_hint": "SetHideParameter",
          "code_insight_hint": "Sub SetHideParameter()"
        },
        {
          "name": "Sign",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Returns -1 if x less than 0.0, 1 if x larger than 0.0, 0 if x equals 0.0. }",
          "code_completion_hint": "function(){ Sign }",
          "code_insight_hint": "function(){ Function Sign(x As Double) As Integer }"
        },
        {
          "name": "Sin",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Sin }",
          "code_insight_hint": "function(){ Function Sin(x As Double) As Double }"
        },
        {
          "name": "Sinh",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Sinh }",
          "code_insight_hint": "function(){ Function Sinh(x As Double) As Double }"
        },
        {
          "name": "Sqr",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns x*x. }",
          "code_completion_hint": "function(){ Sqr }",
          "code_insight_hint": "function(){ Function Sqr(x As Double) As Double }"
        },
        {
          "name": "Sqrt",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Computes the square root of x. }",
          "code_completion_hint": "function(){ Sqrt }",
          "code_insight_hint": "function(){ Function Sqrt(x As Double) As Double }"
        },
        {
          "name": "Tan",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ Tan }",
          "code_insight_hint": "function(){ Function Tan(x As Double) As Double }"
        },
        {
          "name": "TriangleArea",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ TriangleArea }",
          "code_insight_hint": "function(){ Function TriangleArea(a As Vertex, b As Vertex, c As Vertex) As Double }"
        },
        {
          "name": "TriangleCenter",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){}",
          "code_completion_hint": "function(){ TriangleCenter }",
          "code_insight_hint": "function(){ Function TriangleCenter(a As Vertex, b As Vertex, c As Vertex) As Vertex }"
        },
        {
          "name": "UpdateGuiParameterDoubleDefMinMax",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets new default, min and max value for parameters like Double, SliderDouble etc.",
          "code_completion_hint": "UpdateGuiParameterDoubleDefMinMax",
          "code_insight_hint": "Sub UpdateGuiParameterDoubleDefMinMax(parameterName As String, defaultValue As Double, minValue As Double, maxValue As Double)"
        },
        {
          "name": "UpdateGuiParameterEntries",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets new entries for parameters like List or DropDown",
          "code_completion_hint": "UpdateGuiParameterEntries",
          "code_insight_hint": "Sub UpdateGuiParameterEntries(parameterName As String, entries As Array[String])"
        },
        {
          "name": "UpdateGuiParameterIntDefMinMax",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets new default, min and max value for parameters like Int, SliderInt etc.",
          "code_completion_hint": "UpdateGuiParameterIntDefMinMax",
          "code_insight_hint": "Sub UpdateGuiParameterIntDefMinMax(parameterName As String, defaultValue As Integer, minValue As Integer, maxValue As Integer)"
        },
        {
          "name": "IsKeyDown",
          "deprecated": "true",
          "return_value_scope": "Boolean",
          "description": "function(){ Deprecated. Use System.IsKeyDown. }",
          "code_completion_hint": "function(){ IsKeyDown }",
          "code_insight_hint": "function(){ Function IsKeyDown(keyCode As Integer) As Boolean }"
        },
        {
          "name": "IsLButtonDown",
          "deprecated": "true",
          "return_value_scope": "Boolean",
          "description": "function(){ Deprecated. System.LButtonState. }",
          "code_completion_hint": "function(){ IsLButtonDown }",
          "code_insight_hint": "function(){ Function IsLButtonDown() As Boolean }"
        },
        {
          "name": "IsMButtonDown",
          "deprecated": "true",
          "return_value_scope": "Boolean",
          "description": "function(){ Deprecated. System.MButtonState. }",
          "code_completion_hint": "function(){ IsMButtonDown }",
          "code_insight_hint": "function(){ Function IsMButtonDown() As Boolean }"
        },
        {
          "name": "IsRButtonDown",
          "deprecated": "true",
          "return_value_scope": "Boolean",
          "description": "function(){ Deprecated. System.RButtonState. }",
          "code_completion_hint": "function(){ IsRButtonDown }",
          "code_insight_hint": "function(){ Function IsRButtonDown() As Boolean }"
        },
        {
          "name": "SendCommand",
          "deprecated": "true",
          "return_value_scope": "String",
          "description": "function(){ Deprecated. Use System.SendCommand. }",
          "code_completion_hint": "function(){ SendCommand }",
          "code_insight_hint": "function(){ Function SendCommand(command As String) As String }"
        },
        {
          "name": "SendRemoteCommand",
          "deprecated": "true",
          "return_value_scope": "String",
          "description": "function(){ Deprecated. Use System.SendRemoteCommand. }",
          "code_completion_hint": "function(){ SendRemoteCommand }",
          "code_insight_hint": "function(){ Function SendRemoteCommand(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String }"
        },
        {
          "name": "TcpSend",
          "deprecated": "true",
          "return_value_scope": "String",
          "description": "function(){ Deprecated. Use System.TcpSend. }",
          "code_completion_hint": "function(){ TcpSend }",
          "code_insight_hint": "function(){ Function TcpSend(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String }"
        }
      ]
    },
    {
      "name": "Alpha",
      "description": "An alpha object. This is used to control a container's alpha value.",
      "properties": [
        {
          "name": "Active",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "Active",
          "code_insight_hint": "Active As Boolean"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "Value",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The alpha value [0.0, 100.0]",
          "code_completion_hint": "Value",
          "code_insight_hint": "Value As Double"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Array[Type]",
      "description": "A dynamic, one-dimensional array. The element type must be specified in brackets. Use the index operator [] to access individual elements. Negative indices refer to elements at the end of the array.",
      "properties": [
        {
          "name": "LBound",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The index of the first elment (always 0)",
          "code_completion_hint": "LBound",
          "code_insight_hint": "LBound As Integer [read-only]"
        },
        {
          "name": "Size",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The size of the array (this member can be set to change the size)",
          "code_completion_hint": "Size",
          "code_insight_hint": "Size As Integer"
        },
        {
          "name": "UBound",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The index of the last elment (-1 if the array is empty)",
          "code_completion_hint": "UBound",
          "code_insight_hint": "UBound As Integer [read-only]"
        }
      ],
      "member_methods": [
        {
          "name": "Clear",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "erases all elements",
          "code_completion_hint": "Clear",
          "code_insight_hint": "Sub Clear()"
        },
        {
          "name": "Erase",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Erases the element at 'index'.",
          "code_completion_hint": "Erase",
          "code_insight_hint": "Sub Erase(index As Integer)"
        },
        {
          "name": "Insert",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Inserts a new element at 'index'.",
          "code_completion_hint": "Insert",
          "code_insight_hint": "Sub Insert(index As Integer, element As Type)"
        },
        {
          "name": "Pop",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "removes the last element",
          "code_completion_hint": "Pop",
          "code_insight_hint": "Sub Pop()"
        },
        {
          "name": "Push",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Inserts a new element at the end of the array.",
          "code_completion_hint": "Push",
          "code_insight_hint": "Sub Push(element As Type)"
        },
        {
          "name": "Sort",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Sorts the array. comparisonFunction must be the name of a user-defined comparison function that takes two arguments of type Type and returns an integer. The return value must be -1 if the the first arguement is smaller than the second, 1 if the first argument is greater than the second, and 0 if the arguments are equal. object is the this pointer passed to the comparison function. It may be null if the camparison function does not access any member variables. The comparison function must be defined in the same script as the Type (if it is a structure) or in the script where Sort is called. }",
          "code_completion_hint": "function(){ Sort }",
          "code_insight_hint": "function(){ Function Sort(object As Base, comparisonFunction As String) As Boolean }"
        }
      ]
    },
    {
      "name": "Base",
      "description": "A viz object. This is the base class of all other viz types.",
      "properties": [
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "NumChannels",
          "deprecated": "true",
          "return_value_scope": "Integer",
          "description": "Deprecated. Use IsAnimated or GetChannelsOfObject instead.",
          "code_completion_hint": "NumChannels",
          "code_insight_hint": "NumChannels As Integer [read-only]"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        },
        {
          "name": "FindChannel",
          "deprecated": "true",
          "return_value_scope": "Channel",
          "description": "function(){ Deprecated. Use FindChannelOfObject }",
          "code_completion_hint": "function(){ FindChannel }",
          "code_insight_hint": "function(){ Function FindChannel(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframe",
          "deprecated": "true",
          "return_value_scope": "Keyframe",
          "description": "function(){ Deprecated. Use FindKeyframeOfObject }",
          "code_completion_hint": "function(){ FindKeyframe }",
          "code_insight_hint": "function(){ Function FindKeyframe(keyframeName As String) As Keyframe }"
        },
        {
          "name": "GetChannels",
          "deprecated": "true",
          "return_value_scope": "Integer",
          "description": "function(){ Deprecated. Use GetChannelsOfObject }",
          "code_completion_hint": "function(){ GetChannels }",
          "code_insight_hint": "function(){ Function GetChannels([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "GetNumberOfAnimationChannels",
          "deprecated": "true",
          "return_value_scope": "Integer",
          "description": "function(){ Deprecated. Use IsAnimated instead. }",
          "code_completion_hint": "function(){ GetNumberOfAnimationChannels }",
          "code_insight_hint": "function(){ Function GetNumberOfAnimationChannels() As Integer }"
        }
      ]
    },
    {
      "name": "BezierHandle",
      "description": "A spline handle of a keyframe.",
      "properties": [
        {
          "name": "LeftAngle",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "",
          "code_completion_hint": "LeftAngle",
          "code_insight_hint": "LeftAngle As Double"
        },
        {
          "name": "LeftInterpolationMode",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "HANDLE_INTERPOLATION_MODE_SMOOTH; HANDLE_INTERPOLATION_MODE_LINEAR",
          "code_completion_hint": "LeftInterpolationMode",
          "code_insight_hint": "LeftInterpolationMode As Integer"
        },
        {
          "name": "LeftWeight",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "",
          "code_completion_hint": "LeftWeight",
          "code_insight_hint": "LeftWeight As Double"
        },
        {
          "name": "LockMode",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "HANDLE_LOCK_MODE_LOCKED; HANDLE_LOCK_MODE_SINGLE; HANDLE_LOCK_MODE_MIRROR",
          "code_completion_hint": "LockMode",
          "code_insight_hint": "LockMode As Integer"
        },
        {
          "name": "RightAngle",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "",
          "code_completion_hint": "RightAngle",
          "code_insight_hint": "RightAngle As Double"
        },
        {
          "name": "RightInterpolationMode",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "HANDLE_INTERPOLATION_MODE_SMOOTH; HANDLE_INTERPOLATION_MODE_LINEAR",
          "code_completion_hint": "RightInterpolationMode",
          "code_insight_hint": "RightInterpolationMode As Integer"
        },
        {
          "name": "RightWeight",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "",
          "code_completion_hint": "RightWeight",
          "code_insight_hint": "RightWeight As Double"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Boolean",
      "description": "A flag that is either true or false.",
      "properties": [],
      "member_methods": []
    },
    {
      "name": "Camera",
      "description": "A camera object. Camera objects are returned by the Scene's CurrentCamera and GetCamera members.",
      "properties": [
        {
          "name": "ActiveExt",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Activates/Deactivates the external camera.",
          "code_completion_hint": "ActiveExt",
          "code_insight_hint": "ActiveExt As Boolean"
        },
        {
          "name": "Cx",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The center shift in x",
          "code_completion_hint": "Cx",
          "code_insight_hint": "Cx As Double"
        },
        {
          "name": "CxExt",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The center shift in x of the external camera",
          "code_completion_hint": "CxExt",
          "code_insight_hint": "CxExt As Double [read-only]"
        },
        {
          "name": "Cy",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The center shift in y",
          "code_completion_hint": "Cy",
          "code_insight_hint": "Cy As Double"
        },
        {
          "name": "CyExt",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The center shift in y of the external camera",
          "code_completion_hint": "CyExt",
          "code_insight_hint": "CyExt As Double [read-only]"
        },
        {
          "name": "DecoupleExternal",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "If true, viz receives external camera data without copying them to its internal camera structures for rendering.",
          "code_completion_hint": "DecoupleExternal",
          "code_insight_hint": "DecoupleExternal As Boolean"
        },
        {
          "name": "Direction",
          "deprecated": "false",
          "return_value_scope": "Position",
          "description": "The direction of the camera",
          "code_completion_hint": "Direction",
          "code_insight_hint": "Direction As Position"
        },
        {
          "name": "FocalPlane",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The focal plane",
          "code_completion_hint": "FocalPlane",
          "code_insight_hint": "FocalPlane As Double"
        },
        {
          "name": "Fovx",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The field of view in x",
          "code_completion_hint": "Fovx",
          "code_insight_hint": "Fovx As Double"
        },
        {
          "name": "FovxExt",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The field of view in x of the external camera",
          "code_completion_hint": "FovxExt",
          "code_insight_hint": "FovxExt As Double [read-only]"
        },
        {
          "name": "Fovy",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The field of view in y",
          "code_completion_hint": "Fovy",
          "code_insight_hint": "Fovy As Double"
        },
        {
          "name": "FovyExt",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The field of view in y of the external camera",
          "code_completion_hint": "FovyExt",
          "code_insight_hint": "FovyExt As Double [read-only]"
        },
        {
          "name": "Matrix",
          "deprecated": "false",
          "return_value_scope": "Matrix",
          "description": "The model matrix of the camera.",
          "code_completion_hint": "Matrix",
          "code_insight_hint": "Matrix As Matrix [read-only]"
        },
        {
          "name": "Pan",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The pan",
          "code_completion_hint": "Pan",
          "code_insight_hint": "Pan As Double"
        },
        {
          "name": "PanExt",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The pan of the external camera",
          "code_completion_hint": "PanExt",
          "code_insight_hint": "PanExt As Double [read-only]"
        },
        {
          "name": "Position",
          "deprecated": "false",
          "return_value_scope": "Position",
          "description": "The camera position",
          "code_completion_hint": "Position",
          "code_insight_hint": "Position As Position"
        },
        {
          "name": "PositionExt",
          "deprecated": "false",
          "return_value_scope": "Position",
          "description": "The position of the external camera",
          "code_completion_hint": "PositionExt",
          "code_insight_hint": "PositionExt As Position [read-only]"
        },
        {
          "name": "PositionTrackingActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Is position tracking active?",
          "code_completion_hint": "PositionTrackingActive",
          "code_insight_hint": "PositionTrackingActive As Boolean"
        },
        {
          "name": "PositionTrackingContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "The tracking object for position tracking",
          "code_completion_hint": "PositionTrackingContainer",
          "code_insight_hint": "PositionTrackingContainer As Container"
        },
        {
          "name": "ProjectionMatrix",
          "deprecated": "false",
          "return_value_scope": "Matrix",
          "description": "The projection matrix of the camera.",
          "code_completion_hint": "ProjectionMatrix",
          "code_insight_hint": "ProjectionMatrix As Matrix [read-only]"
        },
        {
          "name": "RotationTrackingActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Is rotation tracking active?",
          "code_completion_hint": "RotationTrackingActive",
          "code_insight_hint": "RotationTrackingActive As Boolean"
        },
        {
          "name": "RotationTrackingContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "The tracking object for rotation tracking",
          "code_completion_hint": "RotationTrackingContainer",
          "code_insight_hint": "RotationTrackingContainer As Container"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "Tilt",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The tilt",
          "code_completion_hint": "Tilt",
          "code_insight_hint": "Tilt As Double"
        },
        {
          "name": "TiltExt",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The tilt of the external camera",
          "code_completion_hint": "TiltExt",
          "code_insight_hint": "TiltExt As Double [read-only]"
        },
        {
          "name": "Twist",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The twist",
          "code_completion_hint": "Twist",
          "code_insight_hint": "Twist As Double"
        },
        {
          "name": "TwistExt",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The twist of the external camera",
          "code_completion_hint": "TwistExt",
          "code_insight_hint": "TwistExt As Double [read-only]"
        },
        {
          "name": "View",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The view type:; CAM_VIEW_PERSPECTIVE; CAM_VIEW_ORTHOGONAL",
          "code_completion_hint": "View",
          "code_insight_hint": "View As Integer"
        },
        {
          "name": "ViewMatrix",
          "deprecated": "false",
          "return_value_scope": "Matrix",
          "description": "The view matrix of the camera.",
          "code_completion_hint": "ViewMatrix",
          "code_insight_hint": "ViewMatrix As Matrix [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "ResetPositionTracking",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "ResetPositionTracking",
          "code_insight_hint": "Sub ResetPositionTracking()"
        },
        {
          "name": "ResetRotationTracking",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "ResetRotationTracking",
          "code_insight_hint": "Sub ResetRotationTracking()"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Center",
      "description": "A center object. This is used to control the center of a container.",
      "properties": [
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "x",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the x component.",
          "code_completion_hint": "x",
          "code_insight_hint": "x As Double"
        },
        {
          "name": "xyz",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "Gets or sets the x, y, z components combined into a vertex.",
          "code_completion_hint": "xyz",
          "code_insight_hint": "xyz As Vertex"
        },
        {
          "name": "y",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the y component.",
          "code_completion_hint": "y",
          "code_insight_hint": "y As Double"
        },
        {
          "name": "z",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the z component.",
          "code_completion_hint": "z",
          "code_insight_hint": "z As Double"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Channel",
      "description": "A channel of a director.",
      "properties": [
        {
          "name": "Actor",
          "deprecated": "false",
          "return_value_scope": "Base",
          "description": "",
          "code_completion_hint": "Actor",
          "code_insight_hint": "Actor As Base [read-only]"
        },
        {
          "name": "AnimationObject",
          "deprecated": "false",
          "return_value_scope": "Base",
          "description": "",
          "code_completion_hint": "AnimationObject",
          "code_insight_hint": "AnimationObject As Base [read-only]"
        },
        {
          "name": "CommandName",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "",
          "code_completion_hint": "CommandName",
          "code_insight_hint": "CommandName As String [read-only]"
        },
        {
          "name": "Director",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "",
          "code_completion_hint": "Director",
          "code_insight_hint": "Director As Director [read-only]"
        },
        {
          "name": "FirstKeyframe",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "Gets the leftmost keyframe.",
          "code_completion_hint": "FirstKeyframe",
          "code_insight_hint": "FirstKeyframe As Keyframe [read-only]"
        },
        {
          "name": "KeyframeCount",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the number of keyframes.",
          "code_completion_hint": "KeyframeCount",
          "code_insight_hint": "KeyframeCount As Integer [read-only]"
        },
        {
          "name": "LastKeyframe",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "Gets the rightmost keyframe.",
          "code_completion_hint": "LastKeyframe",
          "code_insight_hint": "LastKeyframe As Keyframe [read-only]"
        },
        {
          "name": "Name",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "",
          "code_completion_hint": "Name",
          "code_insight_hint": "Name As String"
        },
        {
          "name": "PostLoopActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "PostLoopActive",
          "code_insight_hint": "PostLoopActive As Boolean"
        },
        {
          "name": "PostLoopCounter",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "",
          "code_completion_hint": "PostLoopCounter",
          "code_insight_hint": "PostLoopCounter As Integer"
        },
        {
          "name": "PostSwingActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "PostSwingActive",
          "code_insight_hint": "PostSwingActive As Boolean"
        },
        {
          "name": "PreLoopActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "PreLoopActive",
          "code_insight_hint": "PreLoopActive As Boolean"
        },
        {
          "name": "PreLoopCounter",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "",
          "code_completion_hint": "PreLoopCounter",
          "code_insight_hint": "PreLoopCounter As Integer"
        },
        {
          "name": "PreSwingActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "PreSwingActive",
          "code_insight_hint": "PreSwingActive As Boolean"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "NumKeyframes",
          "deprecated": "true",
          "return_value_scope": "Integer",
          "description": "Deprecated. Use KeyframeCount.",
          "code_completion_hint": "NumKeyframes",
          "code_insight_hint": "NumKeyframes As Integer [read-only]"
        }
      ],
      "member_methods": [
        {
          "name": "AddKeyframe",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){}",
          "code_completion_hint": "function(){ AddKeyframe }",
          "code_insight_hint": "function(){ Function AddKeyframe(time As Double) As Keyframe }"
        },
        {
          "name": "CopyToDirector",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){}",
          "code_completion_hint": "function(){ CopyToDirector }",
          "code_insight_hint": "function(){ Function CopyToDirector(destination As Director) As Boolean }"
        },
        {
          "name": "Delete",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "Delete",
          "code_insight_hint": "Sub Delete()"
        },
        {
          "name": "DeleteKeyframe",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){}",
          "code_completion_hint": "function(){ DeleteKeyframe }",
          "code_insight_hint": "function(){ Function DeleteKeyframe(kf As Keyframe) As Boolean }"
        },
        {
          "name": "DeleteKeyframe",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){}",
          "code_completion_hint": "function(){ DeleteKeyframe }",
          "code_insight_hint": "function(){ Function DeleteKeyframe(index As Integer) As Boolean }"
        },
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframe",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ Searches for a keyframe named keyframeName. }",
          "code_completion_hint": "function(){ FindKeyframe }",
          "code_insight_hint": "function(){ Function FindKeyframe(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "GetKeyframe",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ Returns the n'th keyframe of the channel. }",
          "code_completion_hint": "function(){ GetKeyframe }",
          "code_insight_hint": "function(){ Function GetKeyframe(n As Integer) As Keyframe }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "MoveToDirector",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){}",
          "code_completion_hint": "function(){ MoveToDirector }",
          "code_insight_hint": "function(){ Function MoveToDirector(destination As Director) As Boolean }"
        },
        {
          "name": "Rebuild",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Rebuilds the channel after it has been modified. Normally, there is no need to call this procedure.",
          "code_completion_hint": "Rebuild",
          "code_insight_hint": "Sub Rebuild()"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "ClipChannel",
      "description": "A ClipChannel object. The ClipChannel member of the Base type provides access to the clip channel. Use System.GetClipChannel(number as Integer), whereas number >= 0, to get a ClipChannel instance. See also examples section ClipChannel.",
      "properties": [
        {
          "name": "AutoRun",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set the autorun mode. If true then the clip start playing automatically upon load.",
          "code_completion_hint": "AutoRun",
          "code_insight_hint": "AutoRun As Boolean"
        },
        {
          "name": "ClipChannelID",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get the clip channel number.",
          "code_completion_hint": "ClipChannelID",
          "code_insight_hint": "ClipChannelID As Integer [read-only]"
        },
        {
          "name": "CurrentFrame",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get the current frame.",
          "code_completion_hint": "CurrentFrame",
          "code_insight_hint": "CurrentFrame As Integer [read-only]"
        },
        {
          "name": "CurrentFramePending",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get the current frame of the pending clip.",
          "code_completion_hint": "CurrentFramePending",
          "code_insight_hint": "CurrentFramePending As Integer [read-only]"
        },
        {
          "name": "Duration",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get the number of frames of the current clip.",
          "code_completion_hint": "Duration",
          "code_insight_hint": "Duration As Integer [read-only]"
        },
        {
          "name": "DurationPending",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get the number of frames of the pending clip.",
          "code_completion_hint": "DurationPending",
          "code_insight_hint": "DurationPending As Integer [read-only]"
        },
        {
          "name": "FrameIn",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set the In frame.",
          "code_completion_hint": "FrameIn",
          "code_insight_hint": "FrameIn As Integer"
        },
        {
          "name": "FrameInActive",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set the In frame on the active clip player.",
          "code_completion_hint": "FrameInActive",
          "code_insight_hint": "FrameInActive As Integer"
        },
        {
          "name": "FrameInPending",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set the In frame on the pending clip player.",
          "code_completion_hint": "FrameInPending",
          "code_insight_hint": "FrameInPending As Integer"
        },
        {
          "name": "FrameOut",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set the Out frame.",
          "code_completion_hint": "FrameOut",
          "code_insight_hint": "FrameOut As Integer"
        },
        {
          "name": "FrameOutActive",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set the Out frame on the active clip player.",
          "code_completion_hint": "FrameOutActive",
          "code_insight_hint": "FrameOutActive As Integer"
        },
        {
          "name": "FrameOutPending",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set the Out frame on the pending clip player.",
          "code_completion_hint": "FrameOutPending",
          "code_insight_hint": "FrameOutPending As Integer"
        },
        {
          "name": "LoopMode",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set the loop mode. If true (=default), then the clip will be looped.",
          "code_completion_hint": "LoopMode",
          "code_insight_hint": "LoopMode As Boolean"
        },
        {
          "name": "LoopModeActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set the loop mode on the active clip player. If true (=default), then the clip will be looped.",
          "code_completion_hint": "LoopModeActive",
          "code_insight_hint": "LoopModeActive As Boolean"
        },
        {
          "name": "LoopModePending",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set the loop mode on the pending clip player. If true (=default), then the clip will be looped.",
          "code_completion_hint": "LoopModePending",
          "code_insight_hint": "LoopModePending As Boolean"
        },
        {
          "name": "ModeOnLoadError",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Determines the mode upon an error situation when loading a clip. none|pause|stop|flush",
          "code_completion_hint": "ModeOnLoadError",
          "code_insight_hint": "ModeOnLoadError As Integer"
        },
        {
          "name": "ModeOnLoadError_FLUSH",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for mode on load error flush.",
          "code_completion_hint": "ModeOnLoadError_FLUSH",
          "code_insight_hint": "ModeOnLoadError_FLUSH As Integer [read-only]"
        },
        {
          "name": "ModeOnLoadError_NONE",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for mode on load error none.",
          "code_completion_hint": "ModeOnLoadError_NONE",
          "code_insight_hint": "ModeOnLoadError_NONE As Integer [read-only]"
        },
        {
          "name": "ModeOnLoadError_PAUSE",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for mode on load error pause.",
          "code_completion_hint": "ModeOnLoadError_PAUSE",
          "code_insight_hint": "ModeOnLoadError_PAUSE As Integer [read-only]"
        },
        {
          "name": "ModeOnLoadError_STOP",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for mode on load error stop.",
          "code_completion_hint": "ModeOnLoadError_STOP",
          "code_insight_hint": "ModeOnLoadError_STOP As Integer [read-only]"
        },
        {
          "name": "PendingClipSupported",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Determines if support for loading pending clips is available.",
          "code_completion_hint": "PendingClipSupported",
          "code_insight_hint": "PendingClipSupported As Boolean [read-only]"
        },
        {
          "name": "PlayBackSpeed",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Get/Set the playback speed.",
          "code_completion_hint": "PlayBackSpeed",
          "code_insight_hint": "PlayBackSpeed As Double"
        },
        {
          "name": "PlayBackSpeedActive",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Get/Set the playback speed on the active clip player.",
          "code_completion_hint": "PlayBackSpeedActive",
          "code_insight_hint": "PlayBackSpeedActive As Double"
        },
        {
          "name": "PlayBackSpeedPending",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Get/Set the playback speed on the pending clip palyer.",
          "code_completion_hint": "PlayBackSpeedPending",
          "code_insight_hint": "PlayBackSpeedPending As Double"
        },
        {
          "name": "PlayMode",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get the current mode of the clip channel.",
          "code_completion_hint": "PlayMode",
          "code_insight_hint": "PlayMode As Integer [read-only]"
        },
        {
          "name": "PlayMode_ERROR",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for current mode  ERROR.",
          "code_completion_hint": "PlayMode_ERROR",
          "code_insight_hint": "PlayMode_ERROR As Integer [read-only]"
        },
        {
          "name": "PlayMode_NONE",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for current mode  NONE.",
          "code_completion_hint": "PlayMode_NONE",
          "code_insight_hint": "PlayMode_NONE As Integer [read-only]"
        },
        {
          "name": "PlayMode_PLAY",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for current mode  PLAYING.",
          "code_completion_hint": "PlayMode_PLAY",
          "code_insight_hint": "PlayMode_PLAY As Integer [read-only]"
        },
        {
          "name": "PlayMode_PLAY_PENDING",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for current mode  PLAYING_PENDING.",
          "code_completion_hint": "PlayMode_PLAY_PENDING",
          "code_insight_hint": "PlayMode_PLAY_PENDING As Integer [read-only]"
        },
        {
          "name": "PlayMode_SCRUB",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for current mode  SCRUBBING.",
          "code_completion_hint": "PlayMode_SCRUB",
          "code_insight_hint": "PlayMode_SCRUB As Integer [read-only]"
        },
        {
          "name": "PlayMode_SCRUB_EOF",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for current mode  SCRUBBING_EOF.",
          "code_completion_hint": "PlayMode_SCRUB_EOF",
          "code_insight_hint": "PlayMode_SCRUB_EOF As Integer [read-only]"
        },
        {
          "name": "PlayMode_STOP",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for current mode  STOP.",
          "code_completion_hint": "PlayMode_STOP",
          "code_insight_hint": "PlayMode_STOP As Integer [read-only]"
        },
        {
          "name": "PlayModePending",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get the current mode of the pending clip player.",
          "code_completion_hint": "PlayModePending",
          "code_insight_hint": "PlayModePending As Integer [read-only]"
        },
        {
          "name": "RepeatMode",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set the repeat mode for playback and pause. none|field|frame.",
          "code_completion_hint": "RepeatMode",
          "code_insight_hint": "RepeatMode As Integer"
        },
        {
          "name": "RepeatMode_FIELD",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for repeat mode field.",
          "code_completion_hint": "RepeatMode_FIELD",
          "code_insight_hint": "RepeatMode_FIELD As Integer [read-only]"
        },
        {
          "name": "RepeatMode_FRAME",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for repeat mode frame.",
          "code_completion_hint": "RepeatMode_FRAME",
          "code_insight_hint": "RepeatMode_FRAME As Integer [read-only]"
        },
        {
          "name": "RepeatMode_NONE",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Constant for repeat mode none.",
          "code_completion_hint": "RepeatMode_NONE",
          "code_insight_hint": "RepeatMode_NONE As Integer [read-only]"
        },
        {
          "name": "RepeatModeActive",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set the repeat mode for playback and pause on the active clip player. none|field|frame.",
          "code_completion_hint": "RepeatModeActive",
          "code_insight_hint": "RepeatModeActive As Integer"
        },
        {
          "name": "RepeatModePending",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set the repeat mode for playback and pause on the pending clip player. none|field|frame.",
          "code_completion_hint": "RepeatModePending",
          "code_insight_hint": "RepeatModePending As Integer"
        },
        {
          "name": "ReverseFields",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "If true swap fields when playing interlaced material backwards.",
          "code_completion_hint": "ReverseFields",
          "code_insight_hint": "ReverseFields As Boolean"
        },
        {
          "name": "ReverseFieldsActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "If true swap fields when playing interlaced material backwards on the active clip player.",
          "code_completion_hint": "ReverseFieldsActive",
          "code_insight_hint": "ReverseFieldsActive As Boolean"
        },
        {
          "name": "ReverseFieldsPending",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "If true swap fields when playing interlaced material backwards on the pending clip player.",
          "code_completion_hint": "ReverseFieldsPending",
          "code_insight_hint": "ReverseFieldsPending As Boolean"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "UpscaleLuma",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "If true then upscale the luma value in the separate key file.",
          "code_completion_hint": "UpscaleLuma",
          "code_insight_hint": "UpscaleLuma As Boolean"
        },
        {
          "name": "UpscaleLumaActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "If true then upscale the luma value in the separate key file on the active clip player.",
          "code_completion_hint": "UpscaleLumaActive",
          "code_insight_hint": "UpscaleLumaActive As Boolean"
        },
        {
          "name": "UpscaleLumaPending",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "If true then upscale the luma value in the separate key file on the pending clip player.",
          "code_completion_hint": "UpscaleLumaPending",
          "code_insight_hint": "UpscaleLumaPending As Boolean"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "Continue",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Resume playback from Pause.",
          "code_completion_hint": "Continue",
          "code_insight_hint": "Sub Continue()"
        },
        {
          "name": "ContinueActive",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Resume playback from Pause in active clip player.",
          "code_completion_hint": "ContinueActive",
          "code_insight_hint": "Sub ContinueActive()"
        },
        {
          "name": "ContinuePending",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Resume playback from Pause in pending clip player.",
          "code_completion_hint": "ContinuePending",
          "code_insight_hint": "Sub ContinuePending()"
        },
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "Flush",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Unload active and pending clip.",
          "code_completion_hint": "Flush",
          "code_insight_hint": "Sub Flush()"
        },
        {
          "name": "FlushActive",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Unload active clip.",
          "code_completion_hint": "FlushActive",
          "code_insight_hint": "Sub FlushActive()"
        },
        {
          "name": "FlushPending",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Unload pending clip.",
          "code_completion_hint": "FlushPending",
          "code_insight_hint": "Sub FlushPending()"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "GetClipName",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Get the ClipName currently loaded. }",
          "code_completion_hint": "function(){ GetClipName }",
          "code_insight_hint": "function(){ Function GetClipName() As String }"
        },
        {
          "name": "GetClipNameActive",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Get the ClipName currently loaded in the active clip player. }",
          "code_completion_hint": "function(){ GetClipNameActive }",
          "code_insight_hint": "function(){ Function GetClipNameActive() As String }"
        },
        {
          "name": "GetClipNamePending",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Get the ClipName currently loaded in the pending clip player. }",
          "code_completion_hint": "function(){ GetClipNamePending }",
          "code_insight_hint": "function(){ Function GetClipNamePending() As String }"
        },
        {
          "name": "GetRegisterChangedClipFrame",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Returns the registered ShmKey set by SetRegisterChangedClipFrame or an empty string if not set. }",
          "code_completion_hint": "function(){ GetRegisterChangedClipFrame }",
          "code_insight_hint": "function(){ Function GetRegisterChangedClipFrame() As String }"
        },
        {
          "name": "GetRegisterChangedClipMode",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Returns the registered ShmKey set by SetRegisterChangedClipMode or an empty string if not set. }",
          "code_completion_hint": "function(){ GetRegisterChangedClipMode }",
          "code_insight_hint": "function(){ Function GetRegisterChangedClipMode() As String }"
        },
        {
          "name": "GetRegisterChangedClipModePending",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Returns the registered ShmKey set by SetRegisterChangedClipModePending or an empty string if not set. }",
          "code_completion_hint": "function(){ GetRegisterChangedClipModePending }",
          "code_insight_hint": "function(){ Function GetRegisterChangedClipModePending() As String }"
        },
        {
          "name": "GetReportValues",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Shortcut for Duration(), CurrentFrame(), PlayMode().",
          "code_completion_hint": "GetReportValues",
          "code_insight_hint": "Sub GetReportValues([out] Duration As Integer, [out] CurrentFrame As Integer, [out] PlayMode As Integer)"
        },
        {
          "name": "GetReportValuesPending",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Shortcut for Duration(), CurrentFrame(), PlayMode().",
          "code_completion_hint": "GetReportValuesPending",
          "code_insight_hint": "Sub GetReportValuesPending([out] Duration As Integer, [out] CurrentFrame As Integer, [out] PlayMode As Integer)"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "IsClipLoaded",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Determines if given clip is loaded in activeor pending clip player. }",
          "code_completion_hint": "function(){ IsClipLoaded }",
          "code_insight_hint": "function(){ Function IsClipLoaded(ClipName As String) As Boolean }"
        },
        {
          "name": "IsClipLoadedActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Determines if given clip is loaded in active clip player. }",
          "code_completion_hint": "function(){ IsClipLoadedActive }",
          "code_insight_hint": "function(){ Function IsClipLoadedActive(ClipName As String) As Boolean }"
        },
        {
          "name": "IsClipLoadedPending",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Determines if given clip is loaded in pending clip player. }",
          "code_completion_hint": "function(){ IsClipLoadedPending }",
          "code_insight_hint": "function(){ Function IsClipLoadedPending(ClipName As String) As Boolean }"
        },
        {
          "name": "Pause",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Pauses the clip on this channel.",
          "code_completion_hint": "Pause",
          "code_insight_hint": "Sub Pause()"
        },
        {
          "name": "PauseActive",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Pauses the active clip on this channel.",
          "code_completion_hint": "PauseActive",
          "code_insight_hint": "Sub PauseActive()"
        },
        {
          "name": "PausePending",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Pauses the pending clip on this channel.",
          "code_completion_hint": "PausePending",
          "code_insight_hint": "Sub PausePending()"
        },
        {
          "name": "Play",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Start Playing from StartFrame position.",
          "code_completion_hint": "Play",
          "code_insight_hint": "Sub Play(StartFrame As Integer)"
        },
        {
          "name": "PlayActive",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Start Playing the active clip player from StartFrame position.",
          "code_completion_hint": "PlayActive",
          "code_insight_hint": "Sub PlayActive(StartFrame As Integer)"
        },
        {
          "name": "PlayPending",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Start Playing the pending clip player from StartFrame position.",
          "code_completion_hint": "PlayPending",
          "code_insight_hint": "Sub PlayPending(StartFrame As Integer)"
        },
        {
          "name": "Scrub",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Scrub the clip to Frame position.",
          "code_completion_hint": "Scrub",
          "code_insight_hint": "Sub Scrub(Frame As Integer)"
        },
        {
          "name": "ScrubActive",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Scrub the active clip to Frame position.",
          "code_completion_hint": "ScrubActive",
          "code_insight_hint": "Sub ScrubActive(Frame As Integer)"
        },
        {
          "name": "ScrubPending",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Scrub the pending clip to Frame position.",
          "code_completion_hint": "ScrubPending",
          "code_insight_hint": "Sub ScrubPending(Frame As Integer)"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        },
        {
          "name": "SetClipName",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Load ClipName into clip channel with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun.",
          "code_completion_hint": "SetClipName",
          "code_insight_hint": "Sub SetClipName(ClipName As String)"
        },
        {
          "name": "SetClipNameBack2Back",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Load ClipName as Back2Back into pending clip player with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun.",
          "code_completion_hint": "SetClipNameBack2Back",
          "code_insight_hint": "Sub SetClipNameBack2Back(ClipName As String)"
        },
        {
          "name": "SetClipNameBack2BackEx",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Load ClipName as Back2Back into pending clip player with parameters in/out and AutoRun.",
          "code_completion_hint": "SetClipNameBack2BackEx",
          "code_insight_hint": "Sub SetClipNameBack2BackEx(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)"
        },
        {
          "name": "SetClipNameEx",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Load ClipName into clip channel with parameters in/out and AutoRun.",
          "code_completion_hint": "SetClipNameEx",
          "code_insight_hint": "Sub SetClipNameEx(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)"
        },
        {
          "name": "SetClipNamePending",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Load ClipName into pending clip player with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun.",
          "code_completion_hint": "SetClipNamePending",
          "code_insight_hint": "Sub SetClipNamePending(ClipName As String)"
        },
        {
          "name": "SetClipNamePendingEx",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Load ClipName into pending clip player with parameters in/out and AutoRun.",
          "code_completion_hint": "SetClipNamePendingEx",
          "code_insight_hint": "Sub SetClipNamePendingEx(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)"
        },
        {
          "name": "SetRegisterChangedClipFrame",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Causes ShmKey to be set to the current frame whenever it changes.An empty string removes the binding.",
          "code_completion_hint": "SetRegisterChangedClipFrame",
          "code_insight_hint": "Sub SetRegisterChangedClipFrame(ShmKey As String)"
        },
        {
          "name": "SetRegisterChangedClipMode",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Causes ShmKey to be set to the new mode whenever it changes.An empty string removes the binding.",
          "code_completion_hint": "SetRegisterChangedClipMode",
          "code_insight_hint": "Sub SetRegisterChangedClipMode(ShmKey As String)"
        },
        {
          "name": "SetRegisterChangedClipModePending",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Causes ShmKey to be set to the new mode whenever it changes.An empty string removes the binding.",
          "code_completion_hint": "SetRegisterChangedClipModePending",
          "code_insight_hint": "Sub SetRegisterChangedClipModePending(ShmKey As String)"
        },
        {
          "name": "Stop",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Stops the clip on this channel.",
          "code_completion_hint": "Stop",
          "code_insight_hint": "Sub Stop()"
        },
        {
          "name": "StopActive",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Stops the active clip on this channel.",
          "code_completion_hint": "StopActive",
          "code_insight_hint": "Sub StopActive()"
        },
        {
          "name": "StopPending",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Stops the pending clip on this channel.",
          "code_completion_hint": "StopPending",
          "code_insight_hint": "Sub StopPending()"
        },
        {
          "name": "SwapEofPending",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Activate pending clip at EOF of activ clip.",
          "code_completion_hint": "SwapEofPending",
          "code_insight_hint": "Sub SwapEofPending()"
        },
        {
          "name": "SwapPending",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Activate pending clip .",
          "code_completion_hint": "SwapPending",
          "code_insight_hint": "Sub SwapPending()"
        }
      ]
    },
    {
      "name": "Color",
      "description": "A color object consisting of 4 members: red, green blue, alpha.",
      "properties": [
        {
          "name": "Alpha",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The alpha component [0.0, 1.0]",
          "code_completion_hint": "Alpha",
          "code_insight_hint": "Alpha As Double"
        },
        {
          "name": "Blue",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The blue component [0.0, 1.0]",
          "code_completion_hint": "Blue",
          "code_insight_hint": "Blue As Double"
        },
        {
          "name": "Green",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The green component [0.0, 1.0]",
          "code_completion_hint": "Green",
          "code_insight_hint": "Green As Double"
        },
        {
          "name": "Red",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The red component [0.0, 1.0]",
          "code_completion_hint": "Red",
          "code_insight_hint": "Red As Double"
        },
        {
          "name": "Rgb",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "The red/green/blue components combined into a Vertex value",
          "code_completion_hint": "Rgb",
          "code_insight_hint": "Rgb As Vertex"
        }
      ],
      "member_methods": []
    },
    {
      "name": "Container",
      "description": "A container object.",
      "properties": [
        {
          "name": "Active",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "The visibility state",
          "code_completion_hint": "Active",
          "code_insight_hint": "Active As Boolean"
        },
        {
          "name": "Alpha",
          "deprecated": "false",
          "return_value_scope": "Alpha",
          "description": "The alpha object",
          "code_completion_hint": "Alpha",
          "code_insight_hint": "Alpha As Alpha"
        },
        {
          "name": "Center",
          "deprecated": "false",
          "return_value_scope": "Center",
          "description": "The center object",
          "code_completion_hint": "Center",
          "code_insight_hint": "Center As Center"
        },
        {
          "name": "ChildContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "The first child container",
          "code_completion_hint": "ChildContainer",
          "code_insight_hint": "ChildContainer As Container [read-only]"
        },
        {
          "name": "ChildContainerCount",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the number of child containers.",
          "code_completion_hint": "ChildContainerCount",
          "code_insight_hint": "ChildContainerCount As Integer [read-only]"
        },
        {
          "name": "ExactPicking",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Enables/Disables exact picking for OnEnter/OnLeave.",
          "code_completion_hint": "ExactPicking",
          "code_insight_hint": "ExactPicking As Boolean"
        },
        {
          "name": "Expert",
          "deprecated": "false",
          "return_value_scope": "Expert",
          "description": "The expert object",
          "code_completion_hint": "Expert",
          "code_insight_hint": "Expert As Expert"
        },
        {
          "name": "FirstChildContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "The first child container",
          "code_completion_hint": "FirstChildContainer",
          "code_insight_hint": "FirstChildContainer As Container [read-only]"
        },
        {
          "name": "Geometry",
          "deprecated": "false",
          "return_value_scope": "Geometry",
          "description": "The geometry object",
          "code_completion_hint": "Geometry",
          "code_insight_hint": "Geometry As Geometry"
        },
        {
          "name": "Key",
          "deprecated": "false",
          "return_value_scope": "Key",
          "description": "The key object",
          "code_completion_hint": "Key",
          "code_insight_hint": "Key As Key"
        },
        {
          "name": "LastChildContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "The last child container",
          "code_completion_hint": "LastChildContainer",
          "code_insight_hint": "LastChildContainer As Container [read-only]"
        },
        {
          "name": "Material",
          "deprecated": "false",
          "return_value_scope": "Material",
          "description": "The material object",
          "code_completion_hint": "Material",
          "code_insight_hint": "Material As Material"
        },
        {
          "name": "Matrix",
          "deprecated": "false",
          "return_value_scope": "Matrix",
          "description": "The model matrix of the cotainer.",
          "code_completion_hint": "Matrix",
          "code_insight_hint": "Matrix As Matrix [read-only]"
        },
        {
          "name": "Merged",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Indicates whether the container is merged.",
          "code_completion_hint": "Merged",
          "code_insight_hint": "Merged As Boolean [read-only]"
        },
        {
          "name": "MergedChildContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "The first child container within a merged object",
          "code_completion_hint": "MergedChildContainer",
          "code_insight_hint": "MergedChildContainer As Container [read-only]"
        },
        {
          "name": "MergedParentContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "The merged parent container",
          "code_completion_hint": "MergedParentContainer",
          "code_insight_hint": "MergedParentContainer As Container [read-only]"
        },
        {
          "name": "Name",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "The name of the container",
          "code_completion_hint": "Name",
          "code_insight_hint": "Name As String"
        },
        {
          "name": "NextContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "The next container in the tree",
          "code_completion_hint": "NextContainer",
          "code_insight_hint": "NextContainer As Container [read-only]"
        },
        {
          "name": "Open",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Indicates whether the container is open, i.e. its subcontainers are visible in the tree",
          "code_completion_hint": "Open",
          "code_insight_hint": "Open As Boolean"
        },
        {
          "name": "ParentContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "The parent container",
          "code_completion_hint": "ParentContainer",
          "code_insight_hint": "ParentContainer As Container [read-only]"
        },
        {
          "name": "Position",
          "deprecated": "false",
          "return_value_scope": "Position",
          "description": "The position object",
          "code_completion_hint": "Position",
          "code_insight_hint": "Position As Position"
        },
        {
          "name": "PreviousContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "The previous container",
          "code_completion_hint": "PreviousContainer",
          "code_insight_hint": "PreviousContainer As Container [read-only]"
        },
        {
          "name": "Rotation",
          "deprecated": "false",
          "return_value_scope": "Rotation",
          "description": "The rotation object",
          "code_completion_hint": "Rotation",
          "code_insight_hint": "Rotation As Rotation"
        },
        {
          "name": "Scaling",
          "deprecated": "false",
          "return_value_scope": "Scaling",
          "description": "The scaling object",
          "code_completion_hint": "Scaling",
          "code_insight_hint": "Scaling As Scaling"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Script",
          "deprecated": "false",
          "return_value_scope": "Script",
          "description": "The script object: it can be used to dynamically call member procedures of the container",
          "code_completion_hint": "Script",
          "code_insight_hint": "Script As Script [read-only]"
        },
        {
          "name": "ScriptPluginInstance",
          "deprecated": "false",
          "return_value_scope": "PluginInstance",
          "description": "The script's plugin instance",
          "code_completion_hint": "ScriptPluginInstance",
          "code_insight_hint": "ScriptPluginInstance As PluginInstance [read-only]"
        },
        {
          "name": "ScriptSettings",
          "deprecated": "false",
          "return_value_scope": "ScriptSettings",
          "description": "The script's local settings",
          "code_completion_hint": "ScriptSettings",
          "code_insight_hint": "ScriptSettings As ScriptSettings [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "Texture",
          "deprecated": "false",
          "return_value_scope": "Texture",
          "description": "The texture object",
          "code_completion_hint": "Texture",
          "code_insight_hint": "Texture As Texture"
        },
        {
          "name": "Uuid",
          "deprecated": "false",
          "return_value_scope": "Uuid",
          "description": "The UUID of the container",
          "code_completion_hint": "Uuid",
          "code_insight_hint": "Uuid As Uuid [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "NumChildContainers",
          "deprecated": "true",
          "return_value_scope": "Integer",
          "description": "Deprecated. Use ChildContainerCount instead.",
          "code_completion_hint": "NumChildContainers",
          "code_insight_hint": "NumChildContainers As Integer [read-only]"
        },
        {
          "name": "Transform",
          "deprecated": "true",
          "return_value_scope": "Transform",
          "description": "Deprecated.",
          "code_completion_hint": "Transform",
          "code_insight_hint": "Transform As Transform"
        }
      ],
      "member_methods": [
        {
          "name": "AddContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Inserts and returns a new container; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN. }",
          "code_completion_hint": "function(){ AddContainer }",
          "code_insight_hint": "function(){ Function AddContainer(where As Integer) As Container }"
        },
        {
          "name": "AddScreenOffset",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ This procedure is identical to ScreenOffsetToContainerOffset except that it automatically adds the resulting container offset to the local container position. This procedure is typically called in OnMouseMove to implement dragging of containers. }",
          "code_completion_hint": "function(){ AddScreenOffset }",
          "code_insight_hint": "function(){ Function AddScreenOffset(dx As Integer, dy As Integer) As Vertex }"
        },
        {
          "name": "ContainsMouseCursor",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if and only if the mouse curser is inside the container. For this method to work correctly, it is required that at least one enter or leave callback be defined on the container or on a super-container. }",
          "code_completion_hint": "function(){ ContainsMouseCursor }",
          "code_insight_hint": "function(){ Function ContainsMouseCursor() As Boolean }"
        },
        {
          "name": "CopyTo",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Copies the container; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN. }",
          "code_completion_hint": "function(){ CopyTo }",
          "code_insight_hint": "function(){ Function CopyTo(destination As Container, where As Integer) As Container }"
        },
        {
          "name": "CreateAlpha",
          "deprecated": "false",
          "return_value_scope": "Alpha",
          "description": "function(){ Creates and returns an alpha object. }",
          "code_completion_hint": "function(){ CreateAlpha }",
          "code_insight_hint": "function(){ Function CreateAlpha() As Alpha }"
        },
        {
          "name": "CreateExpert",
          "deprecated": "false",
          "return_value_scope": "Expert",
          "description": "function(){}",
          "code_completion_hint": "function(){ CreateExpert }",
          "code_insight_hint": "function(){ Function CreateExpert() As Expert }"
        },
        {
          "name": "CreateFunction",
          "deprecated": "false",
          "return_value_scope": "PluginInstance",
          "description": "function(){ Creates a plugin instance by name, e.g. \"BUILT_IN*FUNCTION*Autofollow\" }",
          "code_completion_hint": "function(){ CreateFunction }",
          "code_insight_hint": "function(){ Function CreateFunction(location As String) As PluginInstance }"
        },
        {
          "name": "CreateGeometry",
          "deprecated": "false",
          "return_value_scope": "Geometry",
          "description": "function(){ Creates a geometry by name, e.g. \"BUILT_IN*GEOM*Circle\" (for built-ins) or \"GEOM*ObjectName\" (for pool objects) }",
          "code_completion_hint": "function(){ CreateGeometry }",
          "code_insight_hint": "function(){ Function CreateGeometry(location As String) As Geometry }"
        },
        {
          "name": "CreateKey",
          "deprecated": "false",
          "return_value_scope": "Key",
          "description": "function(){}",
          "code_completion_hint": "function(){ CreateKey }",
          "code_insight_hint": "function(){ Function CreateKey() As Key }"
        },
        {
          "name": "CreateMaterial",
          "deprecated": "false",
          "return_value_scope": "Material",
          "description": "function(){}",
          "code_completion_hint": "function(){ CreateMaterial }",
          "code_insight_hint": "function(){ Function CreateMaterial() As Material }"
        },
        {
          "name": "CreateMaterial",
          "deprecated": "false",
          "return_value_scope": "Material",
          "description": "function(){}",
          "code_completion_hint": "function(){ CreateMaterial }",
          "code_insight_hint": "function(){ Function CreateMaterial(location As String) As Material }"
        },
        {
          "name": "CreateTexture",
          "deprecated": "false",
          "return_value_scope": "Texture",
          "description": "function(){ Creates a texture object by name, e.g. \"IMAGE*ImageName\" }",
          "code_completion_hint": "function(){ CreateTexture }",
          "code_insight_hint": "function(){ Function CreateTexture(name As String) As Texture }"
        },
        {
          "name": "CreateTexture",
          "deprecated": "false",
          "return_value_scope": "Texture",
          "description": "function(){}",
          "code_completion_hint": "function(){ CreateTexture }",
          "code_insight_hint": "function(){ Function CreateTexture(image As Image) As Texture }"
        },
        {
          "name": "Delete",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Deletes the container.",
          "code_completion_hint": "Delete",
          "code_insight_hint": "Sub Delete()"
        },
        {
          "name": "DeleteAlpha",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Deletes the alpha object.",
          "code_completion_hint": "DeleteAlpha",
          "code_insight_hint": "Sub DeleteAlpha()"
        },
        {
          "name": "DeleteChildren",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Deletes the container's child containers.",
          "code_completion_hint": "DeleteChildren",
          "code_insight_hint": "Sub DeleteChildren()"
        },
        {
          "name": "DeleteExpert",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "DeleteExpert",
          "code_insight_hint": "Sub DeleteExpert()"
        },
        {
          "name": "DeleteFunction",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Deletes a plugin instance by name, e.g. \"Autofollow\"",
          "code_completion_hint": "DeleteFunction",
          "code_insight_hint": "Sub DeleteFunction(location As String)"
        },
        {
          "name": "DeleteGeometry",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "DeleteGeometry",
          "code_insight_hint": "Sub DeleteGeometry()"
        },
        {
          "name": "DeleteKey",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "DeleteKey",
          "code_insight_hint": "Sub DeleteKey()"
        },
        {
          "name": "DeleteMaterial",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "DeleteMaterial",
          "code_insight_hint": "Sub DeleteMaterial()"
        },
        {
          "name": "DeleteTexture",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "DeleteTexture",
          "code_insight_hint": "Sub DeleteTexture()"
        },
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindSiblingSubContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Searches among the container's siblings (as well as the container itself) and their sub-containers for a container with the specified name. Otherwise identical to FindSubContainer. }",
          "code_completion_hint": "function(){ FindSiblingSubContainer }",
          "code_insight_hint": "function(){ Function FindSiblingSubContainer(name As String) As Container }"
        },
        {
          "name": "FindSubContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Searches for a sub-container with the specified name. The search mode is breadth-first. It's possible to combine multiple calls to this function into one call by concatenating the individual container names using $ as a separator. For example, FindSubContainer(\"name1$name2\") has the same effect as FindSubContainer(\"name1\").FindSubContainer(\"name2\"). }",
          "code_completion_hint": "function(){ FindSubContainer }",
          "code_insight_hint": "function(){ Function FindSubContainer(name As String) As Container }"
        },
        {
          "name": "FindSuperContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Searches for a super-container with the specified name. }",
          "code_completion_hint": "function(){ FindSuperContainer }",
          "code_insight_hint": "function(){ Function FindSuperContainer(name As String) As Container }"
        },
        {
          "name": "GetBoundingBox",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Returns in v1_out and v2_out the left-bottom-back and right-top-front vertices of the container's bounding box.",
          "code_completion_hint": "GetBoundingBox",
          "code_insight_hint": "Sub GetBoundingBox(v1_out As Vertex, v2_out As Vertex)"
        },
        {
          "name": "GetBoundingBoxDimensions",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Returns the dimensions (width, height, depth) of the container's bounding box. (The used bounding box was calculated in the last frame.) }",
          "code_completion_hint": "function(){ GetBoundingBoxDimensions }",
          "code_insight_hint": "function(){ Function GetBoundingBoxDimensions() As Vertex }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "GetChildContainerByIndex",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Returns the child container specified by index. }",
          "code_completion_hint": "function(){ GetChildContainerByIndex }",
          "code_insight_hint": "function(){ Function GetChildContainerByIndex(index As Integer) As Container }"
        },
        {
          "name": "GetChildContainerContainingMouseCursor",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Returns the first child container containing the mouse cursor. }",
          "code_completion_hint": "function(){ GetChildContainerContainingMouseCursor }",
          "code_insight_hint": "function(){ Function GetChildContainerContainingMouseCursor() As Container }"
        },
        {
          "name": "GetContainerAndSubContainers",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "GetContainerAndSubContainers",
          "code_insight_hint": "Sub GetContainerAndSubContainers([out] v As Array[Container], traverseMergedGeometries As Boolean)"
        },
        {
          "name": "GetDirector",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "function(){ Finds the first director containing an animation of this container. }",
          "code_completion_hint": "function(){ GetDirector }",
          "code_insight_hint": "function(){ Function GetDirector() As Director }"
        },
        {
          "name": "GetDirectorOfMergedGeometry",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "function(){ If this container holds a merged geometry with an embedded animation, this function returns the corresponding director. }",
          "code_completion_hint": "function(){ GetDirectorOfMergedGeometry }",
          "code_insight_hint": "function(){ Function GetDirectorOfMergedGeometry() As Director }"
        },
        {
          "name": "GetFirstActiveChildContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Returns the first (=topmost) active child container. }",
          "code_completion_hint": "function(){ GetFirstActiveChildContainer }",
          "code_insight_hint": "function(){ Function GetFirstActiveChildContainer() As Container }"
        },
        {
          "name": "GetFunctionPluginInstance",
          "deprecated": "false",
          "return_value_scope": "PluginInstance",
          "description": "function(){ Provides access to the parameters of a function plugin residing on the container. }",
          "code_completion_hint": "function(){ GetFunctionPluginInstance }",
          "code_insight_hint": "function(){ Function GetFunctionPluginInstance(pluginName As String) As PluginInstance }"
        },
        {
          "name": "GetGeometryPluginInstance",
          "deprecated": "false",
          "return_value_scope": "PluginInstance",
          "description": "function(){ Provides access to the parameters of a geometry plugin residing on the container. }",
          "code_completion_hint": "function(){ GetGeometryPluginInstance }",
          "code_insight_hint": "function(){ Function GetGeometryPluginInstance() As PluginInstance }"
        },
        {
          "name": "GetIndexOfFirstActiveChildContainer",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Returns the 0-based index of the first active child container within the container (or -1 if there is no active child). }",
          "code_completion_hint": "function(){ GetIndexOfFirstActiveChildContainer }",
          "code_insight_hint": "function(){ Function GetIndexOfFirstActiveChildContainer() As Integer }"
        },
        {
          "name": "GetLocalIndex",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Returns the 0-based index of the container within its parent. }",
          "code_completion_hint": "function(){ GetLocalIndex }",
          "code_insight_hint": "function(){ Function GetLocalIndex() As Integer }"
        },
        {
          "name": "GetScreenBounds",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Returns in v1_out and v2_out the left-bottom and right-top screen coordinates defining the rectangle occupied by the container. (The used bounding box was calculated in the last frame.)",
          "code_completion_hint": "GetScreenBounds",
          "code_insight_hint": "Sub GetScreenBounds(v1_out As Vertex, v2_out As Vertex)"
        },
        {
          "name": "GetScreenPointToGeomSurface",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ This procedure calculates the geometry intersection with the projected ray from the specified screen position and returns true on success. The intersection point is returned in world coordinates. }",
          "code_completion_hint": "function(){ GetScreenPointToGeomSurface }",
          "code_insight_hint": "function(){ Function GetScreenPointToGeomSurface(x As Integer, y As Integer, pos As Vertex) As Boolean }"
        },
        {
          "name": "GetScreenPositionOrtho",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ This procedure gets the container's screen position in the same way as you can do it via GUI in the Transformation Editor. There can't be any rotation on the object. }",
          "code_completion_hint": "function(){ GetScreenPositionOrtho }",
          "code_insight_hint": "function(){ Function GetScreenPositionOrtho(x As Integer, y As Integer) As Boolean }"
        },
        {
          "name": "GetTransformedBoundingBox",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Returns in v1_out and v2_out the left-bottom-back and right-top-front vertices of the container's bounding box with applied transformation matrix.",
          "code_completion_hint": "GetTransformedBoundingBox",
          "code_insight_hint": "Sub GetTransformedBoundingBox(v1_out As Vertex, v2_out As Vertex)"
        },
        {
          "name": "GetTransformedBoundingBoxDimensions",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Returns the dimensions (width, height, depth) of the container's bounding box with applied transformation matrix. (The used bounding box was calculated in the last frame.) }",
          "code_completion_hint": "function(){ GetTransformedBoundingBoxDimensions }",
          "code_insight_hint": "function(){ Function GetTransformedBoundingBoxDimensions() As Vertex }"
        },
        {
          "name": "GetUVCoordinatesOfScreenPoint",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Transforms (x, y) into (u, v) coordinates that are relative to the x/y cross section of the container's bounding box. The (u, v) coordinates are returned in the x and y components of the returned vertex (the z coordinate is always 0.0). If (x, y) are within the bounding-box area, u and v will be within the range [0.0, 1.0]. }",
          "code_completion_hint": "function(){ GetUVCoordinatesOfScreenPoint }",
          "code_insight_hint": "function(){ Function GetUVCoordinatesOfScreenPoint(x As Integer, y As Integer) As Vertex }"
        },
        {
          "name": "HideAllChildContainers",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Makes all child containers invisible.",
          "code_completion_hint": "HideAllChildContainers",
          "code_insight_hint": "Sub HideAllChildContainers()"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "IsOnTop",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if and only if the container is on top at the mouse cursor position. For this procedure to work correctly, it is required that at least one enter or leave callback be defined on the container or on a super-container. }",
          "code_completion_hint": "function(){ IsOnTop }",
          "code_insight_hint": "function(){ Function IsOnTop() As Boolean }"
        },
        {
          "name": "IsScreenPointInBoundingBox",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if the screen point (x, y) is inside the area covered by the container's bounding box. (The used bounding box was calculated in the last frame.) }",
          "code_completion_hint": "function(){ IsScreenPointInBoundingBox }",
          "code_insight_hint": "function(){ Function IsScreenPointInBoundingBox(x As Integer, y As Integer) As Boolean }"
        },
        {
          "name": "IsVertexInBoundingBox",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if v (which must be specified in world coordinates) is inside the container's bounding box. (The used bounding box was calculated in the last frame.) }",
          "code_completion_hint": "function(){ IsVertexInBoundingBox }",
          "code_insight_hint": "function(){ Function IsVertexInBoundingBox(v As Vertex) As Boolean }"
        },
        {
          "name": "LocalPosToScreenPos",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Converts local position to the position on the screen.",
          "code_completion_hint": "LocalPosToScreenPos",
          "code_insight_hint": "Sub LocalPosToScreenPos(pos As Vertex, [out] dX As Double, [out] dY As Double)"
        },
        {
          "name": "LocalPosToWorldPos",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Converts the local position to a world coordinate space position. }",
          "code_completion_hint": "function(){ LocalPosToWorldPos }",
          "code_insight_hint": "function(){ Function LocalPosToWorldPos(pos As Vertex) As Vertex }"
        },
        {
          "name": "MoveAllChannelsToDirector",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Moves the animation channels to the specified director.",
          "code_completion_hint": "MoveAllChannelsToDirector",
          "code_insight_hint": "Sub MoveAllChannelsToDirector(director As Director)"
        },
        {
          "name": "MoveTo",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Moves the container; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN. }",
          "code_completion_hint": "function(){ MoveTo }",
          "code_insight_hint": "function(){ Function MoveTo(destination As Container, where As Integer) As Container }"
        },
        {
          "name": "MoveToKeepTransformation",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Moves the container preserving the containers transformation; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN. }",
          "code_completion_hint": "function(){ MoveToKeepTransformation }",
          "code_insight_hint": "function(){ Function MoveToKeepTransformation(destination As Container, where As Integer) As Container }"
        },
        {
          "name": "RecomputeMatrix",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Recalculate transformation matrix of the container. This function is useful if you can't wait one field for the updated matrix. Use it carefully and only where it is really needed (current transformation matrix, transformed bounding box, screen-position or screen-size)",
          "code_completion_hint": "RecomputeMatrix",
          "code_insight_hint": "Sub RecomputeMatrix()"
        },
        {
          "name": "ScreenOffsetToContainerOffset",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Transforms a pixel offset into the corresponding offset in local container coordinates. In other words, the vector returned by this procedure is the vector you need to add to the container's local position (i.e. Position.Xyz) in order to make the container move (dx, dy) pixels on the screen. }",
          "code_completion_hint": "function(){ ScreenOffsetToContainerOffset }",
          "code_insight_hint": "function(){ Function ScreenOffsetToContainerOffset(dx As Integer, dy As Integer) As Vertex }"
        },
        {
          "name": "ScreenPosToLocalGrid",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Converts the screen position to current grid intersection point. The returned coordinates are in local container coordinate space. }",
          "code_completion_hint": "function(){ ScreenPosToLocalGrid }",
          "code_insight_hint": "function(){ Function ScreenPosToLocalGrid(dX As Double, dY As Double) As Vertex }"
        },
        {
          "name": "ScreenPosToLocalPos",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Converts the screen position to the local container position. This would mean that if you assign the returned vertex to the local container's position then it moves exactly to the passed screen position (orthogonal to camera). }",
          "code_completion_hint": "function(){ ScreenPosToLocalPos }",
          "code_insight_hint": "function(){ Function ScreenPosToLocalPos(dX As Double, dY As Double) As Vertex }"
        },
        {
          "name": "SetCenterPositionLocked",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "This procedure sets the container's center point without affecting its position.",
          "code_completion_hint": "SetCenterPositionLocked",
          "code_insight_hint": "Sub SetCenterPositionLocked(center As Vertex)"
        },
        {
          "name": "SetCenterScreenGridPositionLocked",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "This procedure sets the container's center point to the passed screen position, using the current grid, without affecting the container position.",
          "code_completion_hint": "SetCenterScreenGridPositionLocked",
          "code_insight_hint": "Sub SetCenterScreenGridPositionLocked(dX As Double, dY As Double)"
        },
        {
          "name": "SetCenterScreenPositionLocked",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "This procedure sets the container's center point to the passed screen position without affecting the container position.",
          "code_completion_hint": "SetCenterScreenPositionLocked",
          "code_insight_hint": "Sub SetCenterScreenPositionLocked(dX As Double, dY As Double)"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        },
        {
          "name": "SetScreenPositionOrtho",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ This procedure sets the container's screen position in the same way as you can do it via GUI in the Transformation Editor. There can't be any rotation on the object. }",
          "code_completion_hint": "function(){ SetScreenPositionOrtho }",
          "code_insight_hint": "function(){ Function SetScreenPositionOrtho(x As Integer, y As Integer) As Boolean }"
        },
        {
          "name": "ShowAllChildContainers",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Makes all child containers visible.",
          "code_completion_hint": "ShowAllChildContainers",
          "code_insight_hint": "Sub ShowAllChildContainers()"
        },
        {
          "name": "ShowOneChildContainer",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Makes the child container specified by index visible and all other child containers invisible.",
          "code_completion_hint": "ShowOneChildContainer",
          "code_insight_hint": "Sub ShowOneChildContainer(index As Integer)"
        },
        {
          "name": "Update",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Redraws the container's entry in the scene tree GUI. Ignored in on-air mode.",
          "code_completion_hint": "Update",
          "code_insight_hint": "Sub Update()"
        },
        {
          "name": "WorldPosToLocalPos",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Converts the world position to a local coordinate space position. }",
          "code_completion_hint": "function(){ WorldPosToLocalPos }",
          "code_insight_hint": "function(){ Function WorldPosToLocalPos(pos As Vertex) As Vertex }"
        },
        {
          "name": "ScreenOffsetToWorldOffset",
          "deprecated": "true",
          "return_value_scope": "Vertex",
          "description": "function(){ Deprecated. }",
          "code_completion_hint": "function(){ ScreenOffsetToWorldOffset }",
          "code_insight_hint": "function(){ Function ScreenOffsetToWorldOffset(dx As Integer, dy As Integer) As Vertex }"
        }
      ]
    },
    {
      "name": "DateTime",
      "description": "A type storing date/time information.",
      "properties": [
        {
          "name": "DayOfMonth",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Day of month (1-31)",
          "code_completion_hint": "DayOfMonth",
          "code_insight_hint": "DayOfMonth As Integer"
        },
        {
          "name": "DayOfWeek",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Day of week (0-6; Sunday = 0)",
          "code_completion_hint": "DayOfWeek",
          "code_insight_hint": "DayOfWeek As Integer"
        },
        {
          "name": "DayOfYear",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Day of year (0-365)",
          "code_completion_hint": "DayOfYear",
          "code_insight_hint": "DayOfYear As Integer"
        },
        {
          "name": "Hour",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Hours after midnight (0-23)",
          "code_completion_hint": "Hour",
          "code_insight_hint": "Hour As Integer"
        },
        {
          "name": "Minute",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Minutes after hour (0-59)",
          "code_completion_hint": "Minute",
          "code_insight_hint": "Minute As Integer"
        },
        {
          "name": "Month",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Month (1-12)",
          "code_completion_hint": "Month",
          "code_insight_hint": "Month As Integer"
        },
        {
          "name": "Second",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Seconds after minute (0-59)",
          "code_completion_hint": "Second",
          "code_insight_hint": "Second As Integer"
        },
        {
          "name": "TotalSeconds",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "",
          "code_completion_hint": "TotalSeconds",
          "code_insight_hint": "TotalSeconds As Integer"
        },
        {
          "name": "Year",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Year",
          "code_completion_hint": "Year",
          "code_insight_hint": "Year As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "Normalize",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Computes DayOfWeek and DayOfYear members and forces the other members to standard ranges.",
          "code_completion_hint": "Normalize",
          "code_insight_hint": "Sub Normalize()"
        },
        {
          "name": "ToString",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Returns a date+time string of the form Wed Jan 02 02:03:55 1980. }",
          "code_completion_hint": "function(){ ToString }",
          "code_insight_hint": "function(){ Function ToString() As String }"
        }
      ]
    },
    {
      "name": "Director",
      "description": "A director in the stage.",
      "properties": [
        {
          "name": "ActionChannelCount",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the number of action channels.",
          "code_completion_hint": "ActionChannelCount",
          "code_insight_hint": "ActionChannelCount As Integer [read-only]"
        },
        {
          "name": "ChildDirector",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "The topmost child director",
          "code_completion_hint": "ChildDirector",
          "code_insight_hint": "ChildDirector As Director [read-only]"
        },
        {
          "name": "EventChannel",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "Gets the event channel.",
          "code_completion_hint": "EventChannel",
          "code_insight_hint": "EventChannel As Channel [read-only]"
        },
        {
          "name": "Field",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The director field",
          "code_completion_hint": "Field",
          "code_insight_hint": "Field As Integer [read-only]"
        },
        {
          "name": "Name",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "The name of the director",
          "code_completion_hint": "Name",
          "code_insight_hint": "Name As String"
        },
        {
          "name": "NextDirector",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "The next director in the stage tree",
          "code_completion_hint": "NextDirector",
          "code_insight_hint": "NextDirector As Director [read-only]"
        },
        {
          "name": "Offset",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The offset of the director (wrt to the parent director)",
          "code_completion_hint": "Offset",
          "code_insight_hint": "Offset As Double"
        },
        {
          "name": "ParentDirector",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "The parent director",
          "code_completion_hint": "ParentDirector",
          "code_insight_hint": "ParentDirector As Director [read-only]"
        },
        {
          "name": "PreviousDirector",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "The previous director in the stage tree",
          "code_completion_hint": "PreviousDirector",
          "code_insight_hint": "PreviousDirector As Director [read-only]"
        },
        {
          "name": "Reverse",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Enables/Disables reverse playing.",
          "code_completion_hint": "Reverse",
          "code_insight_hint": "Reverse As Boolean"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "Time",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The director time",
          "code_completion_hint": "Time",
          "code_insight_hint": "Time As Double"
        },
        {
          "name": "TotalOffset",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The sum of all offsets (of this director and its parents)",
          "code_completion_hint": "TotalOffset",
          "code_insight_hint": "TotalOffset As Double [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "NumActionChannels",
          "deprecated": "true",
          "return_value_scope": "Integer",
          "description": "Deprecated. Use ActionChannelCount.",
          "code_completion_hint": "NumActionChannels",
          "code_insight_hint": "NumActionChannels As Integer [read-only]"
        },
        {
          "name": "NumAnimationChannels",
          "deprecated": "true",
          "return_value_scope": "Integer",
          "description": "Deprecated. Call GetAnimationChannels to get a list of animation channels.",
          "code_completion_hint": "NumAnimationChannels",
          "code_insight_hint": "NumAnimationChannels As Integer [read-only]"
        }
      ],
      "member_methods": [
        {
          "name": "AddDirector",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "function(){ Inserts a new director; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN }",
          "code_completion_hint": "function(){ AddDirector }",
          "code_insight_hint": "function(){ Function AddDirector(where As Integer) As Director }"
        },
        {
          "name": "ContinueAnimation",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Continues the animation.",
          "code_completion_hint": "ContinueAnimation",
          "code_insight_hint": "Sub ContinueAnimation()"
        },
        {
          "name": "CopyTo",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "function(){ Copies a director; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN }",
          "code_completion_hint": "function(){ CopyTo }",
          "code_insight_hint": "function(){ Function CopyTo(destination As Director, where As Integer) As Director }"
        },
        {
          "name": "Delete",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Removes this director from the stage.",
          "code_completion_hint": "Delete",
          "code_insight_hint": "Sub Delete()"
        },
        {
          "name": "FindActionChannel",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ Searches for an action channel named channelName. }",
          "code_completion_hint": "function(){ FindActionChannel }",
          "code_insight_hint": "function(){ Function FindActionChannel(channelName As String) As Channel }"
        },
        {
          "name": "FindChannel",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ Searches for an animation channel named channelName. }",
          "code_completion_hint": "function(){ FindChannel }",
          "code_insight_hint": "function(){ Function FindChannel(channelName As String) As Channel }"
        },
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframe",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ Searches for a keyframe named keyframeName. }",
          "code_completion_hint": "function(){ FindKeyframe }",
          "code_insight_hint": "function(){ Function FindKeyframe(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindSubDirector",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "function(){ Searches for a sub-director named name. }",
          "code_completion_hint": "function(){ FindSubDirector }",
          "code_insight_hint": "function(){ Function FindSubDirector(name As String) As Director }"
        },
        {
          "name": "GetActionChannel",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ Returns the action channel at index. }",
          "code_completion_hint": "function(){ GetActionChannel }",
          "code_insight_hint": "function(){ Function GetActionChannel(index As Integer) As Channel }"
        },
        {
          "name": "GetAnimationChannels",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Fills the specified array with the director's animation channels.",
          "code_completion_hint": "GetAnimationChannels",
          "code_insight_hint": "Sub GetAnimationChannels([out] v As Array[Channel])"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "GetKeyframes",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Fills the specified array with the director's keyframes.",
          "code_completion_hint": "GetKeyframes",
          "code_insight_hint": "Sub GetKeyframes([out] v As Array[Keyframe])"
        },
        {
          "name": "HasAnimationChannels",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Determines whether this director contains any animation channels (not counting channels in sub-directors). }",
          "code_completion_hint": "function(){ HasAnimationChannels }",
          "code_insight_hint": "function(){ Function HasAnimationChannels() As Boolean }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "IsAnimationRunning",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if the animation of this director is active. }",
          "code_completion_hint": "function(){ IsAnimationRunning }",
          "code_insight_hint": "function(){ Function IsAnimationRunning() As Boolean }"
        },
        {
          "name": "MoveTo",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Moves a director; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN",
          "code_completion_hint": "MoveTo",
          "code_insight_hint": "Sub MoveTo(destination As Director, where As Integer)"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        },
        {
          "name": "Show",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets director time.",
          "code_completion_hint": "Show",
          "code_insight_hint": "Sub Show(time As Double)"
        },
        {
          "name": "StartAnimation",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Starts the animation in this director and its sub-directors.",
          "code_completion_hint": "StartAnimation",
          "code_insight_hint": "Sub StartAnimation()"
        },
        {
          "name": "StopAnimation",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Stops the animation of this director and its sub-directors.",
          "code_completion_hint": "StopAnimation",
          "code_insight_hint": "Sub StopAnimation()"
        },
        {
          "name": "StopAnimation",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Stops the animation of this director and, optionally, its sub-directors.",
          "code_completion_hint": "StopAnimation",
          "code_insight_hint": "Sub StopAnimation(recursive As Boolean)"
        },
        {
          "name": "GetAnimationChannel",
          "deprecated": "true",
          "return_value_scope": "Channel",
          "description": "function(){ Deprecated. Use GetAnimationChannels instead. }",
          "code_completion_hint": "function(){ GetAnimationChannel }",
          "code_insight_hint": "function(){ Function GetAnimationChannel(index As Integer) As Channel }"
        }
      ]
    },
    {
      "name": "Double",
      "description": "A double precision floating-point number (64 bits).",
      "properties": [],
      "member_methods": []
    },
    {
      "name": "Expert",
      "description": "A container's Expert property. This type provides access to the parameters of the Expert plugin.",
      "properties": [
        {
          "name": "BackFace",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set back face rendering.",
          "code_completion_hint": "BackFace",
          "code_insight_hint": "BackFace As Boolean"
        },
        {
          "name": "ExactPicking",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set exact picking mode.",
          "code_completion_hint": "ExactPicking",
          "code_insight_hint": "ExactPicking As Boolean"
        },
        {
          "name": "LineAntialiasing",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set line antialiasing.",
          "code_completion_hint": "LineAntialiasing",
          "code_insight_hint": "LineAntialiasing As Boolean"
        },
        {
          "name": "Mirror",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set mirror mode. Possible settings are: ; EXPERT_MIRROR_NONE; EXPERT_MIRROR_X; EXPERT_MIRROR_Y; EXPERT_MIRROR_Z",
          "code_completion_hint": "Mirror",
          "code_insight_hint": "Mirror As Integer"
        },
        {
          "name": "Outline",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set outline rendering.",
          "code_completion_hint": "Outline",
          "code_insight_hint": "Outline As Boolean"
        },
        {
          "name": "RenderMode",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set render mode. Possible settings are: ; EXPERT_RENDER_ADD; EXPERT_RENDER_BLEND; EXPERT_RENDER_REV_SUBTRACT; EXPERT_RENDER_SUBTRACT; EXPERT_RENDER_MULTIPLY; EXPERT_RENDER_REV_MULTIPLY",
          "code_completion_hint": "RenderMode",
          "code_insight_hint": "RenderMode As Integer"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "SeparateSpecular",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set separate specular rendering.",
          "code_completion_hint": "SeparateSpecular",
          "code_insight_hint": "SeparateSpecular As Boolean"
        },
        {
          "name": "ShadeModel",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set shading model. Possible modes are: ; EXPERT_SHADE_FLAT; EXPERT_SHADE_SMOOTH",
          "code_completion_hint": "ShadeModel",
          "code_insight_hint": "ShadeModel As Integer"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "TransparancyMode",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get/Set transparancy mode. Possible settings are: ; EXPERT_TRANSP_BLEND; EXPERT_TRANSP_MASK; EXPERT_TRANSP_FASTEST; EXPERT_TRANSP_HIGH_QUALITY",
          "code_completion_hint": "TransparancyMode",
          "code_insight_hint": "TransparancyMode As Integer"
        },
        {
          "name": "TwoSidedLighting",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set two-sided lighting.",
          "code_completion_hint": "TwoSidedLighting",
          "code_insight_hint": "TwoSidedLighting As Boolean"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "Wireframe",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set drawing in wireframe mode.",
          "code_completion_hint": "Wireframe",
          "code_insight_hint": "Wireframe As Boolean"
        },
        {
          "name": "WireframeWidth",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Get/Set line width in wireframe mode (typically ranges from 0.0 to 10.0).",
          "code_completion_hint": "WireframeWidth",
          "code_insight_hint": "WireframeWidth As Double"
        },
        {
          "name": "ZBuffer",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Get/Set drawing of Z-Buffer.",
          "code_completion_hint": "ZBuffer",
          "code_insight_hint": "ZBuffer As Boolean"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Geometry",
      "description": "A container's geometry. Depending on whether the geometry is a plugin or a text, this type provides access to the parameters of the plugin or the text.",
      "properties": [
        {
          "name": "Active",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "Active",
          "code_insight_hint": "Active As Boolean"
        },
        {
          "name": "Direction",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The text direction:; TEXT_DIRECTION_LEFT_TO_RIGHT; TEXT_DIRECTION_RIGHT_TO_LEFT; TEXT_DIRECTION_TOP_TO_BOTTOM; TEXT_DIRECTION_BOTTOM_TO_TOP",
          "code_completion_hint": "Direction",
          "code_insight_hint": "Direction As Integer"
        },
        {
          "name": "Kerning",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The kerning value",
          "code_completion_hint": "Kerning",
          "code_insight_hint": "Kerning As Double"
        },
        {
          "name": "LineSpacing",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The line spacing",
          "code_completion_hint": "LineSpacing",
          "code_insight_hint": "LineSpacing As Double"
        },
        {
          "name": "Name",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "The name of the geometry",
          "code_completion_hint": "Name",
          "code_insight_hint": "Name As String [read-only]"
        },
        {
          "name": "Orientation",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The text orientation:; TEXT_ORIENTATION_LEFT; TEXT_ORIENTATION_RIGHT; TEXT_ORIENTATION_CENTER; TEXT_ORIENTATION_CHAR",
          "code_completion_hint": "Orientation",
          "code_insight_hint": "Orientation As Integer"
        },
        {
          "name": "PluginInstance",
          "deprecated": "false",
          "return_value_scope": "PluginInstance",
          "description": "Gets the geometry's plugin data (if this is a geometry plugin).",
          "code_completion_hint": "PluginInstance",
          "code_insight_hint": "PluginInstance As PluginInstance [read-only]"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "Text",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "The text string (if this is a text geometry)",
          "code_completion_hint": "Text",
          "code_insight_hint": "Text As String"
        },
        {
          "name": "Uuid",
          "deprecated": "false",
          "return_value_scope": "Uuid",
          "description": "The UUID of the geometry",
          "code_completion_hint": "Uuid",
          "code_insight_hint": "Uuid As Uuid [read-only]"
        },
        {
          "name": "VerticalOrientation",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The vertical text orientation:; TEXT_ORIENTATION_VERTICAL_TOP; TEXT_ORIENTATION_VERTICAL_BOTTOM; TEXT_ORIENTATION_VERTICAL_CENTER; TEXT_ORIENTATION_VERTICAL_FIRST_LINE",
          "code_completion_hint": "VerticalOrientation",
          "code_insight_hint": "VerticalOrientation As Integer"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "WordSpacing",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The word spacing",
          "code_completion_hint": "WordSpacing",
          "code_insight_hint": "WordSpacing As Double"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "GetParameterBool",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Gets a geometry parameter of type Boolean. }",
          "code_completion_hint": "function(){ GetParameterBool }",
          "code_insight_hint": "function(){ Function GetParameterBool(parName As String) As Boolean }"
        },
        {
          "name": "GetParameterColor",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "function(){ Gets a geometry parameter of type Color. }",
          "code_completion_hint": "function(){ GetParameterColor }",
          "code_insight_hint": "function(){ Function GetParameterColor(parName As String) As Color }"
        },
        {
          "name": "GetParameterContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Gets a geometry parameter of type Container. }",
          "code_completion_hint": "function(){ GetParameterContainer }",
          "code_insight_hint": "function(){ Function GetParameterContainer(parName As String) As Container }"
        },
        {
          "name": "GetParameterDouble",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Gets a geometry parameter of type Double. }",
          "code_completion_hint": "function(){ GetParameterDouble }",
          "code_insight_hint": "function(){ Function GetParameterDouble(parName As String) As Double }"
        },
        {
          "name": "GetParameterInt",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Gets a geometry parameter of type Integer. }",
          "code_completion_hint": "function(){ GetParameterInt }",
          "code_insight_hint": "function(){ Function GetParameterInt(parName As String) As Integer }"
        },
        {
          "name": "GetParameterString",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Gets a geometry parameter of type String. }",
          "code_completion_hint": "function(){ GetParameterString }",
          "code_insight_hint": "function(){ Function GetParameterString(parName As String) As String }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "RegisterChangedCallback",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Causes OnGeometryChanged to be invoked whenever the geometry changes.",
          "code_completion_hint": "RegisterChangedCallback",
          "code_insight_hint": "Sub RegisterChangedCallback()"
        },
        {
          "name": "RegisterTextChangedCallback",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Causes OnGeometryChanged to be invoked whenever the geometry's text changes.",
          "code_completion_hint": "RegisterTextChangedCallback",
          "code_insight_hint": "Sub RegisterTextChangedCallback()"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        },
        {
          "name": "SetParameterBool",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a geometry parameter of type Boolean.",
          "code_completion_hint": "SetParameterBool",
          "code_insight_hint": "Sub SetParameterBool(parName As String, v As Boolean)"
        },
        {
          "name": "SetParameterColor",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a geometry parameter of type Color.",
          "code_completion_hint": "SetParameterColor",
          "code_insight_hint": "Sub SetParameterColor(parName As String, v As Color)"
        },
        {
          "name": "SetParameterContainer",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a geometry parameter of type Container.",
          "code_completion_hint": "SetParameterContainer",
          "code_insight_hint": "Sub SetParameterContainer(parName As String, v As Container)"
        },
        {
          "name": "SetParameterDouble",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a geometry parameter of type Double.",
          "code_completion_hint": "SetParameterDouble",
          "code_insight_hint": "Sub SetParameterDouble(parName As String, v As Double)"
        },
        {
          "name": "SetParameterInt",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a geometry parameter of type Integer.",
          "code_completion_hint": "SetParameterInt",
          "code_insight_hint": "Sub SetParameterInt(parName As String, v As Integer)"
        },
        {
          "name": "SetParameterString",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a geometry parameter of type String.",
          "code_completion_hint": "SetParameterString",
          "code_insight_hint": "Sub SetParameterString(parName As String, v As String)"
        },
        {
          "name": "UnregisterChangedCallback",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Removes the binding set up by RegisterChangedCallback.",
          "code_completion_hint": "UnregisterChangedCallback",
          "code_insight_hint": "Sub UnregisterChangedCallback()"
        }
      ]
    },
    {
      "name": "Grid",
      "description": "A grid object.",
      "properties": [
        {
          "name": "Locked",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Gets or sets grid lock.",
          "code_completion_hint": "Locked",
          "code_insight_hint": "Locked As Boolean"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "Type",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets or sets the grid type. Possible types are: ; GRID_TYPE_XY; GRID_TYPE_XZ; GRID_TYPE_ZY; GRID_TYPE_FREE; GRID_TYPE_NONE",
          "code_completion_hint": "Type",
          "code_insight_hint": "Type As Integer"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "MoveToContainer",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Moves grid to the specified container and aligns it.",
          "code_completion_hint": "MoveToContainer",
          "code_insight_hint": "Sub MoveToContainer(container As Container)"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Integer",
      "description": "A 32-bit signed integer.",
      "properties": [],
      "member_methods": []
    },
    {
      "name": "Key",
      "description": "A key object. This is used to control a container's key object.",
      "properties": [
        {
          "name": "Active",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "Active",
          "code_insight_hint": "Active As Boolean"
        },
        {
          "name": "AlphaValue",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "",
          "code_completion_hint": "AlphaValue",
          "code_insight_hint": "AlphaValue As Double"
        },
        {
          "name": "AutoAlpha",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "AutoAlpha",
          "code_insight_hint": "AutoAlpha As Boolean"
        },
        {
          "name": "DrawKey",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "DrawKey",
          "code_insight_hint": "DrawKey As Boolean"
        },
        {
          "name": "DrawRGB",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "DrawRGB",
          "code_insight_hint": "DrawRGB As Boolean"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Keyframe",
      "description": "An animation keyframe.",
      "properties": [
        {
          "name": "ActionString",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "Gets or sets the command string of an action keyframe.",
          "code_completion_hint": "ActionString",
          "code_insight_hint": "ActionString As String"
        },
        {
          "name": "BoolValue",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Gets or sets the value of a boolean keyframe.",
          "code_completion_hint": "BoolValue",
          "code_insight_hint": "BoolValue As Boolean"
        },
        {
          "name": "Channel",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "Gets the channel that contains this keyframe.",
          "code_completion_hint": "Channel",
          "code_insight_hint": "Channel As Channel [read-only]"
        },
        {
          "name": "ColorValue",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "Gets or sets the value of a color keyframe.",
          "code_completion_hint": "ColorValue",
          "code_insight_hint": "ColorValue As Color"
        },
        {
          "name": "EventDirection",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get or sets the direction of an event keyframe.",
          "code_completion_hint": "EventDirection",
          "code_insight_hint": "EventDirection As Integer"
        },
        {
          "name": "EventDuration",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Get or sets the duration of an event keyframe (in seconds).",
          "code_completion_hint": "EventDuration",
          "code_insight_hint": "EventDuration As Double"
        },
        {
          "name": "EventValue",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Get or sets the type of an event keyframe.",
          "code_completion_hint": "EventValue",
          "code_insight_hint": "EventValue As Integer"
        },
        {
          "name": "FloatValue",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the value of a float keyframe.",
          "code_completion_hint": "FloatValue",
          "code_insight_hint": "FloatValue As Double"
        },
        {
          "name": "IntValue",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets or sets the value of an integer keyframe.",
          "code_completion_hint": "IntValue",
          "code_insight_hint": "IntValue As Integer"
        },
        {
          "name": "Locked",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Gets or sets the locked status of a path point keyframe.",
          "code_completion_hint": "Locked",
          "code_insight_hint": "Locked As Boolean"
        },
        {
          "name": "MaterialValue",
          "deprecated": "false",
          "return_value_scope": "Material",
          "description": "Gets or sets the value of a material keyframe.",
          "code_completion_hint": "MaterialValue",
          "code_insight_hint": "MaterialValue As Material [read-only]"
        },
        {
          "name": "Name",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "Gets or sets the keyframe's name.",
          "code_completion_hint": "Name",
          "code_insight_hint": "Name As String"
        },
        {
          "name": "NextKeyframe",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "Gets the next keyframe.",
          "code_completion_hint": "NextKeyframe",
          "code_insight_hint": "NextKeyframe As Keyframe [read-only]"
        },
        {
          "name": "NumberOfAxes",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Returns the number of spline axes.",
          "code_completion_hint": "NumberOfAxes",
          "code_insight_hint": "NumberOfAxes As Integer [read-only]"
        },
        {
          "name": "PathHandle",
          "deprecated": "false",
          "return_value_scope": "BezierHandle",
          "description": "Gets the associated path handle if this is a position keyframe. If not, Null is returned.",
          "code_completion_hint": "PathHandle",
          "code_insight_hint": "PathHandle As BezierHandle [read-only]"
        },
        {
          "name": "PreviousKeyframe",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "Gets the previous keyframe.",
          "code_completion_hint": "PreviousKeyframe",
          "code_insight_hint": "PreviousKeyframe As Keyframe [read-only]"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "Time",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the keyframe's time (in seconds).",
          "code_completion_hint": "Time",
          "code_insight_hint": "Time As Double"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "XyzValue",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "Gets or sets the value of a a rotation or scaling keyframe or a path point keyframe.",
          "code_completion_hint": "XyzValue",
          "code_insight_hint": "XyzValue As Vertex"
        },
        {
          "name": "NumAxes",
          "deprecated": "true",
          "return_value_scope": "Integer",
          "description": "Deprecated. Use NumberOfAxes.",
          "code_completion_hint": "NumAxes",
          "code_insight_hint": "NumAxes As Integer [read-only]"
        }
      ],
      "member_methods": [
        {
          "name": "Delete",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Deletes the keyframe. }",
          "code_completion_hint": "function(){ Delete }",
          "code_insight_hint": "function(){ Function Delete() As Boolean }"
        },
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetBezierHandle",
          "deprecated": "false",
          "return_value_scope": "BezierHandle",
          "description": "function(){ Returns the bezier handle for the specified axis. The axis parameter is only used if the keyframe has multiple splines, which is the case for rotation, scaling, and material keyframes. When called on a position keyframe, this procedure returns the handle for the distance spline. To get the path handle, use the PathHandle property instead. }",
          "code_completion_hint": "function(){ GetBezierHandle }",
          "code_insight_hint": "function(){ Function GetBezierHandle(axis As Integer) As BezierHandle }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        },
        {
          "name": "UpdateAnimation",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Update animation to reflect changes to keyframe. (This update isn't performed in OnAir mode where the update is done as soon as the animation is started.)",
          "code_completion_hint": "UpdateAnimation",
          "code_insight_hint": "Sub UpdateAnimation()"
        }
      ]
    },
    {
      "name": "Light",
      "description": "A light object. Light objects are returned by the Scene's GetLight member.",
      "properties": [
        {
          "name": "Attenuation",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "",
          "code_completion_hint": "Attenuation",
          "code_insight_hint": "Attenuation As Double"
        },
        {
          "name": "Color",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "",
          "code_completion_hint": "Color",
          "code_insight_hint": "Color As Color"
        },
        {
          "name": "Direction",
          "deprecated": "false",
          "return_value_scope": "Rotation",
          "description": "",
          "code_completion_hint": "Direction",
          "code_insight_hint": "Direction As Rotation"
        },
        {
          "name": "Position",
          "deprecated": "false",
          "return_value_scope": "Position",
          "description": "",
          "code_completion_hint": "Position",
          "code_insight_hint": "Position As Position"
        },
        {
          "name": "PositionTrackingActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "PositionTrackingActive",
          "code_insight_hint": "PositionTrackingActive As Boolean"
        },
        {
          "name": "PositionTrackingContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "",
          "code_completion_hint": "PositionTrackingContainer",
          "code_insight_hint": "PositionTrackingContainer As Container"
        },
        {
          "name": "RotationTrackingActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "RotationTrackingActive",
          "code_insight_hint": "RotationTrackingActive As Boolean"
        },
        {
          "name": "RotationTrackingContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "",
          "code_completion_hint": "RotationTrackingContainer",
          "code_insight_hint": "RotationTrackingContainer As Container"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "Type",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The light type:; LIGHT_TYPE_LOCAL; LIGHT_TYPE_SPOT; LIGHT_TYPE_INFINITE",
          "code_completion_hint": "Type",
          "code_insight_hint": "Type As Integer"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "ResetPositionTracking",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "ResetPositionTracking",
          "code_insight_hint": "Sub ResetPositionTracking()"
        },
        {
          "name": "ResetRotationTracking",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "ResetRotationTracking",
          "code_insight_hint": "Sub ResetRotationTracking()"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Material",
      "description": "A material object. This is used to control a container's material.",
      "properties": [
        {
          "name": "Alpha",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The alpha value [0.0, 1.0]",
          "code_completion_hint": "Alpha",
          "code_insight_hint": "Alpha As Double"
        },
        {
          "name": "Ambient",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "The ambient color",
          "code_completion_hint": "Ambient",
          "code_insight_hint": "Ambient As Color"
        },
        {
          "name": "Color",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "The color",
          "code_completion_hint": "Color",
          "code_insight_hint": "Color As Color"
        },
        {
          "name": "Diffuse",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "The diffuse color",
          "code_completion_hint": "Diffuse",
          "code_insight_hint": "Diffuse As Color"
        },
        {
          "name": "Emission",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "The emission color",
          "code_completion_hint": "Emission",
          "code_insight_hint": "Emission As Color"
        },
        {
          "name": "Lit",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Controls whether lighting is enabled.",
          "code_completion_hint": "Lit",
          "code_insight_hint": "Lit As Boolean"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Shininess",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The shininess [0.0, 1.0]",
          "code_completion_hint": "Shininess",
          "code_insight_hint": "Shininess As Double"
        },
        {
          "name": "Specular",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "The specular color",
          "code_completion_hint": "Specular",
          "code_insight_hint": "Specular As Color"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Matrix",
      "description": "A 4x4 matrix. The index operator [] can be used to access individual entries, with indices 0, 1, 2, 3 referring to the entries of the first column, 4, 5, 6, 7 to the second, etc.",
      "properties": [],
      "member_methods": [
        {
          "name": "Frustum",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "Frustum",
          "code_insight_hint": "Sub Frustum(left As Double, right As Double, bottom As Double, top As Double, near As Double, far As Double)"
        },
        {
          "name": "GetDeterminant",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ GetDeterminant }",
          "code_insight_hint": "function(){ Function GetDeterminant() As Double }"
        },
        {
          "name": "GetRotation",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){}",
          "code_completion_hint": "function(){ GetRotation }",
          "code_insight_hint": "function(){ Function GetRotation() As Vertex }"
        },
        {
          "name": "GetScaling",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){}",
          "code_completion_hint": "function(){ GetScaling }",
          "code_insight_hint": "function(){ Function GetScaling() As Vertex }"
        },
        {
          "name": "GetScaling2",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Returns the squared scaling factors. }",
          "code_completion_hint": "function(){ GetScaling2 }",
          "code_insight_hint": "function(){ Function GetScaling2() As Vertex }"
        },
        {
          "name": "GetTranslation",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){}",
          "code_completion_hint": "function(){ GetTranslation }",
          "code_insight_hint": "function(){ Function GetTranslation() As Vertex }"
        },
        {
          "name": "Invert",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){}",
          "code_completion_hint": "function(){ Invert }",
          "code_insight_hint": "function(){ Function Invert() As Boolean }"
        },
        {
          "name": "LoadIdentity",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "LoadIdentity",
          "code_insight_hint": "Sub LoadIdentity()"
        },
        {
          "name": "LoadMatrix",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Performs a glLoadMatrix().",
          "code_completion_hint": "LoadMatrix",
          "code_insight_hint": "Sub LoadMatrix()"
        },
        {
          "name": "MultMatrix",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Performs a glMultMatrix().",
          "code_completion_hint": "MultMatrix",
          "code_insight_hint": "Sub MultMatrix()"
        },
        {
          "name": "Ortho",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "Ortho",
          "code_insight_hint": "Sub Ortho(left As Double, right As Double, bottom As Double, top As Double, near As Double, far As Double)"
        },
        {
          "name": "Perspective",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "Perspective",
          "code_insight_hint": "Sub Perspective(fov As Double, aspect As Double, near As Double, far As Double)"
        },
        {
          "name": "Rotate",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "Rotate",
          "code_insight_hint": "Sub Rotate(angle As Double, v As Vertex)"
        },
        {
          "name": "Rotate",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "Rotate",
          "code_insight_hint": "Sub Rotate(v As Vertex)"
        },
        {
          "name": "RotateX",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "RotateX",
          "code_insight_hint": "Sub RotateX(angle As Double)"
        },
        {
          "name": "RotateY",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "RotateY",
          "code_insight_hint": "Sub RotateY(angle As Double)"
        },
        {
          "name": "RotateZ",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "RotateZ",
          "code_insight_hint": "Sub RotateZ(angle As Double)"
        },
        {
          "name": "Scale",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "Scale",
          "code_insight_hint": "Sub Scale(v As Vertex)"
        },
        {
          "name": "Translate",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "Translate",
          "code_insight_hint": "Sub Translate(v As Vertex)"
        },
        {
          "name": "Transpose",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "Transpose",
          "code_insight_hint": "Sub Transpose()"
        }
      ]
    },
    {
      "name": "PluginInstance",
      "description": "This type provides access to the parameters of geometry or function plugin. Objects of this type are returned by members of Geometry and Container.",
      "properties": [
        {
          "name": "Active",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Gets or sets the plugin instance's active state.",
          "code_completion_hint": "Active",
          "code_insight_hint": "Active As Boolean"
        },
        {
          "name": "MTAlignGrid",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Gets or sets grid alignment on or off (default).",
          "code_completion_hint": "MTAlignGrid",
          "code_insight_hint": "MTAlignGrid As Boolean"
        },
        {
          "name": "MTDOFEventDistribution",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Distribute DOF events to other plugin instances (default) or fires them only on the local instance.",
          "code_completion_hint": "MTDOFEventDistribution",
          "code_insight_hint": "MTDOFEventDistribution As Boolean"
        },
        {
          "name": "MTGrid",
          "deprecated": "false",
          "return_value_scope": "Grid",
          "description": "Gets or sets the grid for the current plugin instance.",
          "code_completion_hint": "MTGrid",
          "code_insight_hint": "MTGrid As Grid"
        },
        {
          "name": "MTRegistered",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Is true if a control type was already registered for the current plugin instance.",
          "code_completion_hint": "MTRegistered",
          "code_insight_hint": "MTRegistered As Boolean [read-only]"
        },
        {
          "name": "MTUseCenter",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Gets or sets automatic center shift on (default) or off.",
          "code_completion_hint": "MTUseCenter",
          "code_insight_hint": "MTUseCenter As Boolean"
        },
        {
          "name": "PluginName",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "Gets the plugin name.",
          "code_completion_hint": "PluginName",
          "code_insight_hint": "PluginName As String [read-only]"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Script",
          "deprecated": "false",
          "return_value_scope": "Script",
          "description": "Provides dynamic access to the script functions of the plugin instance. (This only makes sense for scripted plugins.)",
          "code_completion_hint": "Script",
          "code_insight_hint": "Script As Script [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "GetParameterBool",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Gets a parameter value of type Boolean. }",
          "code_completion_hint": "function(){ GetParameterBool }",
          "code_insight_hint": "function(){ Function GetParameterBool(parName As String) As Boolean }"
        },
        {
          "name": "GetParameterColor",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "function(){ Gets a parameter value of type Color. }",
          "code_completion_hint": "function(){ GetParameterColor }",
          "code_insight_hint": "function(){ Function GetParameterColor(parName As String) As Color }"
        },
        {
          "name": "GetParameterContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Gets a parameter value of type Container. }",
          "code_completion_hint": "function(){ GetParameterContainer }",
          "code_insight_hint": "function(){ Function GetParameterContainer(parName As String) As Container }"
        },
        {
          "name": "GetParameterDouble",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Gets a parameter value of type Double. }",
          "code_completion_hint": "function(){ GetParameterDouble }",
          "code_insight_hint": "function(){ Function GetParameterDouble(parName As String) As Double }"
        },
        {
          "name": "GetParameterInt",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Gets a parameter value of type Integer. }",
          "code_completion_hint": "function(){ GetParameterInt }",
          "code_insight_hint": "function(){ Function GetParameterInt(parName As String) As Integer }"
        },
        {
          "name": "GetParameterString",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Gets a parameter value of type string. }",
          "code_completion_hint": "function(){ GetParameterString }",
          "code_insight_hint": "function(){ Function GetParameterString(parName As String) As String }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "MTRegister",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Registers a control for a certain stroke in the multitouch core. Control types: ; MT_CONTROL_BUTTON; MT_CONTROL_PZR2D; MT_CONTROL_PZR2D_TILT",
          "code_completion_hint": "MTRegister",
          "code_insight_hint": "Sub MTRegister(stroke As Integer, controlType As Integer)"
        },
        {
          "name": "MTRegisterEx",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Same as MTRegister but with the additional possibility to set parameters for the specified control.",
          "code_completion_hint": "MTRegisterEx",
          "code_insight_hint": "Sub MTRegisterEx(stroke As Integer, controlType As Integer, params As Array[Double])"
        },
        {
          "name": "MTSetPosition",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets the position of the container",
          "code_completion_hint": "MTSetPosition",
          "code_insight_hint": "Sub MTSetPosition(x As Integer, y As Integer)"
        },
        {
          "name": "MTUnregister",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Unregisters a control in the multitouch core.",
          "code_completion_hint": "MTUnregister",
          "code_insight_hint": "Sub MTUnregister()"
        },
        {
          "name": "PushButton",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Calls the OnExecAction handler of the push button identified by parName.",
          "code_completion_hint": "PushButton",
          "code_insight_hint": "Sub PushButton(parName As String)"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        },
        {
          "name": "SetParameterBool",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a parameter value of type Boolean.",
          "code_completion_hint": "SetParameterBool",
          "code_insight_hint": "Sub SetParameterBool(parName As String, v As Boolean)"
        },
        {
          "name": "SetParameterColor",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a parameter value of type Color.",
          "code_completion_hint": "SetParameterColor",
          "code_insight_hint": "Sub SetParameterColor(parName As String, v As Color)"
        },
        {
          "name": "SetParameterContainer",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a parameter value of type Container",
          "code_completion_hint": "SetParameterContainer",
          "code_insight_hint": "Sub SetParameterContainer(parName As String, v As Container)"
        },
        {
          "name": "SetParameterDouble",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a parameter value of type Double.",
          "code_completion_hint": "SetParameterDouble",
          "code_insight_hint": "Sub SetParameterDouble(parName As String, v As Double)"
        },
        {
          "name": "SetParameterInt",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a parameter value of type Integer.",
          "code_completion_hint": "SetParameterInt",
          "code_insight_hint": "Sub SetParameterInt(parName As String, v As Integer)"
        },
        {
          "name": "SetParameterString",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sets a parameter value of type Dtring.",
          "code_completion_hint": "SetParameterString",
          "code_insight_hint": "Sub SetParameterString(parName As String, v As String)"
        }
      ]
    },
    {
      "name": "Position",
      "description": "A position object. This is used to control the position of a container, camera, or light.",
      "properties": [
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "x",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the x component.",
          "code_completion_hint": "x",
          "code_insight_hint": "x As Double"
        },
        {
          "name": "xyz",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "Gets or sets the x, y, z components combined into a vertex.",
          "code_completion_hint": "xyz",
          "code_insight_hint": "xyz As Vertex"
        },
        {
          "name": "y",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the y component.",
          "code_completion_hint": "y",
          "code_insight_hint": "y As Double"
        },
        {
          "name": "z",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the z component.",
          "code_completion_hint": "z",
          "code_insight_hint": "z As Double"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Rotation",
      "description": "A rotation object. This is used to control the position of a container or light.",
      "properties": [
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "x",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the x component.",
          "code_completion_hint": "x",
          "code_insight_hint": "x As Double"
        },
        {
          "name": "xyz",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "Gets or sets the x, y, z components combined into a vertex.",
          "code_completion_hint": "xyz",
          "code_insight_hint": "xyz As Vertex"
        },
        {
          "name": "y",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the y component.",
          "code_completion_hint": "y",
          "code_insight_hint": "y As Double"
        },
        {
          "name": "z",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the z component.",
          "code_completion_hint": "z",
          "code_insight_hint": "z As Double"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Scaling",
      "description": "A scaling object. This is used to control the scaling of a container.",
      "properties": [
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "x",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the x component.",
          "code_completion_hint": "x",
          "code_insight_hint": "x As Double"
        },
        {
          "name": "xyz",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "Gets or sets the x, y, z components combined into a vertex.",
          "code_completion_hint": "xyz",
          "code_insight_hint": "xyz As Vertex"
        },
        {
          "name": "y",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the y component.",
          "code_completion_hint": "y",
          "code_insight_hint": "y As Double"
        },
        {
          "name": "z",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets or sets the z component.",
          "code_completion_hint": "z",
          "code_insight_hint": "z As Double"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Scene",
      "description": "A scene object. The Scene member of the Base type provides access to the current scene.",
      "properties": [
        {
          "name": "AlphaClearValue",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "",
          "code_completion_hint": "AlphaClearValue",
          "code_insight_hint": "AlphaClearValue As Integer"
        },
        {
          "name": "AutoKeyActive",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "AutoKeyActive",
          "code_insight_hint": "AutoKeyActive As Boolean"
        },
        {
          "name": "AutoKeyPosition",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "",
          "code_completion_hint": "AutoKeyPosition",
          "code_insight_hint": "AutoKeyPosition As Vertex"
        },
        {
          "name": "BackgroundColor",
          "deprecated": "false",
          "return_value_scope": "Color",
          "description": "",
          "code_completion_hint": "BackgroundColor",
          "code_insight_hint": "BackgroundColor As Color"
        },
        {
          "name": "CurrentCamera",
          "deprecated": "false",
          "return_value_scope": "Camera",
          "description": "The current camera",
          "code_completion_hint": "CurrentCamera",
          "code_insight_hint": "CurrentCamera As Camera [read-only]"
        },
        {
          "name": "CurrentCameraIndex",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The index of the current camera",
          "code_completion_hint": "CurrentCameraIndex",
          "code_insight_hint": "CurrentCameraIndex As Integer"
        },
        {
          "name": "Location",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "The location of the scene",
          "code_completion_hint": "Location",
          "code_insight_hint": "Location As String [read-only]"
        },
        {
          "name": "LocationPath",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "The full db location of the scene",
          "code_completion_hint": "LocationPath",
          "code_insight_hint": "LocationPath As String [read-only]"
        },
        {
          "name": "Map",
          "deprecated": "false",
          "return_value_scope": "SharedMemory",
          "description": "The scene's memory map, used for data sharing within a scene.",
          "code_completion_hint": "Map",
          "code_insight_hint": "Map As SharedMemory [read-only]"
        },
        {
          "name": "Name",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "The name of the scene",
          "code_completion_hint": "Name",
          "code_insight_hint": "Name As String [read-only]"
        },
        {
          "name": "RootContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "The topmost container in the scene tree",
          "code_completion_hint": "RootContainer",
          "code_insight_hint": "RootContainer As Container [read-only]"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Script",
          "deprecated": "false",
          "return_value_scope": "Script",
          "description": "The script object: it can be used used to dynamically call member procedures of the scene",
          "code_completion_hint": "Script",
          "code_insight_hint": "Script As Script [read-only]"
        },
        {
          "name": "ScriptPluginInstance",
          "deprecated": "false",
          "return_value_scope": "PluginInstance",
          "description": "The script's plugin instance",
          "code_completion_hint": "ScriptPluginInstance",
          "code_insight_hint": "ScriptPluginInstance As PluginInstance [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "Uuid",
          "deprecated": "false",
          "return_value_scope": "Uuid",
          "description": "The UUID of the scene",
          "code_completion_hint": "Uuid",
          "code_insight_hint": "Uuid As Uuid [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "AddLogMessage",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Adds a log message to the scene log.",
          "code_completion_hint": "AddLogMessage",
          "code_insight_hint": "Sub AddLogMessage(message As String)"
        },
        {
          "name": "CreateRootContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){}",
          "code_completion_hint": "function(){ CreateRootContainer }",
          "code_insight_hint": "function(){ Function CreateRootContainer() As Container }"
        },
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindContainer",
          "deprecated": "false",
          "return_value_scope": "Container",
          "description": "function(){ Searches the scene tree for a container named name. The search mode is breadth-first. It's possible to combine a call to this function and multiple calls to Container.FindSubContainer into a single call by concatenating the individual container names using $ as a separator. For example, scene.FindContainer(\"name1$name2\") has the same effect as scene.FindContainer(\"name1\").FindSubContainer(\"name2\"). }",
          "code_completion_hint": "function(){ FindContainer }",
          "code_insight_hint": "function(){ Function FindContainer(name As String) As Container }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetCamera",
          "deprecated": "false",
          "return_value_scope": "Camera",
          "description": "function(){}",
          "code_completion_hint": "function(){ GetCamera }",
          "code_insight_hint": "function(){ Function GetCamera(cameraIndex As Integer) As Camera }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "GetGrid",
          "deprecated": "false",
          "return_value_scope": "Grid",
          "description": "function(){ Gets a grid from the scene. }",
          "code_completion_hint": "function(){ GetGrid }",
          "code_insight_hint": "function(){ Function GetGrid(gridNumber As Integer) As Grid }"
        },
        {
          "name": "GetLight",
          "deprecated": "false",
          "return_value_scope": "Light",
          "description": "function(){}",
          "code_completion_hint": "function(){ GetLight }",
          "code_insight_hint": "function(){ Function GetLight(lightIndex As Integer) As Light }"
        },
        {
          "name": "GetScenePluginInstance",
          "deprecated": "false",
          "return_value_scope": "PluginInstance",
          "description": "function(){ Provides access to the parameters of a scene plugin instance. }",
          "code_completion_hint": "function(){ GetScenePluginInstance }",
          "code_insight_hint": "function(){ Function GetScenePluginInstance(pluginName As String) As PluginInstance }"
        },
        {
          "name": "GetUnlockedGrid",
          "deprecated": "false",
          "return_value_scope": "Grid",
          "description": "function(){ Gets the next unused grid from the scene. }",
          "code_completion_hint": "function(){ GetUnlockedGrid }",
          "code_insight_hint": "function(){ Function GetUnlockedGrid() As Grid }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "ScreenPosToWorldGrid",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Converts the screen position to current grid intersection point. }",
          "code_completion_hint": "function(){ ScreenPosToWorldGrid }",
          "code_insight_hint": "function(){ Function ScreenPosToWorldGrid(dX As Double, dY As Double) As Vertex }"
        },
        {
          "name": "ScreenPosToWorldPos",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){ Converts the screen position to the world position.; This would mean that if you assign the returned vertex to a container (on root level � no parent containers) position then it moves exactly to the passed screen position (orthogonal to camera). }",
          "code_completion_hint": "function(){ ScreenPosToWorldPos }",
          "code_insight_hint": "function(){ Function ScreenPosToWorldPos(dX As Double, dY As Double) As Vertex }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        },
        {
          "name": "UpdateSceneTree",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "In authoring mode, this method causes the scene tree GUI to be rebuilt. Ignored in on-air mode.",
          "code_completion_hint": "UpdateSceneTree",
          "code_insight_hint": "Sub UpdateSceneTree()"
        },
        {
          "name": "WorldPosToScreenPos",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Converts the world position to the position on the screen.",
          "code_completion_hint": "WorldPosToScreenPos",
          "code_insight_hint": "Sub WorldPosToScreenPos(pos As Vertex, [out] dX As Double, [out] dY As Double)"
        }
      ]
    },
    {
      "name": "Script",
      "description": "The container's script object. This is used to dynamically call member procedures of another container.",
      "properties": [],
      "member_methods": []
    },
    {
      "name": "ScriptSettings",
      "description": "A script's local settings.",
      "properties": [
        {
          "name": "CallButtonDownForTopObjectsOnly",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "If set to true, the OnXButtonDown procedures are called only if the container contains the mouse cursor and is on top at the mouse cursor position. Default = true.",
          "code_completion_hint": "CallButtonDownForTopObjectsOnly",
          "code_insight_hint": "CallButtonDownForTopObjectsOnly As Boolean"
        },
        {
          "name": "CallEnterLeaveForTopObjectsOnly",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "If set to true, OnEnter/OnLeave/OnEnterSubContainer/OnLeaveSubContainer is called only if the container is on top at the mouse cursor position. Default = true.",
          "code_completion_hint": "CallEnterLeaveForTopObjectsOnly",
          "code_insight_hint": "CallEnterLeaveForTopObjectsOnly As Boolean"
        },
        {
          "name": "CallMouseMoveForTopObjectsOnly",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "If set to true, OnMouseMove is called only if the container contains the mouse cursor and is on top at the mouse cursor position. Default = false.",
          "code_completion_hint": "CallMouseMoveForTopObjectsOnly",
          "code_insight_hint": "CallMouseMoveForTopObjectsOnly As Boolean"
        },
        {
          "name": "CallEnterLeaveForBackgroundObjects",
          "deprecated": "true",
          "return_value_scope": "Boolean",
          "description": "Deprecated. Use CallEnterLeaveForTopObjectsOnly instead.",
          "code_completion_hint": "CallEnterLeaveForBackgroundObjects",
          "code_insight_hint": "CallEnterLeaveForBackgroundObjects As Boolean"
        },
        {
          "name": "CallMouseMoveForBackgroundObjects",
          "deprecated": "true",
          "return_value_scope": "Boolean",
          "description": "Deprecated. Use CallMouseMoveForTopObjectsOnly instead.",
          "code_completion_hint": "CallMouseMoveForBackgroundObjects",
          "code_insight_hint": "CallMouseMoveForBackgroundObjects As Boolean"
        }
      ],
      "member_methods": []
    },
    {
      "name": "SharedMemory",
      "description": "A storage object that holds a map of Variant objects indexed by a string.\nIt can be used for system-wide or scene-wide data sharing.\nTo access an individual value, use the index operator. Example:\n\n' Script 1:\ndim a = 123 ' define an integer variable\nSystem.Map[\"my_global_variable\"] = a\n'\n' Script 2:\ndim a = (Integer)System.Map[\"my_global_variable\"]",
      "properties": [
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "ContainsKey",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Tests whether an element with the specified key is in the map. }",
          "code_completion_hint": "function(){ ContainsKey }",
          "code_insight_hint": "function(){ Function ContainsKey(key As String) As Boolean }"
        },
        {
          "name": "CreateKey",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Creates a new empty variable. }",
          "code_completion_hint": "function(){ CreateKey }",
          "code_insight_hint": "function(){ Function CreateKey(key As String) As Boolean }"
        },
        {
          "name": "DeleteKey",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Deletes a variable. }",
          "code_completion_hint": "function(){ DeleteKey }",
          "code_insight_hint": "function(){ Function DeleteKey(key As String) As Boolean }"
        },
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "GetKeys",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Fills the passed array with all defined keys.",
          "code_completion_hint": "GetKeys",
          "code_insight_hint": "Sub GetKeys(keys As Array[String])"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "LoadFromDb",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Loads the contents of the map from a database file. The file is specified by path, which must be an absolute path, such as \"/User/mem_map\". }",
          "code_completion_hint": "function(){ LoadFromDb }",
          "code_insight_hint": "function(){ Function LoadFromDb(path As String) As Boolean }"
        },
        {
          "name": "RegisterChangedCallback",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Causes OnSharedMemoryVariableChanged to be invoked whenever the variable identified by key is changed and OnSharedMemoryVariableDeleted in response to the key being deleted. If you pass an empty string for key, the callbacks will be invoked whenever any variable in the map is changed or deleted.",
          "code_completion_hint": "RegisterChangedCallback",
          "code_insight_hint": "Sub RegisterChangedCallback(key As String)"
        },
        {
          "name": "SaveToDb",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Saves the contents of the map into a database file. The file is specified by path, which must be an absolute path, such as \"/User/mem_map\". }",
          "code_completion_hint": "function(){ SaveToDb }",
          "code_insight_hint": "function(){ Function SaveToDb(path As String) As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        },
        {
          "name": "UnregisterChangedCallback",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Removes the binding set up by RegisterChangedCallback.",
          "code_completion_hint": "UnregisterChangedCallback",
          "code_insight_hint": "Sub UnregisterChangedCallback(key As String)"
        }
      ]
    },
    {
      "name": "System",
      "description": "This type provides access to system-wide parameters and procedures.",
      "properties": [
        {
          "name": "BackScene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "Returns the scene that is in the back layer of the scene/render editor.",
          "code_completion_hint": "BackScene",
          "code_insight_hint": "BackScene As Scene [read-only]"
        },
        {
          "name": "CurrentDirectoryPath",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "Gets or sets the current directory path.",
          "code_completion_hint": "CurrentDirectoryPath",
          "code_insight_hint": "CurrentDirectoryPath As String"
        },
        {
          "name": "CurrentRefreshRate",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets the current refresh rate in seconds.",
          "code_completion_hint": "CurrentRefreshRate",
          "code_insight_hint": "CurrentRefreshRate As Double [read-only]"
        },
        {
          "name": "FrontScene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "Returns the scene that is in the front layer of the scene/render editor.",
          "code_completion_hint": "FrontScene",
          "code_insight_hint": "FrontScene As Scene [read-only]"
        },
        {
          "name": "HostName",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "Gets the host name of the local computer.",
          "code_completion_hint": "HostName",
          "code_insight_hint": "HostName As String [read-only]"
        },
        {
          "name": "IPAddressString",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "Gets the IP address of the local computer. The format is a string that looks like \"10.211.54.199\".",
          "code_completion_hint": "IPAddressString",
          "code_insight_hint": "IPAddressString As String [read-only]"
        },
        {
          "name": "IsPostRecording",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Determines if in post mode.",
          "code_completion_hint": "IsPostRecording",
          "code_insight_hint": "IsPostRecording As Boolean [read-only]"
        },
        {
          "name": "LButtonState",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "True if the left mouse button is pressed.",
          "code_completion_hint": "LButtonState",
          "code_insight_hint": "LButtonState As Boolean [read-only]"
        },
        {
          "name": "MainScene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "Returns the scene that is in the main layer of the scene/render editor.",
          "code_completion_hint": "MainScene",
          "code_insight_hint": "MainScene As Scene [read-only]"
        },
        {
          "name": "Map",
          "deprecated": "false",
          "return_value_scope": "SharedMemory",
          "description": "The global memory map, used for system-wide data sharing.",
          "code_completion_hint": "Map",
          "code_insight_hint": "Map As SharedMemory [read-only]"
        },
        {
          "name": "MButtonState",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "True if the middle mouse button is pressed.",
          "code_completion_hint": "MButtonState",
          "code_insight_hint": "MButtonState As Boolean [read-only]"
        },
        {
          "name": "MouseX",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the x position of the mouse cursor (in screen coordinates).",
          "code_completion_hint": "MouseX",
          "code_insight_hint": "MouseX As Integer [read-only]"
        },
        {
          "name": "MouseY",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the y position of the mouse cursor (in screen coordinates).",
          "code_completion_hint": "MouseY",
          "code_insight_hint": "MouseY As Integer [read-only]"
        },
        {
          "name": "OutputAspect",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets the output aspect ratio.",
          "code_completion_hint": "OutputAspect",
          "code_insight_hint": "OutputAspect As Double [read-only]"
        },
        {
          "name": "OutputFieldDominance",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the field dominance of current the output field. (0=first field or progressive, 1=second field; )",
          "code_completion_hint": "OutputFieldDominance",
          "code_insight_hint": "OutputFieldDominance As Integer [read-only]"
        },
        {
          "name": "OutputInterlaced",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Determines if the output format is interlaced.",
          "code_completion_hint": "OutputInterlaced",
          "code_insight_hint": "OutputInterlaced As Boolean [read-only]"
        },
        {
          "name": "OutputRefreshRate",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Gets the output refresh rate in seconds.",
          "code_completion_hint": "OutputRefreshRate",
          "code_insight_hint": "OutputRefreshRate As Double [read-only]"
        },
        {
          "name": "OutputRetraceCounter",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the retrace counter.",
          "code_completion_hint": "OutputRetraceCounter",
          "code_insight_hint": "OutputRetraceCounter As Integer [read-only]"
        },
        {
          "name": "OutputSystem",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the output system. (0=INACTIVE, 3=480I_5994_SMPTE259, 4=576I_5000_SMPTE259, 5=720P_5994_SMPTE296, 6=720P_6000_SMPTE296, 10=1080I_5000_SMPTE274, 11=1080I_5994_SMPTE274, 12=1080I_6000_SMPTE274, 21=720P_5000_SMPTE296, 27=FULL_SCREEN, 28=USER_DEFINED ).",
          "code_completion_hint": "OutputSystem",
          "code_insight_hint": "OutputSystem As Integer [read-only]"
        },
        {
          "name": "PostCurrentTime",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "Get the current time in post mode.",
          "code_completion_hint": "PostCurrentTime",
          "code_insight_hint": "PostCurrentTime As Double [read-only]"
        },
        {
          "name": "PostFieldDominance",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the field dominance in post mode. (0=first field or progressive, 1=second field; )",
          "code_completion_hint": "PostFieldDominance",
          "code_insight_hint": "PostFieldDominance As Integer [read-only]"
        },
        {
          "name": "PostRetraceCounter",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the retrace counter in post mode.",
          "code_completion_hint": "PostRetraceCounter",
          "code_insight_hint": "PostRetraceCounter As Integer [read-only]"
        },
        {
          "name": "RButtonState",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "True if the right mouse button is pressed.",
          "code_completion_hint": "RButtonState",
          "code_insight_hint": "RButtonState As Boolean [read-only]"
        },
        {
          "name": "RenderEditorHeight",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the height in pixels of the render editor.",
          "code_completion_hint": "RenderEditorHeight",
          "code_insight_hint": "RenderEditorHeight As Integer [read-only]"
        },
        {
          "name": "RenderEditorWidth",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the width in pixels of the render editor.",
          "code_completion_hint": "RenderEditorWidth",
          "code_insight_hint": "RenderEditorWidth As Integer [read-only]"
        },
        {
          "name": "RenderWindowHeight",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the height in pixels of the render window.",
          "code_completion_hint": "RenderWindowHeight",
          "code_insight_hint": "RenderWindowHeight As Integer [read-only]"
        },
        {
          "name": "RenderWindowWidth",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the width in pixels of the render window.",
          "code_completion_hint": "RenderWindowWidth",
          "code_insight_hint": "RenderWindowWidth As Integer [read-only]"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "ScreenHeight",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the height in pixels of the screen.",
          "code_completion_hint": "ScreenHeight",
          "code_insight_hint": "ScreenHeight As Integer [read-only]"
        },
        {
          "name": "ScreenWidth",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the width in pixels of the screen.",
          "code_completion_hint": "ScreenWidth",
          "code_insight_hint": "ScreenWidth As Integer [read-only]"
        },
        {
          "name": "ShowMouseCursor",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "Gets or sets the visibility state of the mouse cursor.",
          "code_completion_hint": "ShowMouseCursor",
          "code_insight_hint": "ShowMouseCursor As Boolean"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VideoHeight",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the height in pixels of the output video.",
          "code_completion_hint": "VideoHeight",
          "code_insight_hint": "VideoHeight As Integer [read-only]"
        },
        {
          "name": "VideoWidth",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the width in pixels of the output video.",
          "code_completion_hint": "VideoWidth",
          "code_insight_hint": "VideoWidth As Integer [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "RefreshRate",
          "deprecated": "true",
          "return_value_scope": "Double",
          "description": "Deprecated.",
          "code_completion_hint": "RefreshRate",
          "code_insight_hint": "RefreshRate As Double [read-only]"
        }
      ],
      "member_methods": [
        {
          "name": "DeleteFile",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Deletes the file filename, returns true when successfully }",
          "code_completion_hint": "function(){ DeleteFile }",
          "code_insight_hint": "function(){ Function DeleteFile(filename As String) As Boolean }"
        },
        {
          "name": "DirectoryExists",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if the directory exists }",
          "code_completion_hint": "function(){ DirectoryExists }",
          "code_insight_hint": "function(){ Function DirectoryExists(directory As String) As Boolean }"
        },
        {
          "name": "ExploreDocument",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Opens a directory in the Windows Explorer. If activate is false, the Explorer window is minimized. }",
          "code_completion_hint": "function(){ ExploreDocument }",
          "code_insight_hint": "function(){ Function ExploreDocument(filename As String, activate As Boolean) As Boolean }"
        },
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "GetClipChannel",
          "deprecated": "false",
          "return_value_scope": "ClipChannel",
          "description": "function(){ Gets the ClipChannel A (parameter = 0) or B (parameter = 1) }",
          "code_completion_hint": "function(){ GetClipChannel }",
          "code_insight_hint": "function(){ Function GetClipChannel(param_1 As Integer) As ClipChannel }"
        },
        {
          "name": "GetDirectoryContent",
          "deprecated": "false",
          "return_value_scope": "Array[String]",
          "description": "function(){ Returns an array with all files in the directory dirname matching the pattern, e.g.: *.jpg }",
          "code_completion_hint": "function(){ GetDirectoryContent }",
          "code_insight_hint": "function(){ Function GetDirectoryContent(dirname As String, pattern As String) As Array[String] }"
        },
        {
          "name": "GetElapsedTime",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Gets the time (in seconds) that has passed since Viz was started. }",
          "code_completion_hint": "function(){ GetElapsedTime }",
          "code_insight_hint": "function(){ Function GetElapsedTime() As Double }"
        },
        {
          "name": "GetNumberOfClipChannel",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Gets the number of available Clip Channels }",
          "code_completion_hint": "function(){ GetNumberOfClipChannel }",
          "code_insight_hint": "function(){ Function GetNumberOfClipChannel() As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "IsKeyDown",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if the specified key is pressed. }",
          "code_completion_hint": "function(){ IsKeyDown }",
          "code_insight_hint": "function(){ Function IsKeyDown(keyCode As Integer) As Boolean }"
        },
        {
          "name": "LoadBackScene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "function(){ Loads a scene file into the back layer of the scene/render editor. }",
          "code_completion_hint": "function(){ LoadBackScene }",
          "code_insight_hint": "function(){ Function LoadBackScene(scenepath As String) As Scene }"
        },
        {
          "name": "LoadFrontScene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "function(){ Loads a scene file into the front layer of the scene/render editor. }",
          "code_completion_hint": "function(){ LoadFrontScene }",
          "code_insight_hint": "function(){ Function LoadFrontScene(scenepath As String) As Scene }"
        },
        {
          "name": "LoadMainScene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "function(){ Loads a scene file into the main layer of the scene/render editor. }",
          "code_completion_hint": "function(){ LoadMainScene }",
          "code_insight_hint": "function(){ Function LoadMainScene(scenepath As String) As Scene }"
        },
        {
          "name": "LoadTextFile",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Loads the text file identified by filepath into result. Returns false if the file does not exist or is not accessible. }",
          "code_completion_hint": "function(){ LoadTextFile }",
          "code_insight_hint": "function(){ Function LoadTextFile(filepath As String, [out] result As String) As Boolean }"
        },
        {
          "name": "MouseOverIPDefineServer",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Define another VizMouseServer }",
          "code_completion_hint": "function(){ MouseOverIPDefineServer }",
          "code_insight_hint": "function(){ Function MouseOverIPDefineServer(serverAddress As String, serverPort As Integer, localPort As Integer) As Integer }"
        },
        {
          "name": "MouseOverIPQuitServer",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Kill the all defined VizMouseServer }",
          "code_completion_hint": "function(){ MouseOverIPQuitServer }",
          "code_insight_hint": "function(){ Function MouseOverIPQuitServer() As Boolean }"
        },
        {
          "name": "MouseOverIPQuitServer",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Kill this VizMouseServer }",
          "code_completion_hint": "function(){ MouseOverIPQuitServer }",
          "code_insight_hint": "function(){ Function MouseOverIPQuitServer(serverID As Integer) As Boolean }"
        },
        {
          "name": "MouseOverIPRegister",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Register the viz engine as client to receive mouse events from all defined VizMouseServer }",
          "code_completion_hint": "function(){ MouseOverIPRegister }",
          "code_insight_hint": "function(){ Function MouseOverIPRegister() As Boolean }"
        },
        {
          "name": "MouseOverIPRegister",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Register the viz engine as client to receive mouse events from this VizMouseServer }",
          "code_completion_hint": "function(){ MouseOverIPRegister }",
          "code_insight_hint": "function(){ Function MouseOverIPRegister(serverID As Integer) As Boolean }"
        },
        {
          "name": "MouseOverIPUndefineAllServers",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Undefine all known VizMouseServers. }",
          "code_completion_hint": "function(){ MouseOverIPUndefineAllServers }",
          "code_insight_hint": "function(){ Function MouseOverIPUndefineAllServers() As Boolean }"
        },
        {
          "name": "MouseOverIPUndefineServer",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Unefine the VizMouseServer with the address serverAddress, the server port serverPort and the local listening port localPort }",
          "code_completion_hint": "function(){ MouseOverIPUndefineServer }",
          "code_insight_hint": "function(){ Function MouseOverIPUndefineServer(serverAddress As String, serverPort As Integer, localPort As Integer) As Boolean }"
        },
        {
          "name": "MouseOverIPUndefineServer",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Undefine the VizMouseServer with the ID serverID. }",
          "code_completion_hint": "function(){ MouseOverIPUndefineServer }",
          "code_insight_hint": "function(){ Function MouseOverIPUndefineServer(serverID As Integer) As Boolean }"
        },
        {
          "name": "MouseOverIPUnregister",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Unregister the viz engine from all defined VizMouseServer }",
          "code_completion_hint": "function(){ MouseOverIPUnregister }",
          "code_insight_hint": "function(){ Function MouseOverIPUnregister() As Boolean }"
        },
        {
          "name": "MouseOverIPUnregister",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Unregister the viz engine from this VizMouseServer }",
          "code_completion_hint": "function(){ MouseOverIPUnregister }",
          "code_insight_hint": "function(){ Function MouseOverIPUnregister(serverID As Integer) As Boolean }"
        },
        {
          "name": "MouseOverIPUnregisterAll",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Unregister all viz engines from all defined VizMouseServer }",
          "code_completion_hint": "function(){ MouseOverIPUnregisterAll }",
          "code_insight_hint": "function(){ Function MouseOverIPUnregisterAll() As Boolean }"
        },
        {
          "name": "MouseOverIPUnregisterAll",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Unregister all viz engines from this VizMouseServer }",
          "code_completion_hint": "function(){ MouseOverIPUnregisterAll }",
          "code_insight_hint": "function(){ Function MouseOverIPUnregisterAll(serverID As Integer) As Boolean }"
        },
        {
          "name": "OpenDocument",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Opens a document file. If activate is false, the application loading the file is minimized. }",
          "code_completion_hint": "function(){ OpenDocument }",
          "code_insight_hint": "function(){ Function OpenDocument(filename As String, activate As Boolean) As Boolean }"
        },
        {
          "name": "PlaySound",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Plays a sound file.",
          "code_completion_hint": "PlaySound",
          "code_insight_hint": "Sub PlaySound(filename As String)"
        },
        {
          "name": "SaveTextFile",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Saves the contents of text into the file identified by filepath. Returns false if the file cannot be written to. }",
          "code_completion_hint": "function(){ SaveTextFile }",
          "code_insight_hint": "function(){ Function SaveTextFile(filepath As String, text As String) As Boolean }"
        },
        {
          "name": "SendCommand",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Sends a command to the local viz engine. }",
          "code_completion_hint": "function(){ SendCommand }",
          "code_insight_hint": "function(){ Function SendCommand(command As String) As String }"
        },
        {
          "name": "SendRemoteCommand",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Sends a command string to a viz engine running on another PC.; If timeoutInMs &gt; 0, the procedure waits at most timeoutInMs milliseconds for an answer, and susequently returns that answer.; If timeoutInMs = 0, the procedure returns immediatly, ignoring any answer. }",
          "code_completion_hint": "function(){ SendRemoteCommand }",
          "code_insight_hint": "function(){ Function SendRemoteCommand(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        },
        {
          "name": "StartApplication",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Launches an application. If activate is false, the application window is minimized. }",
          "code_completion_hint": "function(){ StartApplication }",
          "code_insight_hint": "function(){ Function StartApplication(filename As String, parameters As String, activate As Boolean) As Boolean }"
        },
        {
          "name": "StopSound",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Stops sound playback. See PlaySound.",
          "code_completion_hint": "StopSound",
          "code_insight_hint": "Sub StopSound()"
        },
        {
          "name": "TcpSend",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Sends a command string via TCP/IP to a remote socket. Unlike SendRemoteCommand, this procedure sends the command string as is, that is without a viz command identifier attached.; The timeoutInMs has the same meaning as for SendRemoteCommand. }",
          "code_completion_hint": "function(){ TcpSend }",
          "code_insight_hint": "function(){ Function TcpSend(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String }"
        },
        {
          "name": "TcpSendAsync",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sends a command string via TCP/IP to a remote socket. Unlike TcpSend, this procedure works asynchron and the return result is stored in a shared memory map, at your defined sharedMemoryKey.; The defined sharedMemoryKey or its RegisterChangedCallback will be searched in the maps in the following order: Scene.Map, System.Map and VizCommunication.Map; If timeoutInMs is set to 0 then TcpSendAsync will wait until a answer is received or as long as no error occurs (e.g. host doesn't exist).",
          "code_completion_hint": "TcpSendAsync",
          "code_insight_hint": "Sub TcpSendAsync(sharedMemoryKey As String, hostname As String, port As Integer, commandString As String, timeoutInMs As Integer)"
        },
        {
          "name": "TcpSendAsyncStatus",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Same as TcpSendAsync but with additional status Shared Memory Key which informs you about the transmission process. The following Messages (Strings) will be returned in sharedMemoryKeyStatus: ; SENDING; RECEIVED; ERROR; TIMEOUT; The timeoutInMs has the same meaning as for TcpSendAsync.",
          "code_completion_hint": "TcpSendAsyncStatus",
          "code_insight_hint": "Sub TcpSendAsyncStatus(sharedMemoryKey As String, hostname As String, port As Integer, commandString As String, timeoutInMs As Integer, sharedMemoryKeyStatus As String)"
        }
      ]
    },
    {
      "name": "Stage",
      "description": "A stage object. The Stage member of the Base type provides access to the current scene's stage.",
      "properties": [
        {
          "name": "RootDirector",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "Gets the topmost director in the stage.",
          "code_completion_hint": "RootDirector",
          "code_insight_hint": "RootDirector As Director [read-only]"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "ContinueAnimation",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Continues the animation.",
          "code_completion_hint": "ContinueAnimation",
          "code_insight_hint": "Sub ContinueAnimation()"
        },
        {
          "name": "CreateRootDirector",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "function(){ If there is no root director this method creates and returns a new one. }",
          "code_completion_hint": "function(){ CreateRootDirector }",
          "code_insight_hint": "function(){ Function CreateRootDirector() As Director }"
        },
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindDirector",
          "deprecated": "false",
          "return_value_scope": "Director",
          "description": "function(){ Searches for a director named directorName. }",
          "code_completion_hint": "function(){ FindDirector }",
          "code_insight_hint": "function(){ Function FindDirector(directorName As String) As Director }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "IsAnimationRunning",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if the animation active. }",
          "code_completion_hint": "function(){ IsAnimationRunning }",
          "code_insight_hint": "function(){ Function IsAnimationRunning() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        },
        {
          "name": "StartAnimation",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Starts the animation in the directors selected in the diretor tree.",
          "code_completion_hint": "StartAnimation",
          "code_insight_hint": "Sub StartAnimation()"
        },
        {
          "name": "StopAnimation",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Stops the animation in all directors.",
          "code_completion_hint": "StopAnimation",
          "code_insight_hint": "Sub StopAnimation()"
        }
      ]
    },
    {
      "name": "String",
      "description": "A character string. Use the '&' operator to concatenate strings.",
      "properties": {
        "property": {
          "name": "Length",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "Gets the length of the string.",
          "code_completion_hint": "Length",
          "code_insight_hint": "Length As Integer [read-only]"
        }
      },
      "member_methods": [
        {
          "name": "AnsiToUtf8",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Converts an ANSI encoded string (using the system code-page) to UTF-8.",
          "code_completion_hint": "AnsiToUtf8",
          "code_insight_hint": "Sub AnsiToUtf8()"
        },
        {
          "name": "Append",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Appends 'str' to the string",
          "code_completion_hint": "Append",
          "code_insight_hint": "Sub Append(str As String)"
        },
        {
          "name": "EndsWith",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if the string ends with 'str' }",
          "code_completion_hint": "function(){ EndsWith }",
          "code_insight_hint": "function(){ Function EndsWith(str As String) As Boolean }"
        },
        {
          "name": "Erase",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Erases a range of 'len' characters starting at 'pos'",
          "code_completion_hint": "Erase",
          "code_insight_hint": "Sub Erase(pos As Integer, len As Integer)"
        },
        {
          "name": "EraseChar",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Erases the character at 'pos'",
          "code_completion_hint": "EraseChar",
          "code_insight_hint": "Sub EraseChar(pos As Integer)"
        },
        {
          "name": "Find",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Searches for a substring }",
          "code_completion_hint": "function(){ Find }",
          "code_insight_hint": "function(){ Function Find(substring As String) As Integer }"
        },
        {
          "name": "FindFirstNotOf",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Searches for the first character that is not equal to any character within 'chars' }",
          "code_completion_hint": "function(){ FindFirstNotOf }",
          "code_insight_hint": "function(){ Function FindFirstNotOf(chars As String) As Integer }"
        },
        {
          "name": "FindFirstOf",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Searches for the first character that is equal to any character within 'chars' }",
          "code_completion_hint": "function(){ FindFirstOf }",
          "code_insight_hint": "function(){ Function FindFirstOf(chars As String) As Integer }"
        },
        {
          "name": "FindLastNotOf",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Searches for the last character that is not equal to any character within 'chars' }",
          "code_completion_hint": "function(){ FindLastNotOf }",
          "code_insight_hint": "function(){ Function FindLastNotOf(chars As String) As Integer }"
        },
        {
          "name": "FindLastOf",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Searches for the last character that is equal to any character within 'chars' }",
          "code_completion_hint": "function(){ FindLastOf }",
          "code_insight_hint": "function(){ Function FindLastOf(chars As String) As Integer }"
        },
        {
          "name": "GetChar",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Returns the character at 'pos' }",
          "code_completion_hint": "function(){ GetChar }",
          "code_insight_hint": "function(){ Function GetChar(pos As Integer) As String }"
        },
        {
          "name": "GetSubstring",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Returns a substring }",
          "code_completion_hint": "function(){ GetSubstring }",
          "code_insight_hint": "function(){ Function GetSubstring(pos As Integer, len As Integer) As String }"
        },
        {
          "name": "Insert",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Inserts 'str' before position 'pos'",
          "code_completion_hint": "Insert",
          "code_insight_hint": "Sub Insert(pos As Integer, str As String)"
        },
        {
          "name": "Join",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Concatenates individual strings",
          "code_completion_hint": "Join",
          "code_insight_hint": "Sub Join(strings As Array[String], joiner As String)"
        },
        {
          "name": "Left",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Extracts 'len' characters from the left end of the string }",
          "code_completion_hint": "function(){ Left }",
          "code_insight_hint": "function(){ Function Left(len As Integer) As String }"
        },
        {
          "name": "MakeLower",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Converts the string to an lower-case string",
          "code_completion_hint": "MakeLower",
          "code_insight_hint": "Sub MakeLower()"
        },
        {
          "name": "MakeUpper",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Converts the string to an upper-case string",
          "code_completion_hint": "MakeUpper",
          "code_insight_hint": "Sub MakeUpper()"
        },
        {
          "name": "Match",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if the regular expression 'regex' is found int the string }",
          "code_completion_hint": "function(){ Match }",
          "code_insight_hint": "function(){ Function Match(regex As String) As Boolean }"
        },
        {
          "name": "PadLeft",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Right-aligns the characters of the string",
          "code_completion_hint": "PadLeft",
          "code_insight_hint": "Sub PadLeft(totalWidth As Integer, paddingChar As String)"
        },
        {
          "name": "PadRight",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Left-aligns the characters of the string",
          "code_completion_hint": "PadRight",
          "code_insight_hint": "Sub PadRight(totalWidth As Integer, paddingChar As String)"
        },
        {
          "name": "Prepend",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Inserts 'str' at the beginning of the string",
          "code_completion_hint": "Prepend",
          "code_insight_hint": "Sub Prepend(str As String)"
        },
        {
          "name": "Replace",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Replaces the substring specified by 'pos' and 'len' with 'str'",
          "code_completion_hint": "Replace",
          "code_insight_hint": "Sub Replace(pos As Integer, len As Integer, str As String)"
        },
        {
          "name": "ReplaceChar",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Replaces the character at 'pos' with 'str'",
          "code_completion_hint": "ReplaceChar",
          "code_insight_hint": "Sub ReplaceChar(pos As Integer, str As String)"
        },
        {
          "name": "RFind",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Searches backward for a substring }",
          "code_completion_hint": "function(){ RFind }",
          "code_insight_hint": "function(){ Function RFind(substring As String) As Integer }"
        },
        {
          "name": "Right",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "function(){ Extracts 'len' characters from the right end of the string }",
          "code_completion_hint": "function(){ Right }",
          "code_insight_hint": "function(){ Function Right(len As Integer) As String }"
        },
        {
          "name": "Split",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Splits a string into substrings; if 'separators' is empty, whitespace sequences act as separators. Example:; ; dim a as string = \"Monday Thuesday Wednesday\"; dim b as array[string] ; a.split(\" \",b) ; ; b will be [\"Monday\",\"Thuesday\",\"Wednesday\"]",
          "code_completion_hint": "Split",
          "code_insight_hint": "Sub Split(separators As String, [out] result As Array[String])"
        },
        {
          "name": "StartsWith",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ Returns true if the string starts with 'str' }",
          "code_completion_hint": "function(){ StartsWith }",
          "code_insight_hint": "function(){ Function StartsWith(str As String) As Boolean }"
        },
        {
          "name": "Substitute",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ Replaces 'regex' with 'subst'. If 'global' is true, all occurences of 'regex' are replaced. Otherwise, only the first occurrece is replaced. }",
          "code_completion_hint": "function(){ Substitute }",
          "code_insight_hint": "function(){ Function Substitute(regex As String, subst As String, global As Boolean) As Integer }"
        },
        {
          "name": "TclSplit",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Splits a string TCL-style-wise, using whitespace as separators (TCL-style means: Braced and double-quoted strings are never split even if they contain whitespace).",
          "code_completion_hint": "TclSplit",
          "code_insight_hint": "Sub TclSplit([out] result As Array[String])"
        },
        {
          "name": "Trim",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Removes whitspace characters from both ends of the string",
          "code_completion_hint": "Trim",
          "code_insight_hint": "Sub Trim()"
        },
        {
          "name": "Utf8ToAnsi",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Converts a UTF-8 encoded string to ANSI (using the system code-page).",
          "code_completion_hint": "Utf8ToAnsi",
          "code_insight_hint": "Sub Utf8ToAnsi()"
        }
      ]
    },
    {
      "name": "StringMap",
      "description": "An associative array that maps strings to Variant objects. Use the index operator [] to access individual elements.",
      "properties": [],
      "member_methods": [
        {
          "name": "Clear",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "Clear",
          "code_insight_hint": "Sub Clear()"
        },
        {
          "name": "ContainsKey",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){}",
          "code_completion_hint": "function(){ ContainsKey }",
          "code_insight_hint": "function(){ Function ContainsKey(key As String) As Boolean }"
        },
        {
          "name": "DeleteKey",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "DeleteKey",
          "code_insight_hint": "Sub DeleteKey(key As String)"
        },
        {
          "name": "GetKeys",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Fills the passed array with all defined keys.",
          "code_completion_hint": "GetKeys",
          "code_insight_hint": "Sub GetKeys(keys As Array[String])"
        }
      ]
    },
    {
      "name": "Texture",
      "description": "A container's texture object.",
      "properties": [
        {
          "name": "Active",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "",
          "code_completion_hint": "Active",
          "code_insight_hint": "Active As Boolean"
        },
        {
          "name": "EffectType",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The effect type:; TX_EFFECT_BLUR; TX_EFFECT_MOSAIC",
          "code_completion_hint": "EffectType",
          "code_insight_hint": "EffectType As Integer"
        },
        {
          "name": "EffectValue",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The effect value as an integer ranging 0-100",
          "code_completion_hint": "EffectValue",
          "code_insight_hint": "EffectValue As Integer"
        },
        {
          "name": "EffectValueDouble",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The effect value as a double ranging 0.0-100.0",
          "code_completion_hint": "EffectValueDouble",
          "code_insight_hint": "EffectValueDouble As Double"
        },
        {
          "name": "EnvironmentType",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The environment type:; TX_ENV_BLEND; TX_ENV_DECAL; TX_ENV_MODULATE",
          "code_completion_hint": "EnvironmentType",
          "code_insight_hint": "EnvironmentType As Integer"
        },
        {
          "name": "MapPosition",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "The mapping position",
          "code_completion_hint": "MapPosition",
          "code_insight_hint": "MapPosition As Vertex"
        },
        {
          "name": "MapRotation",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "The mapping rotation",
          "code_completion_hint": "MapRotation",
          "code_insight_hint": "MapRotation As Vertex"
        },
        {
          "name": "MapScaling",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "The mapping scaling",
          "code_completion_hint": "MapScaling",
          "code_insight_hint": "MapScaling As Vertex"
        },
        {
          "name": "MapType",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The mapping type:; TX_MAP_VERTEX; TX_MAP_LINEAR; TX_MAP_REFLECT; TX_MAP_SPHERICAL; TX_MAP_CYLINDRICAL; TX_MAP_CUBE",
          "code_completion_hint": "MapType",
          "code_insight_hint": "MapType As Integer"
        },
        {
          "name": "QualityType",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The quality type:; TX_QUAL_PIXEL; TX_QUAL_LINEAR; TX_QUAL_MIPMAP; TX_QUAL_SHARPEN",
          "code_completion_hint": "QualityType",
          "code_insight_hint": "QualityType As Integer"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "SharpenValue",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The sharpen value as an integer ranging 0-100",
          "code_completion_hint": "SharpenValue",
          "code_insight_hint": "SharpenValue As Integer"
        },
        {
          "name": "SharpenValueDouble",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The sharpen value as a double ranging 0.0-100.0",
          "code_completion_hint": "SharpenValueDouble",
          "code_insight_hint": "SharpenValueDouble As Double"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        },
        {
          "name": "WrapType",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "The wrap type:; TX_WRAP_REPEAT; TX_WRAP_CLAMP",
          "code_completion_hint": "WrapType",
          "code_insight_hint": "WrapType As Integer"
        },
        {
          "name": "Image",
          "deprecated": "true",
          "return_value_scope": "Image",
          "description": "Deprecated.",
          "code_completion_hint": "Image",
          "code_insight_hint": "Image As Image"
        }
      ],
      "member_methods": [
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    },
    {
      "name": "Uuid",
      "description": "A Universally Unique Identifier.",
      "properties": [
        {
          "name": "FullString",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "Returns the uuid as a string, enclosed in angle brackets, e.g. &ldquo;7410EF6B-4271-4EFA-8E8E30212D9AD2A5&rdquo;.",
          "code_completion_hint": "FullString",
          "code_insight_hint": "FullString As String [read-only]"
        },
        {
          "name": "String",
          "deprecated": "false",
          "return_value_scope": "String",
          "description": "Returns the uuid as a string, e.g. &ldquo;7410EF6B-4271-4EFA-8E8E30212D9AD2A5&rdquo;.",
          "code_completion_hint": "String",
          "code_insight_hint": "String As String [read-only]"
        }
      ],
      "member_methods": {
        "method": {
          "name": "GenerateNewUuid",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Generates a new UUID.",
          "code_completion_hint": "GenerateNewUuid",
          "code_insight_hint": "Sub GenerateNewUuid()"
        }
      }
    },
    {
      "name": "Variant",
      "description": "A variant type. Objects of this type can hold objects of any other type.",
      "properties": [],
      "member_methods": []
    },
    {
      "name": "Vertex",
      "description": "A vertex/vector consisting of 3 double components. The components can be accessed either via the x, y and z members, or using the index operator []. For example, v.y and v[1] both refer to the y component.",
      "properties": [
        {
          "name": "X",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The x component",
          "code_completion_hint": "X",
          "code_insight_hint": "X As Double"
        },
        {
          "name": "Y",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The y component",
          "code_completion_hint": "Y",
          "code_insight_hint": "Y As Double"
        },
        {
          "name": "Z",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "The z component",
          "code_completion_hint": "Z",
          "code_insight_hint": "Z As Double"
        }
      ],
      "member_methods": [
        {
          "name": "DistanceToLine",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ DistanceToLine }",
          "code_insight_hint": "function(){ Function DistanceToLine(linePoint1 As Vertex, linePoint2 As Vertex) As Double }"
        },
        {
          "name": "DistanceToPlane",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ DistanceToPlane }",
          "code_insight_hint": "function(){ Function DistanceToPlane(planeNormal As Vertex, planePoint As Vertex) As Double }"
        },
        {
          "name": "DistanceToPlaneSigned",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){}",
          "code_completion_hint": "function(){ DistanceToPlaneSigned }",
          "code_insight_hint": "function(){ Function DistanceToPlaneSigned(planeNormal As Vertex, planePoint As Vertex) As Double }"
        },
        {
          "name": "MirrorAroundLine",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){}",
          "code_completion_hint": "function(){ MirrorAroundLine }",
          "code_insight_hint": "function(){ Function MirrorAroundLine(linePoint1 As Vertex, linePoint2 As Vertex) As Vertex }"
        },
        {
          "name": "MirrorAroundVector",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){}",
          "code_completion_hint": "function(){ MirrorAroundVector }",
          "code_insight_hint": "function(){ Function MirrorAroundVector(v As Vertex) As Vertex }"
        },
        {
          "name": "Norm",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns the length of the vector. }",
          "code_completion_hint": "function(){ Norm }",
          "code_insight_hint": "function(){ Function Norm() As Double }"
        },
        {
          "name": "Normalize",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Normalizes the vertex, i.e. scales it to length 1. }",
          "code_completion_hint": "function(){ Normalize }",
          "code_insight_hint": "function(){ Function Normalize() As Double }"
        },
        {
          "name": "Project",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){}",
          "code_completion_hint": "function(){ Project }",
          "code_insight_hint": "function(){ Function Project(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer) As Boolean }"
        },
        {
          "name": "Project",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){}",
          "code_completion_hint": "function(){ Project }",
          "code_insight_hint": "function(){ Function Project(mat As Matrix, halfwidth As Integer, halfweight As Integer) As Boolean }"
        },
        {
          "name": "ProjectOnLine",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){}",
          "code_completion_hint": "function(){ ProjectOnLine }",
          "code_insight_hint": "function(){ Function ProjectOnLine(linePoint1 As Vertex, linePoint2 As Vertex) As Vertex }"
        },
        {
          "name": "ProjectOnVector",
          "deprecated": "false",
          "return_value_scope": "Vertex",
          "description": "function(){}",
          "code_completion_hint": "function(){ ProjectOnVector }",
          "code_insight_hint": "function(){ Function ProjectOnVector(v As Vertex) As Vertex }"
        },
        {
          "name": "SquaredNorm",
          "deprecated": "false",
          "return_value_scope": "Double",
          "description": "function(){ Returns the squared length of the vector. }",
          "code_completion_hint": "function(){ SquaredNorm }",
          "code_insight_hint": "function(){ Function SquaredNorm() As Double }"
        },
        {
          "name": "Unproject",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "",
          "code_completion_hint": "Unproject",
          "code_insight_hint": "Sub Unproject(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer)"
        },
        {
          "name": "Unproject",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){}",
          "code_completion_hint": "function(){ Unproject }",
          "code_insight_hint": "function(){ Function Unproject(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer, plane1 As Vertex, plane2 As Vertex, plane3 As Vertex) As Boolean }"
        },
        {
          "name": "GlNormal",
          "deprecated": "true",
          "return_value_scope": "",
          "description": "Deprecated.",
          "code_completion_hint": "GlNormal",
          "code_insight_hint": "Sub GlNormal()"
        },
        {
          "name": "GlVertex",
          "deprecated": "true",
          "return_value_scope": "",
          "description": "Deprecated.",
          "code_completion_hint": "GlVertex",
          "code_insight_hint": "Sub GlVertex()"
        }
      ]
    },
    {
      "name": "VizCommunication",
      "description": "This class maintains a group of viz hosts that you can simultaneously send commands to. In addition, there is a SharedMemory member (Map) that shares its data among all engines connected to the database.",
      "properties": [
        {
          "name": "Map",
          "deprecated": "false",
          "return_value_scope": "SharedMemory",
          "description": "Distributed shared memory map. Note that other viz machines are notified of changes made to this map only if they running at the time the change is made.",
          "code_completion_hint": "Map",
          "code_insight_hint": "Map As SharedMemory [read-only]"
        },
        {
          "name": "Scene",
          "deprecated": "false",
          "return_value_scope": "Scene",
          "description": "(Inherited from Base) Gets the current scene.",
          "code_completion_hint": "Scene",
          "code_insight_hint": "Scene As Scene [read-only]"
        },
        {
          "name": "Stage",
          "deprecated": "false",
          "return_value_scope": "Stage",
          "description": "(Inherited from Base) Gets the current stage.",
          "code_completion_hint": "Stage",
          "code_insight_hint": "Stage As Stage [read-only]"
        },
        {
          "name": "System",
          "deprecated": "false",
          "return_value_scope": "System",
          "description": "(Inherited from Base) Gets system wide data.",
          "code_completion_hint": "System",
          "code_insight_hint": "System As System [read-only]"
        },
        {
          "name": "VizCommunication",
          "deprecated": "false",
          "return_value_scope": "VizCommunication",
          "description": "(Inherited from Base) Gets the VizCommunication object.",
          "code_completion_hint": "VizCommunication",
          "code_insight_hint": "VizCommunication As VizCommunication [read-only]"
        },
        {
          "name": "VizId",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "(Inherited from Base) Gets or sets the internal id of this object.",
          "code_completion_hint": "VizId",
          "code_insight_hint": "VizId As Integer"
        }
      ],
      "member_methods": [
        {
          "name": "AddHostToGroup",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Adds a hostname to the group of hostnames.",
          "code_completion_hint": "AddHostToGroup",
          "code_insight_hint": "Sub AddHostToGroup(hostname As String, port As Integer)"
        },
        {
          "name": "ClearHostGroup",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Clears the group of hostnames.",
          "code_completion_hint": "ClearHostGroup",
          "code_insight_hint": "Sub ClearHostGroup()"
        },
        {
          "name": "FindChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\". }",
          "code_completion_hint": "function(){ FindChannelOfObject }",
          "code_insight_hint": "function(){ Function FindChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "FindKeyframeOfObject",
          "deprecated": "false",
          "return_value_scope": "Keyframe",
          "description": "function(){ (Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\". }",
          "code_completion_hint": "function(){ FindKeyframeOfObject }",
          "code_insight_hint": "function(){ Function FindKeyframeOfObject(keyframeName As String) As Keyframe }"
        },
        {
          "name": "FindOrCreateChannelOfObject",
          "deprecated": "false",
          "return_value_scope": "Channel",
          "description": "function(){ (Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created. }",
          "code_completion_hint": "function(){ FindOrCreateChannelOfObject }",
          "code_insight_hint": "function(){ Function FindOrCreateChannelOfObject(channelName As String) As Channel }"
        },
        {
          "name": "GetChannelsOfObject",
          "deprecated": "false",
          "return_value_scope": "Integer",
          "description": "function(){ (Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty. }",
          "code_completion_hint": "function(){ GetChannelsOfObject }",
          "code_insight_hint": "function(){ Function GetChannelsOfObject([out] v As Array[Channel]) As Integer }"
        },
        {
          "name": "IsAnimated",
          "deprecated": "false",
          "return_value_scope": "Boolean",
          "description": "function(){ (Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false. }",
          "code_completion_hint": "function(){ IsAnimated }",
          "code_insight_hint": "function(){ Function IsAnimated() As Boolean }"
        },
        {
          "name": "SendVizCommandToHostGroup",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "Sends a viz command to the group of hostnames (which was previously filled by calls to AddHostToGroup).",
          "code_completion_hint": "SendVizCommandToHostGroup",
          "code_insight_hint": "Sub SendVizCommandToHostGroup(command As String)"
        },
        {
          "name": "SetChanged",
          "deprecated": "false",
          "return_value_scope": "",
          "description": "(Inherited from Base) Mark this object as changed.",
          "code_completion_hint": "SetChanged",
          "code_insight_hint": "Sub SetChanged()"
        }
      ]
    }
  ]
}