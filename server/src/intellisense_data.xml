<intellisense>
	<scopes>
		<scope name="Global Procedures">
			<description />
			<properties />
			<member_methods>
				<method name="Abs" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Abs</code_completion_hint>
					<code_insight_hint>Function Abs(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Acos" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Acos</code_completion_hint>
					<code_insight_hint>Function Acos(x As Double) As Double</code_insight_hint>
				</method>
				<method name="AngleBetweenVectors" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>AngleBetweenVectors</code_completion_hint>
					<code_insight_hint>Function AngleBetweenVectors(v1 As Vertex, v2 As Vertex) As Double</code_insight_hint>
				</method>
				<method name="Asc" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Returns the ASCII/UTF8 code (0-255) for the specified character.</description>
					<code_completion_hint>Asc</code_completion_hint>
					<code_insight_hint>Function Asc(s As String) As Integer</code_insight_hint>
				</method>
				<method name="Asin" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Asin</code_completion_hint>
					<code_insight_hint>Function Asin(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Atan" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Atan</code_completion_hint>
					<code_insight_hint>Function Atan(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Atan2" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Atan2</code_completion_hint>
					<code_insight_hint>Function Atan2(x As Double, y As Double) As Double</code_insight_hint>
				</method>
				<method name="CBool" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Converts an integer to a boolean.</description>
					<code_completion_hint>CBool</code_completion_hint>
					<code_insight_hint>Function CBool(v As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="CBool" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Converts a double to a boolean.</description>
					<code_completion_hint>CBool</code_completion_hint>
					<code_insight_hint>Function CBool(v As Double) As Boolean</code_insight_hint>
				</method>
				<method name="CBool" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Converts a UUID to a boolean.</description>
					<code_completion_hint>CBool</code_completion_hint>
					<code_insight_hint>Function CBool(v As Uuid) As Boolean</code_insight_hint>
				</method>
				<method name="CColor" type="Function" deprecated="false" return_value_scope="Color">
					<description>Constructs a a color object.</description>
					<code_completion_hint>CColor</code_completion_hint>
					<code_insight_hint>Function CColor(r As Double, g As Double, b As Double) As Color</code_insight_hint>
				</method>
				<method name="CColor" type="Function" deprecated="false" return_value_scope="Color">
					<description>Constructs a a color object.</description>
					<code_completion_hint>CColor</code_completion_hint>
					<code_insight_hint>Function CColor(r As Double, g As Double, b As Double, a As Double) As Color</code_insight_hint>
				</method>
				<method name="CDbl" type="Function" deprecated="false" return_value_scope="Double">
					<description>Converts a boolean to a double.</description>
					<code_completion_hint>CDbl</code_completion_hint>
					<code_insight_hint>Function CDbl(v As Boolean) As Double</code_insight_hint>
				</method>
				<method name="CDbl" type="Function" deprecated="false" return_value_scope="Double">
					<description>Converts an integer to a double.</description>
					<code_completion_hint>CDbl</code_completion_hint>
					<code_insight_hint>Function CDbl(v As Integer) As Double</code_insight_hint>
				</method>
				<method name="CDbl" type="Function" deprecated="false" return_value_scope="Double">
					<description>Converts a string to a double.</description>
					<code_completion_hint>CDbl</code_completion_hint>
					<code_insight_hint>Function CDbl(v As String) As Double</code_insight_hint>
				</method>
				<method name="Ceil" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns the smallest integer that is larger than or equal to x.</description>
					<code_completion_hint>Ceil</code_completion_hint>
					<code_insight_hint>Function Ceil(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Chr" type="Function" deprecated="false" return_value_scope="String">
					<description>Returns the character associated with the specified ASCII/UTF8 code (0-255).</description>
					<code_completion_hint>Chr</code_completion_hint>
					<code_insight_hint>Function Chr(charCode As Integer) As String</code_insight_hint>
				</method>
				<method name="CInt" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Converts a boolean to an integer.</description>
					<code_completion_hint>CInt</code_completion_hint>
					<code_insight_hint>Function CInt(v As Boolean) As Integer</code_insight_hint>
				</method>
				<method name="CInt" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Converts a double to an integer.</description>
					<code_completion_hint>CInt</code_completion_hint>
					<code_insight_hint>Function CInt(v As Double) As Integer</code_insight_hint>
				</method>
				<method name="CInt" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Converts a string to an integer.</description>
					<code_completion_hint>CInt</code_completion_hint>
					<code_insight_hint>Function CInt(v As String) As Integer</code_insight_hint>
				</method>
				<method name="Cos" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Cos</code_completion_hint>
					<code_insight_hint>Function Cos(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Cosh" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Cosh</code_completion_hint>
					<code_insight_hint>Function Cosh(x As Double) As Double</code_insight_hint>
				</method>
				<method name="CStr" type="Function" deprecated="false" return_value_scope="String">
					<description>Converts a boolean to a string.</description>
					<code_completion_hint>CStr</code_completion_hint>
					<code_insight_hint>Function CStr(v As Boolean) As String</code_insight_hint>
				</method>
				<method name="CStr" type="Function" deprecated="false" return_value_scope="String">
					<description>Converts a integer to a string.</description>
					<code_completion_hint>CStr</code_completion_hint>
					<code_insight_hint>Function CStr(v As Integer) As String</code_insight_hint>
				</method>
				<method name="CStr" type="Function" deprecated="false" return_value_scope="String">
					<description>Converts a double to a string.</description>
					<code_completion_hint>CStr</code_completion_hint>
					<code_insight_hint>Function CStr(v As Double) As String</code_insight_hint>
				</method>
				<method name="CStr" type="Function" deprecated="false" return_value_scope="String">
					<description>Converts a UUID to a string.</description>
					<code_completion_hint>CStr</code_completion_hint>
					<code_insight_hint>Function CStr(v As Uuid) As String</code_insight_hint>
				</method>
				<method name="CUuid" type="Function" deprecated="false" return_value_scope="Uuid">
					<description>Constructs a uuid from a string value.</description>
					<code_completion_hint>CUuid</code_completion_hint>
					<code_insight_hint>Function CUuid(v As String) As Uuid</code_insight_hint>
				</method>
				<method name="CVertex" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Constructs a vertex from a bool value, assigning the value to x, y, and z.</description>
					<code_completion_hint>CVertex</code_completion_hint>
					<code_insight_hint>Function CVertex(v As Boolean) As Vertex</code_insight_hint>
				</method>
				<method name="CVertex" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Constructs a vertex from an integer value, assigning the value to x, y, and z.</description>
					<code_completion_hint>CVertex</code_completion_hint>
					<code_insight_hint>Function CVertex(v As Integer) As Vertex</code_insight_hint>
				</method>
				<method name="CVertex" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Constructs a vertex from an double value, assigning the value to x, y, and z.</description>
					<code_completion_hint>CVertex</code_completion_hint>
					<code_insight_hint>Function CVertex(v As Double) As Vertex</code_insight_hint>
				</method>
				<method name="CVertex" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Constructs a vertex from 3 double values.</description>
					<code_completion_hint>CVertex</code_completion_hint>
					<code_insight_hint>Function CVertex(x As Double, y As Double, z As Double) As Vertex</code_insight_hint>
				</method>
				<method name="Determinant" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Determinant</code_completion_hint>
					<code_insight_hint>Function Determinant(a As Vertex, b As Vertex, c As Vertex) As Double</code_insight_hint>
				</method>
				<method name="Distance" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns the distance between two vertices.</description>
					<code_completion_hint>Distance</code_completion_hint>
					<code_insight_hint>Function Distance(v1 As Vertex, v2 As Vertex) As Double</code_insight_hint>
				</method>
				<method name="Distance2" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns the squared distance between two vertices.</description>
					<code_completion_hint>Distance2</code_completion_hint>
					<code_insight_hint>Function Distance2(v1 As Vertex, v2 As Vertex) As Double</code_insight_hint>
				</method>
				<method name="DoubleToString" type="Function" deprecated="false" return_value_scope="String">
					<description>Converts a double value to a string.</description>
					<code_completion_hint>DoubleToString</code_completion_hint>
					<code_insight_hint>Function DoubleToString(value As Double, precision As Integer) As String</code_insight_hint>
				</method>
				<method name="DoubleToString" type="Function" deprecated="false" return_value_scope="String">
					<description>Converts a double value to a string.</description>
					<code_completion_hint>DoubleToString</code_completion_hint>
					<code_insight_hint>Function DoubleToString(value As Double, precision As Integer, width As Integer) As String</code_insight_hint>
				</method>
				<method name="Exp" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Exp</code_completion_hint>
					<code_insight_hint>Function Exp(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Fix" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns Floor(x) if x larger than or equal to 0.0, otherwise Ceil(x).</description>
					<code_completion_hint>Fix</code_completion_hint>
					<code_insight_hint>Function Fix(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Floor" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns the largest integer that is smaller than or equal to x.</description>
					<code_completion_hint>Floor</code_completion_hint>
					<code_insight_hint>Function Floor(x As Double) As Double</code_insight_hint>
				</method>
				<method name="GetCurrentTime" type="Function" deprecated="false" return_value_scope="DateTime">
					<description>Gets the current time.</description>
					<code_completion_hint>GetCurrentTime</code_completion_hint>
					<code_insight_hint>Function GetCurrentTime() As DateTime</code_insight_hint>
				</method>
				<method name="GetParameterBool" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns the value of the Boolean parameter parameterName.</description>
					<code_completion_hint>GetParameterBool</code_completion_hint>
					<code_insight_hint>Function GetParameterBool(parameterName As String) As Boolean</code_insight_hint>
				</method>
				<method name="GetParameterColor" type="Function" deprecated="false" return_value_scope="Color">
					<description>Returns the value of the Color parameter parameterName.</description>
					<code_completion_hint>GetParameterColor</code_completion_hint>
					<code_insight_hint>Function GetParameterColor(parameterName As String) As Color</code_insight_hint>
				</method>
				<method name="GetParameterContainer" type="Function" deprecated="false" return_value_scope="Container">
					<description>Returns the value of the Container parameter parameterName.</description>
					<code_completion_hint>GetParameterContainer</code_completion_hint>
					<code_insight_hint>Function GetParameterContainer(parameterName As String) As Container</code_insight_hint>
				</method>
				<method name="GetParameterDouble" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns the value of the Double parameter parameterName.</description>
					<code_completion_hint>GetParameterDouble</code_completion_hint>
					<code_insight_hint>Function GetParameterDouble(parameterName As String) As Double</code_insight_hint>
				</method>
				<method name="GetParameterInt" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Returns the value of the Integer parameter parameterName.</description>
					<code_completion_hint>GetParameterInt</code_completion_hint>
					<code_insight_hint>Function GetParameterInt(parameterName As String) As Integer</code_insight_hint>
				</method>
				<method name="GetParameterString" type="Function" deprecated="false" return_value_scope="String">
					<description>Returns the value of the String parameter parameterName.</description>
					<code_completion_hint>GetParameterString</code_completion_hint>
					<code_insight_hint>Function GetParameterString(parameterName As String) As String</code_insight_hint>
				</method>
				<method name="GetTickCount" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Returns the processor time in milliseconds. Note that the timing resolution provided by this procedure is fairly low. For more accurate timing, use System.GetElapsedTime() instead.</description>
					<code_completion_hint>GetTickCount</code_completion_hint>
					<code_insight_hint>Function GetTickCount() As Integer</code_insight_hint>
				</method>
				<method name="Int" type="Function" deprecated="false" return_value_scope="Double">
					<description>Identical to Floor.</description>
					<code_completion_hint>Int</code_completion_hint>
					<code_insight_hint>Function Int(x As Double) As Double</code_insight_hint>
				</method>
				<method name="IntToString" type="Function" deprecated="false" return_value_scope="String">
					<description>Converts an integer value to a right-aligned string, filling empty space with blanks.</description>
					<code_completion_hint>IntToString</code_completion_hint>
					<code_insight_hint>Function IntToString(value As Integer, width As Integer) As String</code_insight_hint>
				</method>
				<method name="IntToString" type="Function" deprecated="false" return_value_scope="String">
					<description>Converts an integer value to a right-aligned string, filling empty space with blanks or (if addLeadingZeros is true) with zeros.</description>
					<code_completion_hint>IntToString</code_completion_hint>
					<code_insight_hint>Function IntToString(value As Integer, width As Integer, addLeadingZeros As Boolean) As String</code_insight_hint>
				</method>
				<method name="Len" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Returns the length of the specified string.</description>
					<code_completion_hint>Len</code_completion_hint>
					<code_insight_hint>Function Len(s As String) As Integer</code_insight_hint>
				</method>
				<method name="LineLineIntersection" type="Function" deprecated="false" return_value_scope="Vertex">
					<description> </description>
					<code_completion_hint>LineLineIntersection</code_completion_hint>
					<code_insight_hint>Function LineLineIntersection(line1Point As Vertex, line1Direction As Vertex, line2Point As Vertex, line2Direction As Vertex) As Vertex</code_insight_hint>
				</method>
				<method name="Log" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Log</code_completion_hint>
					<code_insight_hint>Function Log(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Max" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Returns the larger of the two values.</description>
					<code_completion_hint>Max</code_completion_hint>
					<code_insight_hint>Function Max(a As Integer, b As Integer) As Integer</code_insight_hint>
				</method>
				<method name="Max" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns the larger of the two values.</description>
					<code_completion_hint>Max</code_completion_hint>
					<code_insight_hint>Function Max(a As Double, b As Double) As Double</code_insight_hint>
				</method>
				<method name="Min" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns the smaller of the two values.</description>
					<code_completion_hint>Min</code_completion_hint>
					<code_insight_hint>Function Min(a As Double, b As Double) As Double</code_insight_hint>
				</method>
				<method name="Min" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Returns the smaller of the two values.</description>
					<code_completion_hint>Min</code_completion_hint>
					<code_insight_hint>Function Min(a As Integer, b As Integer) As Integer</code_insight_hint>
				</method>
				<method name="PlaneLineIntersection" type="Function" deprecated="false" return_value_scope="Vertex">
					<description> </description>
					<code_completion_hint>PlaneLineIntersection</code_completion_hint>
					<code_insight_hint>Function PlaneLineIntersection(planePoint As Vertex, planeNormal As Vertex, linePoint As Vertex, lineDirection As Vertex) As Vertex</code_insight_hint>
				</method>
				<method name="Println" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Prints a vertex.</description>
					<code_completion_hint>Println</code_completion_hint>
					<code_insight_hint>Sub Println(v As Vertex)</code_insight_hint>
				</method>
				<method name="Println" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Prints a newline.</description>
					<code_completion_hint>Println</code_completion_hint>
					<code_insight_hint>Sub Println()</code_insight_hint>
				</method>
				<method name="Println" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Prints a boolean.</description>
					<code_completion_hint>Println</code_completion_hint>
					<code_insight_hint>Sub Println(v As Boolean)</code_insight_hint>
				</method>
				<method name="Println" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Prints an integer.</description>
					<code_completion_hint>Println</code_completion_hint>
					<code_insight_hint>Sub Println(v As Integer)</code_insight_hint>
				</method>
				<method name="Println" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Prints a double.</description>
					<code_completion_hint>Println</code_completion_hint>
					<code_insight_hint>Sub Println(v As Double)</code_insight_hint>
				</method>
				<method name="Println" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Prints a string.</description>
					<code_completion_hint>Println</code_completion_hint>
					<code_insight_hint>Sub Println(v As String)</code_insight_hint>
				</method>
				<method name="Println" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Prints an object of type Variant.</description>
					<code_completion_hint>Println</code_completion_hint>
					<code_insight_hint>Sub Println(v As Variant)</code_insight_hint>
				</method>
				<method name="Println" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Prints a uuid.</description>
					<code_completion_hint>Println</code_completion_hint>
					<code_insight_hint>Sub Println(v As Uuid)</code_insight_hint>
				</method>
				<method name="Random" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns a random number of type double in the range [0, 1).</description>
					<code_completion_hint>Random</code_completion_hint>
					<code_insight_hint>Function Random() As Double</code_insight_hint>
				</method>
				<method name="Random" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Returns a random integer in the range 0 through i-1.</description>
					<code_completion_hint>Random</code_completion_hint>
					<code_insight_hint>Function Random(i As Integer) As Integer</code_insight_hint>
				</method>
				<method name="RegisterDirSelector" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a directory parameter.</description>
					<code_completion_hint>RegisterDirSelector</code_completion_hint>
					<code_insight_hint>Sub RegisterDirSelector(parameterName As String, label As String, default As String)</code_insight_hint>
				</method>
				<method name="RegisterFileSelector" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a file parameter.</description>
					<code_completion_hint>RegisterFileSelector</code_completion_hint>
					<code_insight_hint>Sub RegisterFileSelector(parameterName As String, label As String, defaultPath As String, defaultFile As String, filter As String)</code_insight_hint>
				</method>
				<method name="RegisterInfoText" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Call this function to provide documentation for the script (accessible via the 'i'-button).</description>
					<code_completion_hint>RegisterInfoText</code_completion_hint>
					<code_insight_hint>Sub RegisterInfoText(infoText As String)</code_insight_hint>
				</method>
				<method name="RegisterParameterBool" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a parameter of type Boolean.</description>
					<code_completion_hint>RegisterParameterBool</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterBool(parameterName As String, label As String, defaultName As Boolean)</code_insight_hint>
				</method>
				<method name="RegisterParameterColor" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a parameter of type Color.</description>
					<code_completion_hint>RegisterParameterColor</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterColor(parameterName As String, label As String, defaultValue As Color)</code_insight_hint>
				</method>
				<method name="RegisterParameterContainer" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a parameter of type Container.</description>
					<code_completion_hint>RegisterParameterContainer</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterContainer(parameterName As String, label As String)</code_insight_hint>
				</method>
				<method name="RegisterParameterDouble" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a parameter of type Double.</description>
					<code_completion_hint>RegisterParameterDouble</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterDouble(parameterName As String, label As String, defaultValue As Double, minValue As Double, maxValue As Double)</code_insight_hint>
				</method>
				<method name="RegisterParameterDropDown" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a dropdown box. width defines the parameter's width in number of characters and height sets the dropdown box's height in number of lines.</description>
					<code_completion_hint>RegisterParameterDropDown</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterDropDown(parameterName As String, label As String, default As Integer, entries As Array[String], width As Integer, height As Integer)</code_insight_hint>
				</method>
				<method name="RegisterParameterHList" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a list box. separatorChar defines the character which is used to separate the values. width and height are defined in pixels.</description>
					<code_completion_hint>RegisterParameterHList</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterHList(parameterName As String, label As String, default As Integer, entries As Array[String], separatorChar As String, width As Integer, height As Integer)</code_insight_hint>
				</method>
				<method name="RegisterParameterImage" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a parameter of type Image.</description>
					<code_completion_hint>RegisterParameterImage</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterImage(parameterName As String, label As String)</code_insight_hint>
				</method>
				<method name="RegisterParameterInt" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a parameter of type Integer.</description>
					<code_completion_hint>RegisterParameterInt</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterInt(parameterName As String, label As String, defaultValue As Integer, minValue As Integer, maxValue As Integer)</code_insight_hint>
				</method>
				<method name="RegisterParameterList" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a list box. width and height are defined in pixels.</description>
					<code_completion_hint>RegisterParameterList</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterList(parameterName As String, label As String, default As Integer, entries As Array[String], width As Integer, height As Integer)</code_insight_hint>
				</method>
				<method name="RegisterParameterSliderDouble" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a parameter of type Double with slider appearance. width specifies the parameter's width in pixels.</description>
					<code_completion_hint>RegisterParameterSliderDouble</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterSliderDouble(parameterName As String, label As String, defaultValue As Double, minValue As Double, maxValue As Double, width As Integer)</code_insight_hint>
				</method>
				<method name="RegisterParameterSliderInt" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a parameter of type Integer with slider appearance. width specifies the parameter's width in pixels.</description>
					<code_completion_hint>RegisterParameterSliderInt</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterSliderInt(parameterName As String, label As String, defaultValue As Integer, minValue As Integer, maxValue As Integer, width As Integer)</code_insight_hint>
				</method>
				<method name="RegisterParameterString" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a parameter of type String. If charSet is empty, all characters are allowed.</description>
					<code_completion_hint>RegisterParameterString</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterString(parameterName As String, label As String, defaultString As String, widgetSize As Integer, maxLength As Integer, charSet As String)</code_insight_hint>
				</method>
				<method name="RegisterParameterText" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a parameter of type String that is entered in a text box. width and height specify the size of the text box in pixels.</description>
					<code_completion_hint>RegisterParameterText</code_completion_hint>
					<code_insight_hint>Sub RegisterParameterText(parameterName As String, defaultText As String, width As Integer, height As Integer)</code_insight_hint>
				</method>
				<method name="RegisterPluginVersion" type="Subroutine" deprecated="false" return_value_scope="">
					<description>You can use this to set information about your script-plugin's version. It's recommended to set version numbers especially for VSL plugins.</description>
					<code_completion_hint>RegisterPluginVersion</code_completion_hint>
					<code_insight_hint>Sub RegisterPluginVersion(version As Integer, release As Integer, patchlevel As Integer)</code_insight_hint>
				</method>
				<method name="RegisterPushButton" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a push button.</description>
					<code_completion_hint>RegisterPushButton</code_completion_hint>
					<code_insight_hint>Sub RegisterPushButton(parameterName As String, label As String, buttonId As Integer)</code_insight_hint>
				</method>
				<method name="RegisterRadioButton" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Register a block of radio buttons.</description>
					<code_completion_hint>RegisterRadioButton</code_completion_hint>
					<code_insight_hint>Sub RegisterRadioButton(parameterName As String, label As String, defaultIndex As Integer, buttonNames As Array[String])</code_insight_hint>
				</method>
				<method name="Round" type="Function" deprecated="false" return_value_scope="Double">
					<description>Rounds x to the nearest integer</description>
					<code_completion_hint>Round</code_completion_hint>
					<code_insight_hint>Function Round(x As Double) As Double</code_insight_hint>
				</method>
				<method name="SendGuiParameterShow" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Shows or hides a parameter in the GUI. state can be set to SHOW or HIDE.</description>
					<code_completion_hint>SendGuiParameterShow</code_completion_hint>
					<code_insight_hint>Sub SendGuiParameterShow(parameterName As String, state As Integer)</code_insight_hint>
				</method>
				<method name="SendGuiParameterUpdate" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Enables or disables GUI parameter updates. state can be set to ENABLED or DISABLED.</description>
					<code_completion_hint>SendGuiParameterUpdate</code_completion_hint>
					<code_insight_hint>Sub SendGuiParameterUpdate(parameterName As String, state As Integer)</code_insight_hint>
				</method>
				<method name="SendGuiRefresh" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sends a refresh command to the GUI</description>
					<code_completion_hint>SendGuiRefresh</code_completion_hint>
					<code_insight_hint>Sub SendGuiRefresh()</code_insight_hint>
				</method>
				<method name="SendGuiStatus" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Enables or disables a parameter in the GUI. state can be set to ENABLED or DISABLED.</description>
					<code_completion_hint>SendGuiStatus</code_completion_hint>
					<code_insight_hint>Sub SendGuiStatus(parameterName As String, state As Integer)</code_insight_hint>
				</method>
				<method name="SetAnimateParameter" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Disable or enable animation on the last registered parameter.</description>
					<code_completion_hint>SetAnimateParameter</code_completion_hint>
					<code_insight_hint>Sub SetAnimateParameter(animate As Boolean)</code_insight_hint>
				</method>
				<method name="SetHideParameter" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Hides the last registered parameter in the GUI.</description>
					<code_completion_hint>SetHideParameter</code_completion_hint>
					<code_insight_hint>Sub SetHideParameter()</code_insight_hint>
				</method>
				<method name="Sign" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Returns -1 if x less than 0.0, 1 if x larger than 0.0, 0 if x equals 0.0.</description>
					<code_completion_hint>Sign</code_completion_hint>
					<code_insight_hint>Function Sign(x As Double) As Integer</code_insight_hint>
				</method>
				<method name="Sin" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Sin</code_completion_hint>
					<code_insight_hint>Function Sin(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Sinh" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Sinh</code_completion_hint>
					<code_insight_hint>Function Sinh(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Sqr" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns x*x.</description>
					<code_completion_hint>Sqr</code_completion_hint>
					<code_insight_hint>Function Sqr(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Sqrt" type="Function" deprecated="false" return_value_scope="Double">
					<description>Computes the square root of x.</description>
					<code_completion_hint>Sqrt</code_completion_hint>
					<code_insight_hint>Function Sqrt(x As Double) As Double</code_insight_hint>
				</method>
				<method name="Tan" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Tan</code_completion_hint>
					<code_insight_hint>Function Tan(x As Double) As Double</code_insight_hint>
				</method>
				<method name="TriangleArea" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>TriangleArea</code_completion_hint>
					<code_insight_hint>Function TriangleArea(a As Vertex, b As Vertex, c As Vertex) As Double</code_insight_hint>
				</method>
				<method name="TriangleCenter" type="Function" deprecated="false" return_value_scope="Vertex">
					<description> </description>
					<code_completion_hint>TriangleCenter</code_completion_hint>
					<code_insight_hint>Function TriangleCenter(a As Vertex, b As Vertex, c As Vertex) As Vertex</code_insight_hint>
				</method>
				<method name="UpdateGuiParameterDoubleDefMinMax" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets new default, min and max value for parameters like Double, SliderDouble etc.</description>
					<code_completion_hint>UpdateGuiParameterDoubleDefMinMax</code_completion_hint>
					<code_insight_hint>Sub UpdateGuiParameterDoubleDefMinMax(parameterName As String, defaultValue As Double, minValue As Double, maxValue As Double)</code_insight_hint>
				</method>
				<method name="UpdateGuiParameterEntries" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets new entries for parameters like List or DropDown</description>
					<code_completion_hint>UpdateGuiParameterEntries</code_completion_hint>
					<code_insight_hint>Sub UpdateGuiParameterEntries(parameterName As String, entries As Array[String])</code_insight_hint>
				</method>
				<method name="UpdateGuiParameterIntDefMinMax" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets new default, min and max value for parameters like Int, SliderInt etc.</description>
					<code_completion_hint>UpdateGuiParameterIntDefMinMax</code_completion_hint>
					<code_insight_hint>Sub UpdateGuiParameterIntDefMinMax(parameterName As String, defaultValue As Integer, minValue As Integer, maxValue As Integer)</code_insight_hint>
				</method>
				<method name="IsKeyDown" type="Function" deprecated="true" return_value_scope="Boolean">
					<description>Deprecated. Use System.IsKeyDown.</description>
					<code_completion_hint>IsKeyDown</code_completion_hint>
					<code_insight_hint>Function IsKeyDown(keyCode As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="IsLButtonDown" type="Function" deprecated="true" return_value_scope="Boolean">
					<description>Deprecated. System.LButtonState.</description>
					<code_completion_hint>IsLButtonDown</code_completion_hint>
					<code_insight_hint>Function IsLButtonDown() As Boolean</code_insight_hint>
				</method>
				<method name="IsMButtonDown" type="Function" deprecated="true" return_value_scope="Boolean">
					<description>Deprecated. System.MButtonState.</description>
					<code_completion_hint>IsMButtonDown</code_completion_hint>
					<code_insight_hint>Function IsMButtonDown() As Boolean</code_insight_hint>
				</method>
				<method name="IsRButtonDown" type="Function" deprecated="true" return_value_scope="Boolean">
					<description>Deprecated. System.RButtonState.</description>
					<code_completion_hint>IsRButtonDown</code_completion_hint>
					<code_insight_hint>Function IsRButtonDown() As Boolean</code_insight_hint>
				</method>
				<method name="SendCommand" type="Function" deprecated="true" return_value_scope="String">
					<description>Deprecated. Use System.SendCommand.</description>
					<code_completion_hint>SendCommand</code_completion_hint>
					<code_insight_hint>Function SendCommand(command As String) As String</code_insight_hint>
				</method>
				<method name="SendRemoteCommand" type="Function" deprecated="true" return_value_scope="String">
					<description>Deprecated. Use System.SendRemoteCommand.</description>
					<code_completion_hint>SendRemoteCommand</code_completion_hint>
					<code_insight_hint>Function SendRemoteCommand(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String</code_insight_hint>
				</method>
				<method name="TcpSend" type="Function" deprecated="true" return_value_scope="String">
					<description>Deprecated. Use System.TcpSend.</description>
					<code_completion_hint>TcpSend</code_completion_hint>
					<code_insight_hint>Function TcpSend(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Alpha">
			<description>An alpha object. This is used to control a container's alpha value.</description>
			<properties>
				<property name="Active" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>Active</code_completion_hint>
					<code_insight_hint>Active As Boolean</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="Value" type="Property" deprecated="false" return_value_scope="Double">
					<description>The alpha value [0.0, 100.0]</description>
					<code_completion_hint>Value</code_completion_hint>
					<code_insight_hint>Value As Double</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Array[Type]">
			<description>A dynamic, one-dimensional array. The element type must be specified in brackets. Use the index operator [] to access individual elements. Negative indices refer to elements at the end of the array.</description>
			<properties>
				<property name="LBound" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The index of the first elment (always 0)</description>
					<code_completion_hint>LBound</code_completion_hint>
					<code_insight_hint>LBound As Integer [read-only]</code_insight_hint>
				</property>
				<property name="Size" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The size of the array (this member can be set to change the size)</description>
					<code_completion_hint>Size</code_completion_hint>
					<code_insight_hint>Size As Integer</code_insight_hint>
				</property>
				<property name="UBound" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The index of the last elment (-1 if the array is empty)</description>
					<code_completion_hint>UBound</code_completion_hint>
					<code_insight_hint>UBound As Integer [read-only]</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="Clear" type="Subroutine" deprecated="false" return_value_scope="">
					<description>erases all elements</description>
					<code_completion_hint>Clear</code_completion_hint>
					<code_insight_hint>Sub Clear()</code_insight_hint>
				</method>
				<method name="Erase" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Erases the element at 'index'.</description>
					<code_completion_hint>Erase</code_completion_hint>
					<code_insight_hint>Sub Erase(index As Integer)</code_insight_hint>
				</method>
				<method name="Insert" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Inserts a new element at 'index'.</description>
					<code_completion_hint>Insert</code_completion_hint>
					<code_insight_hint>Sub Insert(index As Integer, element As Type)</code_insight_hint>
				</method>
				<method name="Pop" type="Subroutine" deprecated="false" return_value_scope="">
					<description>removes the last element</description>
					<code_completion_hint>Pop</code_completion_hint>
					<code_insight_hint>Sub Pop()</code_insight_hint>
				</method>
				<method name="Push" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Inserts a new element at the end of the array.</description>
					<code_completion_hint>Push</code_completion_hint>
					<code_insight_hint>Sub Push(element As Type)</code_insight_hint>
				</method>
				<method name="Sort" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Sorts the array. comparisonFunction must be the name of a user-defined comparison function that takes two arguments of type Type and returns an integer. The return value must be -1 if the the first arguement is smaller than the second, 1 if the first argument is greater than the second, and 0 if the arguments are equal. object is the this pointer passed to the comparison function. It may be null if the camparison function does not access any member variables. The comparison function must be defined in the same script as the Type (if it is a structure) or in the script where Sort is called.</description>
					<code_completion_hint>Sort</code_completion_hint>
					<code_insight_hint>Function Sort(object As Base, comparisonFunction As String) As Boolean</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Base">
			<description>A viz object. This is the base class of all other viz types.</description>
			<properties>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="NumChannels" type="Property" deprecated="true" return_value_scope="Integer">
					<description>Deprecated. Use IsAnimated or GetChannelsOfObject instead.</description>
					<code_completion_hint>NumChannels</code_completion_hint>
					<code_insight_hint>NumChannels As Integer [read-only]</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
				<method name="FindChannel" type="Function" deprecated="true" return_value_scope="Channel">
					<description>Deprecated. Use FindChannelOfObject</description>
					<code_completion_hint>FindChannel</code_completion_hint>
					<code_insight_hint>Function FindChannel(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframe" type="Function" deprecated="true" return_value_scope="Keyframe">
					<description>Deprecated. Use FindKeyframeOfObject</description>
					<code_completion_hint>FindKeyframe</code_completion_hint>
					<code_insight_hint>Function FindKeyframe(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="GetChannels" type="Function" deprecated="true" return_value_scope="Integer">
					<description>Deprecated. Use GetChannelsOfObject</description>
					<code_completion_hint>GetChannels</code_completion_hint>
					<code_insight_hint>Function GetChannels([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="GetNumberOfAnimationChannels" type="Function" deprecated="true" return_value_scope="Integer">
					<description>Deprecated. Use IsAnimated instead.</description>
					<code_completion_hint>GetNumberOfAnimationChannels</code_completion_hint>
					<code_insight_hint>Function GetNumberOfAnimationChannels() As Integer</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="BezierHandle">
			<description>A spline handle of a keyframe.</description>
			<properties>
				<property name="LeftAngle" type="Property" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>LeftAngle</code_completion_hint>
					<code_insight_hint>LeftAngle As Double</code_insight_hint>
				</property>
				<property name="LeftInterpolationMode" type="Property" deprecated="false" return_value_scope="Integer">
					<description>HANDLE_INTERPOLATION_MODE_SMOOTH; HANDLE_INTERPOLATION_MODE_LINEAR</description>
					<code_completion_hint>LeftInterpolationMode</code_completion_hint>
					<code_insight_hint>LeftInterpolationMode As Integer</code_insight_hint>
				</property>
				<property name="LeftWeight" type="Property" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>LeftWeight</code_completion_hint>
					<code_insight_hint>LeftWeight As Double</code_insight_hint>
				</property>
				<property name="LockMode" type="Property" deprecated="false" return_value_scope="Integer">
					<description>HANDLE_LOCK_MODE_LOCKED; HANDLE_LOCK_MODE_SINGLE; HANDLE_LOCK_MODE_MIRROR</description>
					<code_completion_hint>LockMode</code_completion_hint>
					<code_insight_hint>LockMode As Integer</code_insight_hint>
				</property>
				<property name="RightAngle" type="Property" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>RightAngle</code_completion_hint>
					<code_insight_hint>RightAngle As Double</code_insight_hint>
				</property>
				<property name="RightInterpolationMode" type="Property" deprecated="false" return_value_scope="Integer">
					<description>HANDLE_INTERPOLATION_MODE_SMOOTH; HANDLE_INTERPOLATION_MODE_LINEAR</description>
					<code_completion_hint>RightInterpolationMode</code_completion_hint>
					<code_insight_hint>RightInterpolationMode As Integer</code_insight_hint>
				</property>
				<property name="RightWeight" type="Property" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>RightWeight</code_completion_hint>
					<code_insight_hint>RightWeight As Double</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Boolean">
			<description>A flag that is either true or false.</description>
			<properties />
			<member_methods />
		</scope>
		<scope name="Camera">
			<description>A camera object. Camera objects are returned by the Scene's CurrentCamera and GetCamera members.</description>
			<properties>
				<property name="ActiveExt" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Activates/Deactivates the external camera.</description>
					<code_completion_hint>ActiveExt</code_completion_hint>
					<code_insight_hint>ActiveExt As Boolean</code_insight_hint>
				</property>
				<property name="Cx" type="Property" deprecated="false" return_value_scope="Double">
					<description>The center shift in x</description>
					<code_completion_hint>Cx</code_completion_hint>
					<code_insight_hint>Cx As Double</code_insight_hint>
				</property>
				<property name="CxExt" type="Property" deprecated="false" return_value_scope="Double">
					<description>The center shift in x of the external camera</description>
					<code_completion_hint>CxExt</code_completion_hint>
					<code_insight_hint>CxExt As Double [read-only]</code_insight_hint>
				</property>
				<property name="Cy" type="Property" deprecated="false" return_value_scope="Double">
					<description>The center shift in y</description>
					<code_completion_hint>Cy</code_completion_hint>
					<code_insight_hint>Cy As Double</code_insight_hint>
				</property>
				<property name="CyExt" type="Property" deprecated="false" return_value_scope="Double">
					<description>The center shift in y of the external camera</description>
					<code_completion_hint>CyExt</code_completion_hint>
					<code_insight_hint>CyExt As Double [read-only]</code_insight_hint>
				</property>
				<property name="DecoupleExternal" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>If true, viz receives external camera data without copying them to its internal camera structures for rendering.</description>
					<code_completion_hint>DecoupleExternal</code_completion_hint>
					<code_insight_hint>DecoupleExternal As Boolean</code_insight_hint>
				</property>
				<property name="Direction" type="Property" deprecated="false" return_value_scope="Position">
					<description>The direction of the camera</description>
					<code_completion_hint>Direction</code_completion_hint>
					<code_insight_hint>Direction As Position</code_insight_hint>
				</property>
				<property name="FocalPlane" type="Property" deprecated="false" return_value_scope="Double">
					<description>The focal plane</description>
					<code_completion_hint>FocalPlane</code_completion_hint>
					<code_insight_hint>FocalPlane As Double</code_insight_hint>
				</property>
				<property name="Fovx" type="Property" deprecated="false" return_value_scope="Double">
					<description>The field of view in x</description>
					<code_completion_hint>Fovx</code_completion_hint>
					<code_insight_hint>Fovx As Double</code_insight_hint>
				</property>
				<property name="FovxExt" type="Property" deprecated="false" return_value_scope="Double">
					<description>The field of view in x of the external camera</description>
					<code_completion_hint>FovxExt</code_completion_hint>
					<code_insight_hint>FovxExt As Double [read-only]</code_insight_hint>
				</property>
				<property name="Fovy" type="Property" deprecated="false" return_value_scope="Double">
					<description>The field of view in y</description>
					<code_completion_hint>Fovy</code_completion_hint>
					<code_insight_hint>Fovy As Double</code_insight_hint>
				</property>
				<property name="FovyExt" type="Property" deprecated="false" return_value_scope="Double">
					<description>The field of view in y of the external camera</description>
					<code_completion_hint>FovyExt</code_completion_hint>
					<code_insight_hint>FovyExt As Double [read-only]</code_insight_hint>
				</property>
				<property name="Matrix" type="Property" deprecated="false" return_value_scope="Matrix">
					<description>The model matrix of the camera.</description>
					<code_completion_hint>Matrix</code_completion_hint>
					<code_insight_hint>Matrix As Matrix [read-only]</code_insight_hint>
				</property>
				<property name="Pan" type="Property" deprecated="false" return_value_scope="Double">
					<description>The pan</description>
					<code_completion_hint>Pan</code_completion_hint>
					<code_insight_hint>Pan As Double</code_insight_hint>
				</property>
				<property name="PanExt" type="Property" deprecated="false" return_value_scope="Double">
					<description>The pan of the external camera</description>
					<code_completion_hint>PanExt</code_completion_hint>
					<code_insight_hint>PanExt As Double [read-only]</code_insight_hint>
				</property>
				<property name="Position" type="Property" deprecated="false" return_value_scope="Position">
					<description>The camera position</description>
					<code_completion_hint>Position</code_completion_hint>
					<code_insight_hint>Position As Position</code_insight_hint>
				</property>
				<property name="PositionExt" type="Property" deprecated="false" return_value_scope="Position">
					<description>The position of the external camera</description>
					<code_completion_hint>PositionExt</code_completion_hint>
					<code_insight_hint>PositionExt As Position [read-only]</code_insight_hint>
				</property>
				<property name="PositionTrackingActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Is position tracking active?</description>
					<code_completion_hint>PositionTrackingActive</code_completion_hint>
					<code_insight_hint>PositionTrackingActive As Boolean</code_insight_hint>
				</property>
				<property name="PositionTrackingContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description>The tracking object for position tracking</description>
					<code_completion_hint>PositionTrackingContainer</code_completion_hint>
					<code_insight_hint>PositionTrackingContainer As Container</code_insight_hint>
				</property>
				<property name="ProjectionMatrix" type="Property" deprecated="false" return_value_scope="Matrix">
					<description>The projection matrix of the camera.</description>
					<code_completion_hint>ProjectionMatrix</code_completion_hint>
					<code_insight_hint>ProjectionMatrix As Matrix [read-only]</code_insight_hint>
				</property>
				<property name="RotationTrackingActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Is rotation tracking active?</description>
					<code_completion_hint>RotationTrackingActive</code_completion_hint>
					<code_insight_hint>RotationTrackingActive As Boolean</code_insight_hint>
				</property>
				<property name="RotationTrackingContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description>The tracking object for rotation tracking</description>
					<code_completion_hint>RotationTrackingContainer</code_completion_hint>
					<code_insight_hint>RotationTrackingContainer As Container</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="Tilt" type="Property" deprecated="false" return_value_scope="Double">
					<description>The tilt</description>
					<code_completion_hint>Tilt</code_completion_hint>
					<code_insight_hint>Tilt As Double</code_insight_hint>
				</property>
				<property name="TiltExt" type="Property" deprecated="false" return_value_scope="Double">
					<description>The tilt of the external camera</description>
					<code_completion_hint>TiltExt</code_completion_hint>
					<code_insight_hint>TiltExt As Double [read-only]</code_insight_hint>
				</property>
				<property name="Twist" type="Property" deprecated="false" return_value_scope="Double">
					<description>The twist</description>
					<code_completion_hint>Twist</code_completion_hint>
					<code_insight_hint>Twist As Double</code_insight_hint>
				</property>
				<property name="TwistExt" type="Property" deprecated="false" return_value_scope="Double">
					<description>The twist of the external camera</description>
					<code_completion_hint>TwistExt</code_completion_hint>
					<code_insight_hint>TwistExt As Double [read-only]</code_insight_hint>
				</property>
				<property name="View" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The view type:; CAM_VIEW_PERSPECTIVE; CAM_VIEW_ORTHOGONAL</description>
					<code_completion_hint>View</code_completion_hint>
					<code_insight_hint>View As Integer</code_insight_hint>
				</property>
				<property name="ViewMatrix" type="Property" deprecated="false" return_value_scope="Matrix">
					<description>The view matrix of the camera.</description>
					<code_completion_hint>ViewMatrix</code_completion_hint>
					<code_insight_hint>ViewMatrix As Matrix [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="ResetPositionTracking" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>ResetPositionTracking</code_completion_hint>
					<code_insight_hint>Sub ResetPositionTracking()</code_insight_hint>
				</method>
				<method name="ResetRotationTracking" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>ResetRotationTracking</code_completion_hint>
					<code_insight_hint>Sub ResetRotationTracking()</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Center">
			<description>A center object. This is used to control the center of a container.</description>
			<properties>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="x" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the x component.</description>
					<code_completion_hint>x</code_completion_hint>
					<code_insight_hint>x As Double</code_insight_hint>
				</property>
				<property name="xyz" type="Property" deprecated="false" return_value_scope="Vertex">
					<description>Gets or sets the x, y, z components combined into a vertex.</description>
					<code_completion_hint>xyz</code_completion_hint>
					<code_insight_hint>xyz As Vertex</code_insight_hint>
				</property>
				<property name="y" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the y component.</description>
					<code_completion_hint>y</code_completion_hint>
					<code_insight_hint>y As Double</code_insight_hint>
				</property>
				<property name="z" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the z component.</description>
					<code_completion_hint>z</code_completion_hint>
					<code_insight_hint>z As Double</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Channel">
			<description>A channel of a director.</description>
			<properties>
				<property name="Actor" type="Property" deprecated="false" return_value_scope="Base">
					<description> </description>
					<code_completion_hint>Actor</code_completion_hint>
					<code_insight_hint>Actor As Base [read-only]</code_insight_hint>
				</property>
				<property name="AnimationObject" type="Property" deprecated="false" return_value_scope="Base">
					<description> </description>
					<code_completion_hint>AnimationObject</code_completion_hint>
					<code_insight_hint>AnimationObject As Base [read-only]</code_insight_hint>
				</property>
				<property name="CommandName" type="Property" deprecated="false" return_value_scope="String">
					<description> </description>
					<code_completion_hint>CommandName</code_completion_hint>
					<code_insight_hint>CommandName As String [read-only]</code_insight_hint>
				</property>
				<property name="Director" type="Property" deprecated="false" return_value_scope="Director">
					<description> </description>
					<code_completion_hint>Director</code_completion_hint>
					<code_insight_hint>Director As Director [read-only]</code_insight_hint>
				</property>
				<property name="FirstKeyframe" type="Property" deprecated="false" return_value_scope="Keyframe">
					<description>Gets the leftmost keyframe.</description>
					<code_completion_hint>FirstKeyframe</code_completion_hint>
					<code_insight_hint>FirstKeyframe As Keyframe [read-only]</code_insight_hint>
				</property>
				<property name="KeyframeCount" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the number of keyframes.</description>
					<code_completion_hint>KeyframeCount</code_completion_hint>
					<code_insight_hint>KeyframeCount As Integer [read-only]</code_insight_hint>
				</property>
				<property name="LastKeyframe" type="Property" deprecated="false" return_value_scope="Keyframe">
					<description>Gets the rightmost keyframe.</description>
					<code_completion_hint>LastKeyframe</code_completion_hint>
					<code_insight_hint>LastKeyframe As Keyframe [read-only]</code_insight_hint>
				</property>
				<property name="Name" type="Property" deprecated="false" return_value_scope="String">
					<description> </description>
					<code_completion_hint>Name</code_completion_hint>
					<code_insight_hint>Name As String</code_insight_hint>
				</property>
				<property name="PostLoopActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>PostLoopActive</code_completion_hint>
					<code_insight_hint>PostLoopActive As Boolean</code_insight_hint>
				</property>
				<property name="PostLoopCounter" type="Property" deprecated="false" return_value_scope="Integer">
					<description> </description>
					<code_completion_hint>PostLoopCounter</code_completion_hint>
					<code_insight_hint>PostLoopCounter As Integer</code_insight_hint>
				</property>
				<property name="PostSwingActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>PostSwingActive</code_completion_hint>
					<code_insight_hint>PostSwingActive As Boolean</code_insight_hint>
				</property>
				<property name="PreLoopActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>PreLoopActive</code_completion_hint>
					<code_insight_hint>PreLoopActive As Boolean</code_insight_hint>
				</property>
				<property name="PreLoopCounter" type="Property" deprecated="false" return_value_scope="Integer">
					<description> </description>
					<code_completion_hint>PreLoopCounter</code_completion_hint>
					<code_insight_hint>PreLoopCounter As Integer</code_insight_hint>
				</property>
				<property name="PreSwingActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>PreSwingActive</code_completion_hint>
					<code_insight_hint>PreSwingActive As Boolean</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="NumKeyframes" type="Property" deprecated="true" return_value_scope="Integer">
					<description>Deprecated. Use KeyframeCount.</description>
					<code_completion_hint>NumKeyframes</code_completion_hint>
					<code_insight_hint>NumKeyframes As Integer [read-only]</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="AddKeyframe" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description> </description>
					<code_completion_hint>AddKeyframe</code_completion_hint>
					<code_insight_hint>Function AddKeyframe(time As Double) As Keyframe</code_insight_hint>
				</method>
				<method name="CopyToDirector" type="Function" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>CopyToDirector</code_completion_hint>
					<code_insight_hint>Function CopyToDirector(destination As Director) As Boolean</code_insight_hint>
				</method>
				<method name="Delete" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>Delete</code_completion_hint>
					<code_insight_hint>Sub Delete()</code_insight_hint>
				</method>
				<method name="DeleteKeyframe" type="Function" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>DeleteKeyframe</code_completion_hint>
					<code_insight_hint>Function DeleteKeyframe(kf As Keyframe) As Boolean</code_insight_hint>
				</method>
				<method name="DeleteKeyframe" type="Function" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>DeleteKeyframe</code_completion_hint>
					<code_insight_hint>Function DeleteKeyframe(index As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframe" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>Searches for a keyframe named keyframeName.</description>
					<code_completion_hint>FindKeyframe</code_completion_hint>
					<code_insight_hint>Function FindKeyframe(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="GetKeyframe" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>Returns the n'th keyframe of the channel.</description>
					<code_completion_hint>GetKeyframe</code_completion_hint>
					<code_insight_hint>Function GetKeyframe(n As Integer) As Keyframe</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="MoveToDirector" type="Function" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>MoveToDirector</code_completion_hint>
					<code_insight_hint>Function MoveToDirector(destination As Director) As Boolean</code_insight_hint>
				</method>
				<method name="Rebuild" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Rebuilds the channel after it has been modified. Normally, there is no need to call this procedure.</description>
					<code_completion_hint>Rebuild</code_completion_hint>
					<code_insight_hint>Sub Rebuild()</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="ClipChannel">
			<description>A ClipChannel object. The ClipChannel member of the Base type provides access to the clip channel. Use System.GetClipChannel(number as Integer), whereas number &gt;= 0, to get a ClipChannel instance. See also examples section ClipChannel.</description>
			<properties>
				<property name="AutoRun" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set the autorun mode. If true then the clip start playing automatically upon load.</description>
					<code_completion_hint>AutoRun</code_completion_hint>
					<code_insight_hint>AutoRun As Boolean</code_insight_hint>
				</property>
				<property name="ClipChannelID" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get the clip channel number.</description>
					<code_completion_hint>ClipChannelID</code_completion_hint>
					<code_insight_hint>ClipChannelID As Integer [read-only]</code_insight_hint>
				</property>
				<property name="CurrentFrame" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get the current frame.</description>
					<code_completion_hint>CurrentFrame</code_completion_hint>
					<code_insight_hint>CurrentFrame As Integer [read-only]</code_insight_hint>
				</property>
				<property name="CurrentFramePending" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get the current frame of the pending clip.</description>
					<code_completion_hint>CurrentFramePending</code_completion_hint>
					<code_insight_hint>CurrentFramePending As Integer [read-only]</code_insight_hint>
				</property>
				<property name="Duration" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get the number of frames of the current clip.</description>
					<code_completion_hint>Duration</code_completion_hint>
					<code_insight_hint>Duration As Integer [read-only]</code_insight_hint>
				</property>
				<property name="DurationPending" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get the number of frames of the pending clip.</description>
					<code_completion_hint>DurationPending</code_completion_hint>
					<code_insight_hint>DurationPending As Integer [read-only]</code_insight_hint>
				</property>
				<property name="FrameIn" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set the In frame.</description>
					<code_completion_hint>FrameIn</code_completion_hint>
					<code_insight_hint>FrameIn As Integer</code_insight_hint>
				</property>
				<property name="FrameInActive" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set the In frame on the active clip player.</description>
					<code_completion_hint>FrameInActive</code_completion_hint>
					<code_insight_hint>FrameInActive As Integer</code_insight_hint>
				</property>
				<property name="FrameInPending" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set the In frame on the pending clip player.</description>
					<code_completion_hint>FrameInPending</code_completion_hint>
					<code_insight_hint>FrameInPending As Integer</code_insight_hint>
				</property>
				<property name="FrameOut" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set the Out frame.</description>
					<code_completion_hint>FrameOut</code_completion_hint>
					<code_insight_hint>FrameOut As Integer</code_insight_hint>
				</property>
				<property name="FrameOutActive" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set the Out frame on the active clip player.</description>
					<code_completion_hint>FrameOutActive</code_completion_hint>
					<code_insight_hint>FrameOutActive As Integer</code_insight_hint>
				</property>
				<property name="FrameOutPending" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set the Out frame on the pending clip player.</description>
					<code_completion_hint>FrameOutPending</code_completion_hint>
					<code_insight_hint>FrameOutPending As Integer</code_insight_hint>
				</property>
				<property name="LoopMode" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set the loop mode. If true (=default), then the clip will be looped.</description>
					<code_completion_hint>LoopMode</code_completion_hint>
					<code_insight_hint>LoopMode As Boolean</code_insight_hint>
				</property>
				<property name="LoopModeActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set the loop mode on the active clip player. If true (=default), then the clip will be looped.</description>
					<code_completion_hint>LoopModeActive</code_completion_hint>
					<code_insight_hint>LoopModeActive As Boolean</code_insight_hint>
				</property>
				<property name="LoopModePending" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set the loop mode on the pending clip player. If true (=default), then the clip will be looped.</description>
					<code_completion_hint>LoopModePending</code_completion_hint>
					<code_insight_hint>LoopModePending As Boolean</code_insight_hint>
				</property>
				<property name="ModeOnLoadError" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Determines the mode upon an error situation when loading a clip. none|pause|stop|flush</description>
					<code_completion_hint>ModeOnLoadError</code_completion_hint>
					<code_insight_hint>ModeOnLoadError As Integer</code_insight_hint>
				</property>
				<property name="ModeOnLoadError_FLUSH" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for mode on load error flush.</description>
					<code_completion_hint>ModeOnLoadError_FLUSH</code_completion_hint>
					<code_insight_hint>ModeOnLoadError_FLUSH As Integer [read-only]</code_insight_hint>
				</property>
				<property name="ModeOnLoadError_NONE" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for mode on load error none.</description>
					<code_completion_hint>ModeOnLoadError_NONE</code_completion_hint>
					<code_insight_hint>ModeOnLoadError_NONE As Integer [read-only]</code_insight_hint>
				</property>
				<property name="ModeOnLoadError_PAUSE" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for mode on load error pause.</description>
					<code_completion_hint>ModeOnLoadError_PAUSE</code_completion_hint>
					<code_insight_hint>ModeOnLoadError_PAUSE As Integer [read-only]</code_insight_hint>
				</property>
				<property name="ModeOnLoadError_STOP" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for mode on load error stop.</description>
					<code_completion_hint>ModeOnLoadError_STOP</code_completion_hint>
					<code_insight_hint>ModeOnLoadError_STOP As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PendingClipSupported" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Determines if support for loading pending clips is available.</description>
					<code_completion_hint>PendingClipSupported</code_completion_hint>
					<code_insight_hint>PendingClipSupported As Boolean [read-only]</code_insight_hint>
				</property>
				<property name="PlayBackSpeed" type="Property" deprecated="false" return_value_scope="Double">
					<description>Get/Set the playback speed.</description>
					<code_completion_hint>PlayBackSpeed</code_completion_hint>
					<code_insight_hint>PlayBackSpeed As Double</code_insight_hint>
				</property>
				<property name="PlayBackSpeedActive" type="Property" deprecated="false" return_value_scope="Double">
					<description>Get/Set the playback speed on the active clip player.</description>
					<code_completion_hint>PlayBackSpeedActive</code_completion_hint>
					<code_insight_hint>PlayBackSpeedActive As Double</code_insight_hint>
				</property>
				<property name="PlayBackSpeedPending" type="Property" deprecated="false" return_value_scope="Double">
					<description>Get/Set the playback speed on the pending clip palyer.</description>
					<code_completion_hint>PlayBackSpeedPending</code_completion_hint>
					<code_insight_hint>PlayBackSpeedPending As Double</code_insight_hint>
				</property>
				<property name="PlayMode" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get the current mode of the clip channel.</description>
					<code_completion_hint>PlayMode</code_completion_hint>
					<code_insight_hint>PlayMode As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PlayMode_ERROR" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for current mode  ERROR.</description>
					<code_completion_hint>PlayMode_ERROR</code_completion_hint>
					<code_insight_hint>PlayMode_ERROR As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PlayMode_NONE" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for current mode  NONE.</description>
					<code_completion_hint>PlayMode_NONE</code_completion_hint>
					<code_insight_hint>PlayMode_NONE As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PlayMode_PLAY" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for current mode  PLAYING.</description>
					<code_completion_hint>PlayMode_PLAY</code_completion_hint>
					<code_insight_hint>PlayMode_PLAY As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PlayMode_PLAY_PENDING" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for current mode  PLAYING_PENDING.</description>
					<code_completion_hint>PlayMode_PLAY_PENDING</code_completion_hint>
					<code_insight_hint>PlayMode_PLAY_PENDING As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PlayMode_SCRUB" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for current mode  SCRUBBING.</description>
					<code_completion_hint>PlayMode_SCRUB</code_completion_hint>
					<code_insight_hint>PlayMode_SCRUB As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PlayMode_SCRUB_EOF" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for current mode  SCRUBBING_EOF.</description>
					<code_completion_hint>PlayMode_SCRUB_EOF</code_completion_hint>
					<code_insight_hint>PlayMode_SCRUB_EOF As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PlayMode_STOP" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for current mode  STOP.</description>
					<code_completion_hint>PlayMode_STOP</code_completion_hint>
					<code_insight_hint>PlayMode_STOP As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PlayModePending" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get the current mode of the pending clip player.</description>
					<code_completion_hint>PlayModePending</code_completion_hint>
					<code_insight_hint>PlayModePending As Integer [read-only]</code_insight_hint>
				</property>
				<property name="RepeatMode" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set the repeat mode for playback and pause. none|field|frame.</description>
					<code_completion_hint>RepeatMode</code_completion_hint>
					<code_insight_hint>RepeatMode As Integer</code_insight_hint>
				</property>
				<property name="RepeatMode_FIELD" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for repeat mode field.</description>
					<code_completion_hint>RepeatMode_FIELD</code_completion_hint>
					<code_insight_hint>RepeatMode_FIELD As Integer [read-only]</code_insight_hint>
				</property>
				<property name="RepeatMode_FRAME" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for repeat mode frame.</description>
					<code_completion_hint>RepeatMode_FRAME</code_completion_hint>
					<code_insight_hint>RepeatMode_FRAME As Integer [read-only]</code_insight_hint>
				</property>
				<property name="RepeatMode_NONE" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Constant for repeat mode none.</description>
					<code_completion_hint>RepeatMode_NONE</code_completion_hint>
					<code_insight_hint>RepeatMode_NONE As Integer [read-only]</code_insight_hint>
				</property>
				<property name="RepeatModeActive" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set the repeat mode for playback and pause on the active clip player. none|field|frame.</description>
					<code_completion_hint>RepeatModeActive</code_completion_hint>
					<code_insight_hint>RepeatModeActive As Integer</code_insight_hint>
				</property>
				<property name="RepeatModePending" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set the repeat mode for playback and pause on the pending clip player. none|field|frame.</description>
					<code_completion_hint>RepeatModePending</code_completion_hint>
					<code_insight_hint>RepeatModePending As Integer</code_insight_hint>
				</property>
				<property name="ReverseFields" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>If true swap fields when playing interlaced material backwards.</description>
					<code_completion_hint>ReverseFields</code_completion_hint>
					<code_insight_hint>ReverseFields As Boolean</code_insight_hint>
				</property>
				<property name="ReverseFieldsActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>If true swap fields when playing interlaced material backwards on the active clip player.</description>
					<code_completion_hint>ReverseFieldsActive</code_completion_hint>
					<code_insight_hint>ReverseFieldsActive As Boolean</code_insight_hint>
				</property>
				<property name="ReverseFieldsPending" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>If true swap fields when playing interlaced material backwards on the pending clip player.</description>
					<code_completion_hint>ReverseFieldsPending</code_completion_hint>
					<code_insight_hint>ReverseFieldsPending As Boolean</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="UpscaleLuma" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>If true then upscale the luma value in the separate key file.</description>
					<code_completion_hint>UpscaleLuma</code_completion_hint>
					<code_insight_hint>UpscaleLuma As Boolean</code_insight_hint>
				</property>
				<property name="UpscaleLumaActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>If true then upscale the luma value in the separate key file on the active clip player.</description>
					<code_completion_hint>UpscaleLumaActive</code_completion_hint>
					<code_insight_hint>UpscaleLumaActive As Boolean</code_insight_hint>
				</property>
				<property name="UpscaleLumaPending" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>If true then upscale the luma value in the separate key file on the pending clip player.</description>
					<code_completion_hint>UpscaleLumaPending</code_completion_hint>
					<code_insight_hint>UpscaleLumaPending As Boolean</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="Continue" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Resume playback from Pause.</description>
					<code_completion_hint>Continue</code_completion_hint>
					<code_insight_hint>Sub Continue()</code_insight_hint>
				</method>
				<method name="ContinueActive" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Resume playback from Pause in active clip player.</description>
					<code_completion_hint>ContinueActive</code_completion_hint>
					<code_insight_hint>Sub ContinueActive()</code_insight_hint>
				</method>
				<method name="ContinuePending" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Resume playback from Pause in pending clip player.</description>
					<code_completion_hint>ContinuePending</code_completion_hint>
					<code_insight_hint>Sub ContinuePending()</code_insight_hint>
				</method>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="Flush" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Unload active and pending clip.</description>
					<code_completion_hint>Flush</code_completion_hint>
					<code_insight_hint>Sub Flush()</code_insight_hint>
				</method>
				<method name="FlushActive" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Unload active clip.</description>
					<code_completion_hint>FlushActive</code_completion_hint>
					<code_insight_hint>Sub FlushActive()</code_insight_hint>
				</method>
				<method name="FlushPending" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Unload pending clip.</description>
					<code_completion_hint>FlushPending</code_completion_hint>
					<code_insight_hint>Sub FlushPending()</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="GetClipName" type="Function" deprecated="false" return_value_scope="String">
					<description>Get the ClipName currently loaded.</description>
					<code_completion_hint>GetClipName</code_completion_hint>
					<code_insight_hint>Function GetClipName() As String</code_insight_hint>
				</method>
				<method name="GetClipNameActive" type="Function" deprecated="false" return_value_scope="String">
					<description>Get the ClipName currently loaded in the active clip player.</description>
					<code_completion_hint>GetClipNameActive</code_completion_hint>
					<code_insight_hint>Function GetClipNameActive() As String</code_insight_hint>
				</method>
				<method name="GetClipNamePending" type="Function" deprecated="false" return_value_scope="String">
					<description>Get the ClipName currently loaded in the pending clip player.</description>
					<code_completion_hint>GetClipNamePending</code_completion_hint>
					<code_insight_hint>Function GetClipNamePending() As String</code_insight_hint>
				</method>
				<method name="GetRegisterChangedClipFrame" type="Function" deprecated="false" return_value_scope="String">
					<description>Returns the registered ShmKey set by SetRegisterChangedClipFrame or an empty string if not set.</description>
					<code_completion_hint>GetRegisterChangedClipFrame</code_completion_hint>
					<code_insight_hint>Function GetRegisterChangedClipFrame() As String</code_insight_hint>
				</method>
				<method name="GetRegisterChangedClipMode" type="Function" deprecated="false" return_value_scope="String">
					<description>Returns the registered ShmKey set by SetRegisterChangedClipMode or an empty string if not set.</description>
					<code_completion_hint>GetRegisterChangedClipMode</code_completion_hint>
					<code_insight_hint>Function GetRegisterChangedClipMode() As String</code_insight_hint>
				</method>
				<method name="GetRegisterChangedClipModePending" type="Function" deprecated="false" return_value_scope="String">
					<description>Returns the registered ShmKey set by SetRegisterChangedClipModePending or an empty string if not set.</description>
					<code_completion_hint>GetRegisterChangedClipModePending</code_completion_hint>
					<code_insight_hint>Function GetRegisterChangedClipModePending() As String</code_insight_hint>
				</method>
				<method name="GetReportValues" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Shortcut for Duration(), CurrentFrame(), PlayMode().</description>
					<code_completion_hint>GetReportValues</code_completion_hint>
					<code_insight_hint>Sub GetReportValues([out] Duration As Integer, [out] CurrentFrame As Integer, [out] PlayMode As Integer)</code_insight_hint>
				</method>
				<method name="GetReportValuesPending" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Shortcut for Duration(), CurrentFrame(), PlayMode().</description>
					<code_completion_hint>GetReportValuesPending</code_completion_hint>
					<code_insight_hint>Sub GetReportValuesPending([out] Duration As Integer, [out] CurrentFrame As Integer, [out] PlayMode As Integer)</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="IsClipLoaded" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Determines if given clip is loaded in activeor pending clip player.</description>
					<code_completion_hint>IsClipLoaded</code_completion_hint>
					<code_insight_hint>Function IsClipLoaded(ClipName As String) As Boolean</code_insight_hint>
				</method>
				<method name="IsClipLoadedActive" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Determines if given clip is loaded in active clip player.</description>
					<code_completion_hint>IsClipLoadedActive</code_completion_hint>
					<code_insight_hint>Function IsClipLoadedActive(ClipName As String) As Boolean</code_insight_hint>
				</method>
				<method name="IsClipLoadedPending" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Determines if given clip is loaded in pending clip player.</description>
					<code_completion_hint>IsClipLoadedPending</code_completion_hint>
					<code_insight_hint>Function IsClipLoadedPending(ClipName As String) As Boolean</code_insight_hint>
				</method>
				<method name="Pause" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Pauses the clip on this channel.</description>
					<code_completion_hint>Pause</code_completion_hint>
					<code_insight_hint>Sub Pause()</code_insight_hint>
				</method>
				<method name="PauseActive" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Pauses the active clip on this channel.</description>
					<code_completion_hint>PauseActive</code_completion_hint>
					<code_insight_hint>Sub PauseActive()</code_insight_hint>
				</method>
				<method name="PausePending" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Pauses the pending clip on this channel.</description>
					<code_completion_hint>PausePending</code_completion_hint>
					<code_insight_hint>Sub PausePending()</code_insight_hint>
				</method>
				<method name="Play" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Start Playing from StartFrame position.</description>
					<code_completion_hint>Play</code_completion_hint>
					<code_insight_hint>Sub Play(StartFrame As Integer)</code_insight_hint>
				</method>
				<method name="PlayActive" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Start Playing the active clip player from StartFrame position.</description>
					<code_completion_hint>PlayActive</code_completion_hint>
					<code_insight_hint>Sub PlayActive(StartFrame As Integer)</code_insight_hint>
				</method>
				<method name="PlayPending" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Start Playing the pending clip player from StartFrame position.</description>
					<code_completion_hint>PlayPending</code_completion_hint>
					<code_insight_hint>Sub PlayPending(StartFrame As Integer)</code_insight_hint>
				</method>
				<method name="Scrub" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Scrub the clip to Frame position.</description>
					<code_completion_hint>Scrub</code_completion_hint>
					<code_insight_hint>Sub Scrub(Frame As Integer)</code_insight_hint>
				</method>
				<method name="ScrubActive" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Scrub the active clip to Frame position.</description>
					<code_completion_hint>ScrubActive</code_completion_hint>
					<code_insight_hint>Sub ScrubActive(Frame As Integer)</code_insight_hint>
				</method>
				<method name="ScrubPending" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Scrub the pending clip to Frame position.</description>
					<code_completion_hint>ScrubPending</code_completion_hint>
					<code_insight_hint>Sub ScrubPending(Frame As Integer)</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
				<method name="SetClipName" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Load ClipName into clip channel with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun.</description>
					<code_completion_hint>SetClipName</code_completion_hint>
					<code_insight_hint>Sub SetClipName(ClipName As String)</code_insight_hint>
				</method>
				<method name="SetClipNameBack2Back" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Load ClipName as Back2Back into pending clip player with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun.</description>
					<code_completion_hint>SetClipNameBack2Back</code_completion_hint>
					<code_insight_hint>Sub SetClipNameBack2Back(ClipName As String)</code_insight_hint>
				</method>
				<method name="SetClipNameBack2BackEx" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Load ClipName as Back2Back into pending clip player with parameters in/out and AutoRun.</description>
					<code_completion_hint>SetClipNameBack2BackEx</code_completion_hint>
					<code_insight_hint>Sub SetClipNameBack2BackEx(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)</code_insight_hint>
				</method>
				<method name="SetClipNameEx" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Load ClipName into clip channel with parameters in/out and AutoRun.</description>
					<code_completion_hint>SetClipNameEx</code_completion_hint>
					<code_insight_hint>Sub SetClipNameEx(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)</code_insight_hint>
				</method>
				<method name="SetClipNamePending" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Load ClipName into pending clip player with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun.</description>
					<code_completion_hint>SetClipNamePending</code_completion_hint>
					<code_insight_hint>Sub SetClipNamePending(ClipName As String)</code_insight_hint>
				</method>
				<method name="SetClipNamePendingEx" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Load ClipName into pending clip player with parameters in/out and AutoRun.</description>
					<code_completion_hint>SetClipNamePendingEx</code_completion_hint>
					<code_insight_hint>Sub SetClipNamePendingEx(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)</code_insight_hint>
				</method>
				<method name="SetRegisterChangedClipFrame" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Causes ShmKey to be set to the current frame whenever it changes.An empty string removes the binding.</description>
					<code_completion_hint>SetRegisterChangedClipFrame</code_completion_hint>
					<code_insight_hint>Sub SetRegisterChangedClipFrame(ShmKey As String)</code_insight_hint>
				</method>
				<method name="SetRegisterChangedClipMode" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Causes ShmKey to be set to the new mode whenever it changes.An empty string removes the binding.</description>
					<code_completion_hint>SetRegisterChangedClipMode</code_completion_hint>
					<code_insight_hint>Sub SetRegisterChangedClipMode(ShmKey As String)</code_insight_hint>
				</method>
				<method name="SetRegisterChangedClipModePending" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Causes ShmKey to be set to the new mode whenever it changes.An empty string removes the binding.</description>
					<code_completion_hint>SetRegisterChangedClipModePending</code_completion_hint>
					<code_insight_hint>Sub SetRegisterChangedClipModePending(ShmKey As String)</code_insight_hint>
				</method>
				<method name="Stop" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Stops the clip on this channel.</description>
					<code_completion_hint>Stop</code_completion_hint>
					<code_insight_hint>Sub Stop()</code_insight_hint>
				</method>
				<method name="StopActive" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Stops the active clip on this channel.</description>
					<code_completion_hint>StopActive</code_completion_hint>
					<code_insight_hint>Sub StopActive()</code_insight_hint>
				</method>
				<method name="StopPending" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Stops the pending clip on this channel.</description>
					<code_completion_hint>StopPending</code_completion_hint>
					<code_insight_hint>Sub StopPending()</code_insight_hint>
				</method>
				<method name="SwapEofPending" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Activate pending clip at EOF of activ clip.</description>
					<code_completion_hint>SwapEofPending</code_completion_hint>
					<code_insight_hint>Sub SwapEofPending()</code_insight_hint>
				</method>
				<method name="SwapPending" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Activate pending clip .</description>
					<code_completion_hint>SwapPending</code_completion_hint>
					<code_insight_hint>Sub SwapPending()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Color">
			<description>A color object consisting of 4 members: red, green blue, alpha.</description>
			<properties>
				<property name="Alpha" type="Property" deprecated="false" return_value_scope="Double">
					<description>The alpha component [0.0, 1.0]</description>
					<code_completion_hint>Alpha</code_completion_hint>
					<code_insight_hint>Alpha As Double</code_insight_hint>
				</property>
				<property name="Blue" type="Property" deprecated="false" return_value_scope="Double">
					<description>The blue component [0.0, 1.0]</description>
					<code_completion_hint>Blue</code_completion_hint>
					<code_insight_hint>Blue As Double</code_insight_hint>
				</property>
				<property name="Green" type="Property" deprecated="false" return_value_scope="Double">
					<description>The green component [0.0, 1.0]</description>
					<code_completion_hint>Green</code_completion_hint>
					<code_insight_hint>Green As Double</code_insight_hint>
				</property>
				<property name="Red" type="Property" deprecated="false" return_value_scope="Double">
					<description>The red component [0.0, 1.0]</description>
					<code_completion_hint>Red</code_completion_hint>
					<code_insight_hint>Red As Double</code_insight_hint>
				</property>
				<property name="Rgb" type="Property" deprecated="false" return_value_scope="Vertex">
					<description>The red/green/blue components combined into a Vertex value</description>
					<code_completion_hint>Rgb</code_completion_hint>
					<code_insight_hint>Rgb As Vertex</code_insight_hint>
				</property>
			</properties>
			<member_methods />
		</scope>
		<scope name="Container">
			<description>A container object.</description>
			<properties>
				<property name="Active" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>The visibility state</description>
					<code_completion_hint>Active</code_completion_hint>
					<code_insight_hint>Active As Boolean</code_insight_hint>
				</property>
				<property name="Alpha" type="Property" deprecated="false" return_value_scope="Alpha">
					<description>The alpha object</description>
					<code_completion_hint>Alpha</code_completion_hint>
					<code_insight_hint>Alpha As Alpha</code_insight_hint>
				</property>
				<property name="Center" type="Property" deprecated="false" return_value_scope="Center">
					<description>The center object</description>
					<code_completion_hint>Center</code_completion_hint>
					<code_insight_hint>Center As Center</code_insight_hint>
				</property>
				<property name="ChildContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description>The first child container</description>
					<code_completion_hint>ChildContainer</code_completion_hint>
					<code_insight_hint>ChildContainer As Container [read-only]</code_insight_hint>
				</property>
				<property name="ChildContainerCount" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the number of child containers.</description>
					<code_completion_hint>ChildContainerCount</code_completion_hint>
					<code_insight_hint>ChildContainerCount As Integer [read-only]</code_insight_hint>
				</property>
				<property name="ExactPicking" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Enables/Disables exact picking for OnEnter/OnLeave.</description>
					<code_completion_hint>ExactPicking</code_completion_hint>
					<code_insight_hint>ExactPicking As Boolean</code_insight_hint>
				</property>
				<property name="Expert" type="Property" deprecated="false" return_value_scope="Expert">
					<description>The expert object</description>
					<code_completion_hint>Expert</code_completion_hint>
					<code_insight_hint>Expert As Expert</code_insight_hint>
				</property>
				<property name="FirstChildContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description>The first child container</description>
					<code_completion_hint>FirstChildContainer</code_completion_hint>
					<code_insight_hint>FirstChildContainer As Container [read-only]</code_insight_hint>
				</property>
				<property name="Geometry" type="Property" deprecated="false" return_value_scope="Geometry">
					<description>The geometry object</description>
					<code_completion_hint>Geometry</code_completion_hint>
					<code_insight_hint>Geometry As Geometry</code_insight_hint>
				</property>
				<property name="Key" type="Property" deprecated="false" return_value_scope="Key">
					<description>The key object</description>
					<code_completion_hint>Key</code_completion_hint>
					<code_insight_hint>Key As Key</code_insight_hint>
				</property>
				<property name="LastChildContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description>The last child container</description>
					<code_completion_hint>LastChildContainer</code_completion_hint>
					<code_insight_hint>LastChildContainer As Container [read-only]</code_insight_hint>
				</property>
				<property name="Material" type="Property" deprecated="false" return_value_scope="Material">
					<description>The material object</description>
					<code_completion_hint>Material</code_completion_hint>
					<code_insight_hint>Material As Material</code_insight_hint>
				</property>
				<property name="Matrix" type="Property" deprecated="false" return_value_scope="Matrix">
					<description>The model matrix of the cotainer.</description>
					<code_completion_hint>Matrix</code_completion_hint>
					<code_insight_hint>Matrix As Matrix [read-only]</code_insight_hint>
				</property>
				<property name="Merged" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Indicates whether the container is merged.</description>
					<code_completion_hint>Merged</code_completion_hint>
					<code_insight_hint>Merged As Boolean [read-only]</code_insight_hint>
				</property>
				<property name="MergedChildContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description>The first child container within a merged object</description>
					<code_completion_hint>MergedChildContainer</code_completion_hint>
					<code_insight_hint>MergedChildContainer As Container [read-only]</code_insight_hint>
				</property>
				<property name="MergedParentContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description>The merged parent container</description>
					<code_completion_hint>MergedParentContainer</code_completion_hint>
					<code_insight_hint>MergedParentContainer As Container [read-only]</code_insight_hint>
				</property>
				<property name="Name" type="Property" deprecated="false" return_value_scope="String">
					<description>The name of the container</description>
					<code_completion_hint>Name</code_completion_hint>
					<code_insight_hint>Name As String</code_insight_hint>
				</property>
				<property name="NextContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description>The next container in the tree</description>
					<code_completion_hint>NextContainer</code_completion_hint>
					<code_insight_hint>NextContainer As Container [read-only]</code_insight_hint>
				</property>
				<property name="Open" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Indicates whether the container is open, i.e. its subcontainers are visible in the tree</description>
					<code_completion_hint>Open</code_completion_hint>
					<code_insight_hint>Open As Boolean</code_insight_hint>
				</property>
				<property name="ParentContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description>The parent container</description>
					<code_completion_hint>ParentContainer</code_completion_hint>
					<code_insight_hint>ParentContainer As Container [read-only]</code_insight_hint>
				</property>
				<property name="Position" type="Property" deprecated="false" return_value_scope="Position">
					<description>The position object</description>
					<code_completion_hint>Position</code_completion_hint>
					<code_insight_hint>Position As Position</code_insight_hint>
				</property>
				<property name="PreviousContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description>The previous container</description>
					<code_completion_hint>PreviousContainer</code_completion_hint>
					<code_insight_hint>PreviousContainer As Container [read-only]</code_insight_hint>
				</property>
				<property name="Rotation" type="Property" deprecated="false" return_value_scope="Rotation">
					<description>The rotation object</description>
					<code_completion_hint>Rotation</code_completion_hint>
					<code_insight_hint>Rotation As Rotation</code_insight_hint>
				</property>
				<property name="Scaling" type="Property" deprecated="false" return_value_scope="Scaling">
					<description>The scaling object</description>
					<code_completion_hint>Scaling</code_completion_hint>
					<code_insight_hint>Scaling As Scaling</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Script" type="Property" deprecated="false" return_value_scope="Script">
					<description>The script object: it can be used to dynamically call member procedures of the container</description>
					<code_completion_hint>Script</code_completion_hint>
					<code_insight_hint>Script As Script [read-only]</code_insight_hint>
				</property>
				<property name="ScriptPluginInstance" type="Property" deprecated="false" return_value_scope="PluginInstance">
					<description>The script's plugin instance</description>
					<code_completion_hint>ScriptPluginInstance</code_completion_hint>
					<code_insight_hint>ScriptPluginInstance As PluginInstance [read-only]</code_insight_hint>
				</property>
				<property name="ScriptSettings" type="Property" deprecated="false" return_value_scope="ScriptSettings">
					<description>The script's local settings</description>
					<code_completion_hint>ScriptSettings</code_completion_hint>
					<code_insight_hint>ScriptSettings As ScriptSettings [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="Texture" type="Property" deprecated="false" return_value_scope="Texture">
					<description>The texture object</description>
					<code_completion_hint>Texture</code_completion_hint>
					<code_insight_hint>Texture As Texture</code_insight_hint>
				</property>
				<property name="Uuid" type="Property" deprecated="false" return_value_scope="Uuid">
					<description>The UUID of the container</description>
					<code_completion_hint>Uuid</code_completion_hint>
					<code_insight_hint>Uuid As Uuid [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="NumChildContainers" type="Property" deprecated="true" return_value_scope="Integer">
					<description>Deprecated. Use ChildContainerCount instead.</description>
					<code_completion_hint>NumChildContainers</code_completion_hint>
					<code_insight_hint>NumChildContainers As Integer [read-only]</code_insight_hint>
				</property>
				<property name="Transform" type="Property" deprecated="true" return_value_scope="Transform">
					<description>Deprecated.</description>
					<code_completion_hint>Transform</code_completion_hint>
					<code_insight_hint>Transform As Transform</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="AddContainer" type="Function" deprecated="false" return_value_scope="Container">
					<description>Inserts and returns a new container; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN.</description>
					<code_completion_hint>AddContainer</code_completion_hint>
					<code_insight_hint>Function AddContainer(where As Integer) As Container</code_insight_hint>
				</method>
				<method name="AddScreenOffset" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>This procedure is identical to ScreenOffsetToContainerOffset except that it automatically adds the resulting container offset to the local container position. This procedure is typically called in OnMouseMove to implement dragging of containers.</description>
					<code_completion_hint>AddScreenOffset</code_completion_hint>
					<code_insight_hint>Function AddScreenOffset(dx As Integer, dy As Integer) As Vertex</code_insight_hint>
				</method>
				<method name="ContainsMouseCursor" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if and only if the mouse curser is inside the container. For this method to work correctly, it is required that at least one enter or leave callback be defined on the container or on a super-container.</description>
					<code_completion_hint>ContainsMouseCursor</code_completion_hint>
					<code_insight_hint>Function ContainsMouseCursor() As Boolean</code_insight_hint>
				</method>
				<method name="CopyTo" type="Function" deprecated="false" return_value_scope="Container">
					<description>Copies the container; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN.</description>
					<code_completion_hint>CopyTo</code_completion_hint>
					<code_insight_hint>Function CopyTo(destination As Container, where As Integer) As Container</code_insight_hint>
				</method>
				<method name="CreateAlpha" type="Function" deprecated="false" return_value_scope="Alpha">
					<description>Creates and returns an alpha object.</description>
					<code_completion_hint>CreateAlpha</code_completion_hint>
					<code_insight_hint>Function CreateAlpha() As Alpha</code_insight_hint>
				</method>
				<method name="CreateExpert" type="Function" deprecated="false" return_value_scope="Expert">
					<description> </description>
					<code_completion_hint>CreateExpert</code_completion_hint>
					<code_insight_hint>Function CreateExpert() As Expert</code_insight_hint>
				</method>
				<method name="CreateFunction" type="Function" deprecated="false" return_value_scope="PluginInstance">
					<description>Creates a plugin instance by name, e.g. "BUILT_IN*FUNCTION*Autofollow"</description>
					<code_completion_hint>CreateFunction</code_completion_hint>
					<code_insight_hint>Function CreateFunction(location As String) As PluginInstance</code_insight_hint>
				</method>
				<method name="CreateGeometry" type="Function" deprecated="false" return_value_scope="Geometry">
					<description>Creates a geometry by name, e.g. "BUILT_IN*GEOM*Circle" (for built-ins) or "GEOM*ObjectName" (for pool objects)</description>
					<code_completion_hint>CreateGeometry</code_completion_hint>
					<code_insight_hint>Function CreateGeometry(location As String) As Geometry</code_insight_hint>
				</method>
				<method name="CreateKey" type="Function" deprecated="false" return_value_scope="Key">
					<description> </description>
					<code_completion_hint>CreateKey</code_completion_hint>
					<code_insight_hint>Function CreateKey() As Key</code_insight_hint>
				</method>
				<method name="CreateMaterial" type="Function" deprecated="false" return_value_scope="Material">
					<description> </description>
					<code_completion_hint>CreateMaterial</code_completion_hint>
					<code_insight_hint>Function CreateMaterial() As Material</code_insight_hint>
				</method>
				<method name="CreateMaterial" type="Function" deprecated="false" return_value_scope="Material">
					<description> </description>
					<code_completion_hint>CreateMaterial</code_completion_hint>
					<code_insight_hint>Function CreateMaterial(location As String) As Material</code_insight_hint>
				</method>
				<method name="CreateTexture" type="Function" deprecated="false" return_value_scope="Texture">
					<description>Creates a texture object by name, e.g. "IMAGE*ImageName"</description>
					<code_completion_hint>CreateTexture</code_completion_hint>
					<code_insight_hint>Function CreateTexture(name As String) As Texture</code_insight_hint>
				</method>
				<method name="CreateTexture" type="Function" deprecated="false" return_value_scope="Texture">
					<description> </description>
					<code_completion_hint>CreateTexture</code_completion_hint>
					<code_insight_hint>Function CreateTexture(image As Image) As Texture</code_insight_hint>
				</method>
				<method name="Delete" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Deletes the container.</description>
					<code_completion_hint>Delete</code_completion_hint>
					<code_insight_hint>Sub Delete()</code_insight_hint>
				</method>
				<method name="DeleteAlpha" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Deletes the alpha object.</description>
					<code_completion_hint>DeleteAlpha</code_completion_hint>
					<code_insight_hint>Sub DeleteAlpha()</code_insight_hint>
				</method>
				<method name="DeleteChildren" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Deletes the container's child containers.</description>
					<code_completion_hint>DeleteChildren</code_completion_hint>
					<code_insight_hint>Sub DeleteChildren()</code_insight_hint>
				</method>
				<method name="DeleteExpert" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>DeleteExpert</code_completion_hint>
					<code_insight_hint>Sub DeleteExpert()</code_insight_hint>
				</method>
				<method name="DeleteFunction" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Deletes a plugin instance by name, e.g. "Autofollow"</description>
					<code_completion_hint>DeleteFunction</code_completion_hint>
					<code_insight_hint>Sub DeleteFunction(location As String)</code_insight_hint>
				</method>
				<method name="DeleteGeometry" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>DeleteGeometry</code_completion_hint>
					<code_insight_hint>Sub DeleteGeometry()</code_insight_hint>
				</method>
				<method name="DeleteKey" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>DeleteKey</code_completion_hint>
					<code_insight_hint>Sub DeleteKey()</code_insight_hint>
				</method>
				<method name="DeleteMaterial" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>DeleteMaterial</code_completion_hint>
					<code_insight_hint>Sub DeleteMaterial()</code_insight_hint>
				</method>
				<method name="DeleteTexture" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>DeleteTexture</code_completion_hint>
					<code_insight_hint>Sub DeleteTexture()</code_insight_hint>
				</method>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindSiblingSubContainer" type="Function" deprecated="false" return_value_scope="Container">
					<description>Searches among the container's siblings (as well as the container itself) and their sub-containers for a container with the specified name. Otherwise identical to FindSubContainer.</description>
					<code_completion_hint>FindSiblingSubContainer</code_completion_hint>
					<code_insight_hint>Function FindSiblingSubContainer(name As String) As Container</code_insight_hint>
				</method>
				<method name="FindSubContainer" type="Function" deprecated="false" return_value_scope="Container">
					<description>Searches for a sub-container with the specified name. The search mode is breadth-first. It's possible to combine multiple calls to this function into one call by concatenating the individual container names using $ as a separator. For example, FindSubContainer("name1$name2") has the same effect as FindSubContainer("name1").FindSubContainer("name2").</description>
					<code_completion_hint>FindSubContainer</code_completion_hint>
					<code_insight_hint>Function FindSubContainer(name As String) As Container</code_insight_hint>
				</method>
				<method name="FindSuperContainer" type="Function" deprecated="false" return_value_scope="Container">
					<description>Searches for a super-container with the specified name.</description>
					<code_completion_hint>FindSuperContainer</code_completion_hint>
					<code_insight_hint>Function FindSuperContainer(name As String) As Container</code_insight_hint>
				</method>
				<method name="GetBoundingBox" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Returns in v1_out and v2_out the left-bottom-back and right-top-front vertices of the container's bounding box.</description>
					<code_completion_hint>GetBoundingBox</code_completion_hint>
					<code_insight_hint>Sub GetBoundingBox(v1_out As Vertex, v2_out As Vertex)</code_insight_hint>
				</method>
				<method name="GetBoundingBoxDimensions" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Returns the dimensions (width, height, depth) of the container's bounding box. (The used bounding box was calculated in the last frame.)</description>
					<code_completion_hint>GetBoundingBoxDimensions</code_completion_hint>
					<code_insight_hint>Function GetBoundingBoxDimensions() As Vertex</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="GetChildContainerByIndex" type="Function" deprecated="false" return_value_scope="Container">
					<description>Returns the child container specified by index.</description>
					<code_completion_hint>GetChildContainerByIndex</code_completion_hint>
					<code_insight_hint>Function GetChildContainerByIndex(index As Integer) As Container</code_insight_hint>
				</method>
				<method name="GetChildContainerContainingMouseCursor" type="Function" deprecated="false" return_value_scope="Container">
					<description>Returns the first child container containing the mouse cursor.</description>
					<code_completion_hint>GetChildContainerContainingMouseCursor</code_completion_hint>
					<code_insight_hint>Function GetChildContainerContainingMouseCursor() As Container</code_insight_hint>
				</method>
				<method name="GetContainerAndSubContainers" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>GetContainerAndSubContainers</code_completion_hint>
					<code_insight_hint>Sub GetContainerAndSubContainers([out] v As Array[Container], traverseMergedGeometries As Boolean)</code_insight_hint>
				</method>
				<method name="GetDirector" type="Function" deprecated="false" return_value_scope="Director">
					<description>Finds the first director containing an animation of this container.</description>
					<code_completion_hint>GetDirector</code_completion_hint>
					<code_insight_hint>Function GetDirector() As Director</code_insight_hint>
				</method>
				<method name="GetDirectorOfMergedGeometry" type="Function" deprecated="false" return_value_scope="Director">
					<description>If this container holds a merged geometry with an embedded animation, this function returns the corresponding director.</description>
					<code_completion_hint>GetDirectorOfMergedGeometry</code_completion_hint>
					<code_insight_hint>Function GetDirectorOfMergedGeometry() As Director</code_insight_hint>
				</method>
				<method name="GetFirstActiveChildContainer" type="Function" deprecated="false" return_value_scope="Container">
					<description>Returns the first (=topmost) active child container.</description>
					<code_completion_hint>GetFirstActiveChildContainer</code_completion_hint>
					<code_insight_hint>Function GetFirstActiveChildContainer() As Container</code_insight_hint>
				</method>
				<method name="GetFunctionPluginInstance" type="Function" deprecated="false" return_value_scope="PluginInstance">
					<description>Provides access to the parameters of a function plugin residing on the container.</description>
					<code_completion_hint>GetFunctionPluginInstance</code_completion_hint>
					<code_insight_hint>Function GetFunctionPluginInstance(pluginName As String) As PluginInstance</code_insight_hint>
				</method>
				<method name="GetGeometryPluginInstance" type="Function" deprecated="false" return_value_scope="PluginInstance">
					<description>Provides access to the parameters of a geometry plugin residing on the container.</description>
					<code_completion_hint>GetGeometryPluginInstance</code_completion_hint>
					<code_insight_hint>Function GetGeometryPluginInstance() As PluginInstance</code_insight_hint>
				</method>
				<method name="GetIndexOfFirstActiveChildContainer" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Returns the 0-based index of the first active child container within the container (or -1 if there is no active child).</description>
					<code_completion_hint>GetIndexOfFirstActiveChildContainer</code_completion_hint>
					<code_insight_hint>Function GetIndexOfFirstActiveChildContainer() As Integer</code_insight_hint>
				</method>
				<method name="GetLocalIndex" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Returns the 0-based index of the container within its parent.</description>
					<code_completion_hint>GetLocalIndex</code_completion_hint>
					<code_insight_hint>Function GetLocalIndex() As Integer</code_insight_hint>
				</method>
				<method name="GetScreenBounds" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Returns in v1_out and v2_out the left-bottom and right-top screen coordinates defining the rectangle occupied by the container. (The used bounding box was calculated in the last frame.)</description>
					<code_completion_hint>GetScreenBounds</code_completion_hint>
					<code_insight_hint>Sub GetScreenBounds(v1_out As Vertex, v2_out As Vertex)</code_insight_hint>
				</method>
				<method name="GetScreenPointToGeomSurface" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>This procedure calculates the geometry intersection with the projected ray from the specified screen position and returns true on success. The intersection point is returned in world coordinates.</description>
					<code_completion_hint>GetScreenPointToGeomSurface</code_completion_hint>
					<code_insight_hint>Function GetScreenPointToGeomSurface(x As Integer, y As Integer, pos As Vertex) As Boolean</code_insight_hint>
				</method>
				<method name="GetScreenPositionOrtho" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>This procedure gets the container's screen position in the same way as you can do it via GUI in the Transformation Editor. There can't be any rotation on the object.</description>
					<code_completion_hint>GetScreenPositionOrtho</code_completion_hint>
					<code_insight_hint>Function GetScreenPositionOrtho(x As Integer, y As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="GetTransformedBoundingBox" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Returns in v1_out and v2_out the left-bottom-back and right-top-front vertices of the container's bounding box with applied transformation matrix.</description>
					<code_completion_hint>GetTransformedBoundingBox</code_completion_hint>
					<code_insight_hint>Sub GetTransformedBoundingBox(v1_out As Vertex, v2_out As Vertex)</code_insight_hint>
				</method>
				<method name="GetTransformedBoundingBoxDimensions" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Returns the dimensions (width, height, depth) of the container's bounding box with applied transformation matrix. (The used bounding box was calculated in the last frame.)</description>
					<code_completion_hint>GetTransformedBoundingBoxDimensions</code_completion_hint>
					<code_insight_hint>Function GetTransformedBoundingBoxDimensions() As Vertex</code_insight_hint>
				</method>
				<method name="GetUVCoordinatesOfScreenPoint" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Transforms (x, y) into (u, v) coordinates that are relative to the x/y cross section of the container's bounding box. The (u, v) coordinates are returned in the x and y components of the returned vertex (the z coordinate is always 0.0). If (x, y) are within the bounding-box area, u and v will be within the range [0.0, 1.0].</description>
					<code_completion_hint>GetUVCoordinatesOfScreenPoint</code_completion_hint>
					<code_insight_hint>Function GetUVCoordinatesOfScreenPoint(x As Integer, y As Integer) As Vertex</code_insight_hint>
				</method>
				<method name="HideAllChildContainers" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Makes all child containers invisible.</description>
					<code_completion_hint>HideAllChildContainers</code_completion_hint>
					<code_insight_hint>Sub HideAllChildContainers()</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="IsOnTop" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if and only if the container is on top at the mouse cursor position. For this procedure to work correctly, it is required that at least one enter or leave callback be defined on the container or on a super-container.</description>
					<code_completion_hint>IsOnTop</code_completion_hint>
					<code_insight_hint>Function IsOnTop() As Boolean</code_insight_hint>
				</method>
				<method name="IsScreenPointInBoundingBox" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if the screen point (x, y) is inside the area covered by the container's bounding box. (The used bounding box was calculated in the last frame.)</description>
					<code_completion_hint>IsScreenPointInBoundingBox</code_completion_hint>
					<code_insight_hint>Function IsScreenPointInBoundingBox(x As Integer, y As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="IsVertexInBoundingBox" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if v (which must be specified in world coordinates) is inside the container's bounding box. (The used bounding box was calculated in the last frame.)</description>
					<code_completion_hint>IsVertexInBoundingBox</code_completion_hint>
					<code_insight_hint>Function IsVertexInBoundingBox(v As Vertex) As Boolean</code_insight_hint>
				</method>
				<method name="LocalPosToScreenPos" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Converts local position to the position on the screen.</description>
					<code_completion_hint>LocalPosToScreenPos</code_completion_hint>
					<code_insight_hint>Sub LocalPosToScreenPos(pos As Vertex, [out] dX As Double, [out] dY As Double)</code_insight_hint>
				</method>
				<method name="LocalPosToWorldPos" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Converts the local position to a world coordinate space position.</description>
					<code_completion_hint>LocalPosToWorldPos</code_completion_hint>
					<code_insight_hint>Function LocalPosToWorldPos(pos As Vertex) As Vertex</code_insight_hint>
				</method>
				<method name="MoveAllChannelsToDirector" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Moves the animation channels to the specified director.</description>
					<code_completion_hint>MoveAllChannelsToDirector</code_completion_hint>
					<code_insight_hint>Sub MoveAllChannelsToDirector(director As Director)</code_insight_hint>
				</method>
				<method name="MoveTo" type="Function" deprecated="false" return_value_scope="Container">
					<description>Moves the container; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN.</description>
					<code_completion_hint>MoveTo</code_completion_hint>
					<code_insight_hint>Function MoveTo(destination As Container, where As Integer) As Container</code_insight_hint>
				</method>
				<method name="MoveToKeepTransformation" type="Function" deprecated="false" return_value_scope="Container">
					<description>Moves the container preserving the containers transformation; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN.</description>
					<code_completion_hint>MoveToKeepTransformation</code_completion_hint>
					<code_insight_hint>Function MoveToKeepTransformation(destination As Container, where As Integer) As Container</code_insight_hint>
				</method>
				<method name="RecomputeMatrix" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Recalculate transformation matrix of the container. This function is useful if you can't wait one field for the updated matrix. Use it carefully and only where it is really needed (current transformation matrix, transformed bounding box, screen-position or screen-size)</description>
					<code_completion_hint>RecomputeMatrix</code_completion_hint>
					<code_insight_hint>Sub RecomputeMatrix()</code_insight_hint>
				</method>
				<method name="ScreenOffsetToContainerOffset" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Transforms a pixel offset into the corresponding offset in local container coordinates. In other words, the vector returned by this procedure is the vector you need to add to the container's local position (i.e. Position.Xyz) in order to make the container move (dx, dy) pixels on the screen.</description>
					<code_completion_hint>ScreenOffsetToContainerOffset</code_completion_hint>
					<code_insight_hint>Function ScreenOffsetToContainerOffset(dx As Integer, dy As Integer) As Vertex</code_insight_hint>
				</method>
				<method name="ScreenPosToLocalGrid" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Converts the screen position to current grid intersection point. The returned coordinates are in local container coordinate space.</description>
					<code_completion_hint>ScreenPosToLocalGrid</code_completion_hint>
					<code_insight_hint>Function ScreenPosToLocalGrid(dX As Double, dY As Double) As Vertex</code_insight_hint>
				</method>
				<method name="ScreenPosToLocalPos" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Converts the screen position to the local container position. This would mean that if you assign the returned vertex to the local container's position then it moves exactly to the passed screen position (orthogonal to camera).</description>
					<code_completion_hint>ScreenPosToLocalPos</code_completion_hint>
					<code_insight_hint>Function ScreenPosToLocalPos(dX As Double, dY As Double) As Vertex</code_insight_hint>
				</method>
				<method name="SetCenterPositionLocked" type="Subroutine" deprecated="false" return_value_scope="">
					<description>This procedure sets the container's center point without affecting its position.</description>
					<code_completion_hint>SetCenterPositionLocked</code_completion_hint>
					<code_insight_hint>Sub SetCenterPositionLocked(center As Vertex)</code_insight_hint>
				</method>
				<method name="SetCenterScreenGridPositionLocked" type="Subroutine" deprecated="false" return_value_scope="">
					<description>This procedure sets the container's center point to the passed screen position, using the current grid, without affecting the container position.</description>
					<code_completion_hint>SetCenterScreenGridPositionLocked</code_completion_hint>
					<code_insight_hint>Sub SetCenterScreenGridPositionLocked(dX As Double, dY As Double)</code_insight_hint>
				</method>
				<method name="SetCenterScreenPositionLocked" type="Subroutine" deprecated="false" return_value_scope="">
					<description>This procedure sets the container's center point to the passed screen position without affecting the container position.</description>
					<code_completion_hint>SetCenterScreenPositionLocked</code_completion_hint>
					<code_insight_hint>Sub SetCenterScreenPositionLocked(dX As Double, dY As Double)</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
				<method name="SetScreenPositionOrtho" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>This procedure sets the container's screen position in the same way as you can do it via GUI in the Transformation Editor. There can't be any rotation on the object.</description>
					<code_completion_hint>SetScreenPositionOrtho</code_completion_hint>
					<code_insight_hint>Function SetScreenPositionOrtho(x As Integer, y As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="ShowAllChildContainers" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Makes all child containers visible.</description>
					<code_completion_hint>ShowAllChildContainers</code_completion_hint>
					<code_insight_hint>Sub ShowAllChildContainers()</code_insight_hint>
				</method>
				<method name="ShowOneChildContainer" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Makes the child container specified by index visible and all other child containers invisible.</description>
					<code_completion_hint>ShowOneChildContainer</code_completion_hint>
					<code_insight_hint>Sub ShowOneChildContainer(index As Integer)</code_insight_hint>
				</method>
				<method name="Update" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Redraws the container's entry in the scene tree GUI. Ignored in on-air mode.</description>
					<code_completion_hint>Update</code_completion_hint>
					<code_insight_hint>Sub Update()</code_insight_hint>
				</method>
				<method name="WorldPosToLocalPos" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Converts the world position to a local coordinate space position.</description>
					<code_completion_hint>WorldPosToLocalPos</code_completion_hint>
					<code_insight_hint>Function WorldPosToLocalPos(pos As Vertex) As Vertex</code_insight_hint>
				</method>
				<method name="ScreenOffsetToWorldOffset" type="Function" deprecated="true" return_value_scope="Vertex">
					<description>Deprecated.</description>
					<code_completion_hint>ScreenOffsetToWorldOffset</code_completion_hint>
					<code_insight_hint>Function ScreenOffsetToWorldOffset(dx As Integer, dy As Integer) As Vertex</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="DateTime">
			<description>A type storing date/time information.</description>
			<properties>
				<property name="DayOfMonth" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Day of month (1-31)</description>
					<code_completion_hint>DayOfMonth</code_completion_hint>
					<code_insight_hint>DayOfMonth As Integer</code_insight_hint>
				</property>
				<property name="DayOfWeek" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Day of week (0-6; Sunday = 0)</description>
					<code_completion_hint>DayOfWeek</code_completion_hint>
					<code_insight_hint>DayOfWeek As Integer</code_insight_hint>
				</property>
				<property name="DayOfYear" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Day of year (0-365)</description>
					<code_completion_hint>DayOfYear</code_completion_hint>
					<code_insight_hint>DayOfYear As Integer</code_insight_hint>
				</property>
				<property name="Hour" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Hours after midnight (0-23)</description>
					<code_completion_hint>Hour</code_completion_hint>
					<code_insight_hint>Hour As Integer</code_insight_hint>
				</property>
				<property name="Minute" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Minutes after hour (0-59)</description>
					<code_completion_hint>Minute</code_completion_hint>
					<code_insight_hint>Minute As Integer</code_insight_hint>
				</property>
				<property name="Month" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Month (1-12)</description>
					<code_completion_hint>Month</code_completion_hint>
					<code_insight_hint>Month As Integer</code_insight_hint>
				</property>
				<property name="Second" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Seconds after minute (0-59)</description>
					<code_completion_hint>Second</code_completion_hint>
					<code_insight_hint>Second As Integer</code_insight_hint>
				</property>
				<property name="TotalSeconds" type="Property" deprecated="false" return_value_scope="Integer">
					<description> </description>
					<code_completion_hint>TotalSeconds</code_completion_hint>
					<code_insight_hint>TotalSeconds As Integer</code_insight_hint>
				</property>
				<property name="Year" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Year</description>
					<code_completion_hint>Year</code_completion_hint>
					<code_insight_hint>Year As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="Normalize" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Computes DayOfWeek and DayOfYear members and forces the other members to standard ranges.</description>
					<code_completion_hint>Normalize</code_completion_hint>
					<code_insight_hint>Sub Normalize()</code_insight_hint>
				</method>
				<method name="ToString" type="Function" deprecated="false" return_value_scope="String">
					<description>Returns a date+time string of the form Wed Jan 02 02:03:55 1980.</description>
					<code_completion_hint>ToString</code_completion_hint>
					<code_insight_hint>Function ToString() As String</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Director">
			<description>A director in the stage.</description>
			<properties>
				<property name="ActionChannelCount" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the number of action channels.</description>
					<code_completion_hint>ActionChannelCount</code_completion_hint>
					<code_insight_hint>ActionChannelCount As Integer [read-only]</code_insight_hint>
				</property>
				<property name="ChildDirector" type="Property" deprecated="false" return_value_scope="Director">
					<description>The topmost child director</description>
					<code_completion_hint>ChildDirector</code_completion_hint>
					<code_insight_hint>ChildDirector As Director [read-only]</code_insight_hint>
				</property>
				<property name="EventChannel" type="Property" deprecated="false" return_value_scope="Channel">
					<description>Gets the event channel.</description>
					<code_completion_hint>EventChannel</code_completion_hint>
					<code_insight_hint>EventChannel As Channel [read-only]</code_insight_hint>
				</property>
				<property name="Field" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The director field</description>
					<code_completion_hint>Field</code_completion_hint>
					<code_insight_hint>Field As Integer [read-only]</code_insight_hint>
				</property>
				<property name="Name" type="Property" deprecated="false" return_value_scope="String">
					<description>The name of the director</description>
					<code_completion_hint>Name</code_completion_hint>
					<code_insight_hint>Name As String</code_insight_hint>
				</property>
				<property name="NextDirector" type="Property" deprecated="false" return_value_scope="Director">
					<description>The next director in the stage tree</description>
					<code_completion_hint>NextDirector</code_completion_hint>
					<code_insight_hint>NextDirector As Director [read-only]</code_insight_hint>
				</property>
				<property name="Offset" type="Property" deprecated="false" return_value_scope="Double">
					<description>The offset of the director (wrt to the parent director)</description>
					<code_completion_hint>Offset</code_completion_hint>
					<code_insight_hint>Offset As Double</code_insight_hint>
				</property>
				<property name="ParentDirector" type="Property" deprecated="false" return_value_scope="Director">
					<description>The parent director</description>
					<code_completion_hint>ParentDirector</code_completion_hint>
					<code_insight_hint>ParentDirector As Director [read-only]</code_insight_hint>
				</property>
				<property name="PreviousDirector" type="Property" deprecated="false" return_value_scope="Director">
					<description>The previous director in the stage tree</description>
					<code_completion_hint>PreviousDirector</code_completion_hint>
					<code_insight_hint>PreviousDirector As Director [read-only]</code_insight_hint>
				</property>
				<property name="Reverse" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Enables/Disables reverse playing.</description>
					<code_completion_hint>Reverse</code_completion_hint>
					<code_insight_hint>Reverse As Boolean</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="Time" type="Property" deprecated="false" return_value_scope="Double">
					<description>The director time</description>
					<code_completion_hint>Time</code_completion_hint>
					<code_insight_hint>Time As Double</code_insight_hint>
				</property>
				<property name="TotalOffset" type="Property" deprecated="false" return_value_scope="Double">
					<description>The sum of all offsets (of this director and its parents)</description>
					<code_completion_hint>TotalOffset</code_completion_hint>
					<code_insight_hint>TotalOffset As Double [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="NumActionChannels" type="Property" deprecated="true" return_value_scope="Integer">
					<description>Deprecated. Use ActionChannelCount.</description>
					<code_completion_hint>NumActionChannels</code_completion_hint>
					<code_insight_hint>NumActionChannels As Integer [read-only]</code_insight_hint>
				</property>
				<property name="NumAnimationChannels" type="Property" deprecated="true" return_value_scope="Integer">
					<description>Deprecated. Call GetAnimationChannels to get a list of animation channels.</description>
					<code_completion_hint>NumAnimationChannels</code_completion_hint>
					<code_insight_hint>NumAnimationChannels As Integer [read-only]</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="AddDirector" type="Function" deprecated="false" return_value_scope="Director">
					<description>Inserts a new director; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN</description>
					<code_completion_hint>AddDirector</code_completion_hint>
					<code_insight_hint>Function AddDirector(where As Integer) As Director</code_insight_hint>
				</method>
				<method name="ContinueAnimation" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Continues the animation.</description>
					<code_completion_hint>ContinueAnimation</code_completion_hint>
					<code_insight_hint>Sub ContinueAnimation()</code_insight_hint>
				</method>
				<method name="CopyTo" type="Function" deprecated="false" return_value_scope="Director">
					<description>Copies a director; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN</description>
					<code_completion_hint>CopyTo</code_completion_hint>
					<code_insight_hint>Function CopyTo(destination As Director, where As Integer) As Director</code_insight_hint>
				</method>
				<method name="Delete" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Removes this director from the stage.</description>
					<code_completion_hint>Delete</code_completion_hint>
					<code_insight_hint>Sub Delete()</code_insight_hint>
				</method>
				<method name="FindActionChannel" type="Function" deprecated="false" return_value_scope="Channel">
					<description>Searches for an action channel named channelName.</description>
					<code_completion_hint>FindActionChannel</code_completion_hint>
					<code_insight_hint>Function FindActionChannel(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindChannel" type="Function" deprecated="false" return_value_scope="Channel">
					<description>Searches for an animation channel named channelName.</description>
					<code_completion_hint>FindChannel</code_completion_hint>
					<code_insight_hint>Function FindChannel(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframe" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>Searches for a keyframe named keyframeName.</description>
					<code_completion_hint>FindKeyframe</code_completion_hint>
					<code_insight_hint>Function FindKeyframe(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindSubDirector" type="Function" deprecated="false" return_value_scope="Director">
					<description>Searches for a sub-director named name.</description>
					<code_completion_hint>FindSubDirector</code_completion_hint>
					<code_insight_hint>Function FindSubDirector(name As String) As Director</code_insight_hint>
				</method>
				<method name="GetActionChannel" type="Function" deprecated="false" return_value_scope="Channel">
					<description>Returns the action channel at index.</description>
					<code_completion_hint>GetActionChannel</code_completion_hint>
					<code_insight_hint>Function GetActionChannel(index As Integer) As Channel</code_insight_hint>
				</method>
				<method name="GetAnimationChannels" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Fills the specified array with the director's animation channels.</description>
					<code_completion_hint>GetAnimationChannels</code_completion_hint>
					<code_insight_hint>Sub GetAnimationChannels([out] v As Array[Channel])</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="GetKeyframes" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Fills the specified array with the director's keyframes.</description>
					<code_completion_hint>GetKeyframes</code_completion_hint>
					<code_insight_hint>Sub GetKeyframes([out] v As Array[Keyframe])</code_insight_hint>
				</method>
				<method name="HasAnimationChannels" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Determines whether this director contains any animation channels (not counting channels in sub-directors).</description>
					<code_completion_hint>HasAnimationChannels</code_completion_hint>
					<code_insight_hint>Function HasAnimationChannels() As Boolean</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="IsAnimationRunning" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if the animation of this director is active.</description>
					<code_completion_hint>IsAnimationRunning</code_completion_hint>
					<code_insight_hint>Function IsAnimationRunning() As Boolean</code_insight_hint>
				</method>
				<method name="MoveTo" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Moves a director; where =; TL_NEXT; TL_PREVIOUS; TL_DOWN</description>
					<code_completion_hint>MoveTo</code_completion_hint>
					<code_insight_hint>Sub MoveTo(destination As Director, where As Integer)</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
				<method name="Show" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets director time.</description>
					<code_completion_hint>Show</code_completion_hint>
					<code_insight_hint>Sub Show(time As Double)</code_insight_hint>
				</method>
				<method name="StartAnimation" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Starts the animation in this director and its sub-directors.</description>
					<code_completion_hint>StartAnimation</code_completion_hint>
					<code_insight_hint>Sub StartAnimation()</code_insight_hint>
				</method>
				<method name="StopAnimation" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Stops the animation of this director and its sub-directors.</description>
					<code_completion_hint>StopAnimation</code_completion_hint>
					<code_insight_hint>Sub StopAnimation()</code_insight_hint>
				</method>
				<method name="StopAnimation" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Stops the animation of this director and, optionally, its sub-directors.</description>
					<code_completion_hint>StopAnimation</code_completion_hint>
					<code_insight_hint>Sub StopAnimation(recursive As Boolean)</code_insight_hint>
				</method>
				<method name="GetAnimationChannel" type="Function" deprecated="true" return_value_scope="Channel">
					<description>Deprecated. Use GetAnimationChannels instead.</description>
					<code_completion_hint>GetAnimationChannel</code_completion_hint>
					<code_insight_hint>Function GetAnimationChannel(index As Integer) As Channel</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Double">
			<description>A double precision floating-point number (64 bits).</description>
			<properties />
			<member_methods />
		</scope>
		<scope name="Expert">
			<description>A container's Expert property. This type provides access to the parameters of the Expert plugin.</description>
			<properties>
				<property name="BackFace" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set back face rendering.</description>
					<code_completion_hint>BackFace</code_completion_hint>
					<code_insight_hint>BackFace As Boolean</code_insight_hint>
				</property>
				<property name="ExactPicking" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set exact picking mode.</description>
					<code_completion_hint>ExactPicking</code_completion_hint>
					<code_insight_hint>ExactPicking As Boolean</code_insight_hint>
				</property>
				<property name="LineAntialiasing" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set line antialiasing.</description>
					<code_completion_hint>LineAntialiasing</code_completion_hint>
					<code_insight_hint>LineAntialiasing As Boolean</code_insight_hint>
				</property>
				<property name="Mirror" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set mirror mode. Possible settings are: ; EXPERT_MIRROR_NONE; EXPERT_MIRROR_X; EXPERT_MIRROR_Y; EXPERT_MIRROR_Z</description>
					<code_completion_hint>Mirror</code_completion_hint>
					<code_insight_hint>Mirror As Integer</code_insight_hint>
				</property>
				<property name="Outline" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set outline rendering.</description>
					<code_completion_hint>Outline</code_completion_hint>
					<code_insight_hint>Outline As Boolean</code_insight_hint>
				</property>
				<property name="RenderMode" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set render mode. Possible settings are: ; EXPERT_RENDER_ADD; EXPERT_RENDER_BLEND; EXPERT_RENDER_REV_SUBTRACT; EXPERT_RENDER_SUBTRACT; EXPERT_RENDER_MULTIPLY; EXPERT_RENDER_REV_MULTIPLY</description>
					<code_completion_hint>RenderMode</code_completion_hint>
					<code_insight_hint>RenderMode As Integer</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="SeparateSpecular" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set separate specular rendering.</description>
					<code_completion_hint>SeparateSpecular</code_completion_hint>
					<code_insight_hint>SeparateSpecular As Boolean</code_insight_hint>
				</property>
				<property name="ShadeModel" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set shading model. Possible modes are: ; EXPERT_SHADE_FLAT; EXPERT_SHADE_SMOOTH</description>
					<code_completion_hint>ShadeModel</code_completion_hint>
					<code_insight_hint>ShadeModel As Integer</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="TransparancyMode" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get/Set transparancy mode. Possible settings are: ; EXPERT_TRANSP_BLEND; EXPERT_TRANSP_MASK; EXPERT_TRANSP_FASTEST; EXPERT_TRANSP_HIGH_QUALITY</description>
					<code_completion_hint>TransparancyMode</code_completion_hint>
					<code_insight_hint>TransparancyMode As Integer</code_insight_hint>
				</property>
				<property name="TwoSidedLighting" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set two-sided lighting.</description>
					<code_completion_hint>TwoSidedLighting</code_completion_hint>
					<code_insight_hint>TwoSidedLighting As Boolean</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="Wireframe" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set drawing in wireframe mode.</description>
					<code_completion_hint>Wireframe</code_completion_hint>
					<code_insight_hint>Wireframe As Boolean</code_insight_hint>
				</property>
				<property name="WireframeWidth" type="Property" deprecated="false" return_value_scope="Double">
					<description>Get/Set line width in wireframe mode (typically ranges from 0.0 to 10.0).</description>
					<code_completion_hint>WireframeWidth</code_completion_hint>
					<code_insight_hint>WireframeWidth As Double</code_insight_hint>
				</property>
				<property name="ZBuffer" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Get/Set drawing of Z-Buffer.</description>
					<code_completion_hint>ZBuffer</code_completion_hint>
					<code_insight_hint>ZBuffer As Boolean</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Geometry">
			<description>A container's geometry. Depending on whether the geometry is a plugin or a text, this type provides access to the parameters of the plugin or the text.</description>
			<properties>
				<property name="Active" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>Active</code_completion_hint>
					<code_insight_hint>Active As Boolean</code_insight_hint>
				</property>
				<property name="Direction" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The text direction:; TEXT_DIRECTION_LEFT_TO_RIGHT; TEXT_DIRECTION_RIGHT_TO_LEFT; TEXT_DIRECTION_TOP_TO_BOTTOM; TEXT_DIRECTION_BOTTOM_TO_TOP</description>
					<code_completion_hint>Direction</code_completion_hint>
					<code_insight_hint>Direction As Integer</code_insight_hint>
				</property>
				<property name="Kerning" type="Property" deprecated="false" return_value_scope="Double">
					<description>The kerning value</description>
					<code_completion_hint>Kerning</code_completion_hint>
					<code_insight_hint>Kerning As Double</code_insight_hint>
				</property>
				<property name="LineSpacing" type="Property" deprecated="false" return_value_scope="Double">
					<description>The line spacing</description>
					<code_completion_hint>LineSpacing</code_completion_hint>
					<code_insight_hint>LineSpacing As Double</code_insight_hint>
				</property>
				<property name="Name" type="Property" deprecated="false" return_value_scope="String">
					<description>The name of the geometry</description>
					<code_completion_hint>Name</code_completion_hint>
					<code_insight_hint>Name As String [read-only]</code_insight_hint>
				</property>
				<property name="Orientation" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The text orientation:; TEXT_ORIENTATION_LEFT; TEXT_ORIENTATION_RIGHT; TEXT_ORIENTATION_CENTER; TEXT_ORIENTATION_CHAR</description>
					<code_completion_hint>Orientation</code_completion_hint>
					<code_insight_hint>Orientation As Integer</code_insight_hint>
				</property>
				<property name="PluginInstance" type="Property" deprecated="false" return_value_scope="PluginInstance">
					<description>Gets the geometry's plugin data (if this is a geometry plugin).</description>
					<code_completion_hint>PluginInstance</code_completion_hint>
					<code_insight_hint>PluginInstance As PluginInstance [read-only]</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="Text" type="Property" deprecated="false" return_value_scope="String">
					<description>The text string (if this is a text geometry)</description>
					<code_completion_hint>Text</code_completion_hint>
					<code_insight_hint>Text As String</code_insight_hint>
				</property>
				<property name="Uuid" type="Property" deprecated="false" return_value_scope="Uuid">
					<description>The UUID of the geometry</description>
					<code_completion_hint>Uuid</code_completion_hint>
					<code_insight_hint>Uuid As Uuid [read-only]</code_insight_hint>
				</property>
				<property name="VerticalOrientation" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The vertical text orientation:; TEXT_ORIENTATION_VERTICAL_TOP; TEXT_ORIENTATION_VERTICAL_BOTTOM; TEXT_ORIENTATION_VERTICAL_CENTER; TEXT_ORIENTATION_VERTICAL_FIRST_LINE</description>
					<code_completion_hint>VerticalOrientation</code_completion_hint>
					<code_insight_hint>VerticalOrientation As Integer</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="WordSpacing" type="Property" deprecated="false" return_value_scope="Double">
					<description>The word spacing</description>
					<code_completion_hint>WordSpacing</code_completion_hint>
					<code_insight_hint>WordSpacing As Double</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="GetParameterBool" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Gets a geometry parameter of type Boolean.</description>
					<code_completion_hint>GetParameterBool</code_completion_hint>
					<code_insight_hint>Function GetParameterBool(parName As String) As Boolean</code_insight_hint>
				</method>
				<method name="GetParameterColor" type="Function" deprecated="false" return_value_scope="Color">
					<description>Gets a geometry parameter of type Color.</description>
					<code_completion_hint>GetParameterColor</code_completion_hint>
					<code_insight_hint>Function GetParameterColor(parName As String) As Color</code_insight_hint>
				</method>
				<method name="GetParameterContainer" type="Function" deprecated="false" return_value_scope="Container">
					<description>Gets a geometry parameter of type Container.</description>
					<code_completion_hint>GetParameterContainer</code_completion_hint>
					<code_insight_hint>Function GetParameterContainer(parName As String) As Container</code_insight_hint>
				</method>
				<method name="GetParameterDouble" type="Function" deprecated="false" return_value_scope="Double">
					<description>Gets a geometry parameter of type Double.</description>
					<code_completion_hint>GetParameterDouble</code_completion_hint>
					<code_insight_hint>Function GetParameterDouble(parName As String) As Double</code_insight_hint>
				</method>
				<method name="GetParameterInt" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Gets a geometry parameter of type Integer.</description>
					<code_completion_hint>GetParameterInt</code_completion_hint>
					<code_insight_hint>Function GetParameterInt(parName As String) As Integer</code_insight_hint>
				</method>
				<method name="GetParameterString" type="Function" deprecated="false" return_value_scope="String">
					<description>Gets a geometry parameter of type String.</description>
					<code_completion_hint>GetParameterString</code_completion_hint>
					<code_insight_hint>Function GetParameterString(parName As String) As String</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="RegisterChangedCallback" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Causes OnGeometryChanged to be invoked whenever the geometry changes.</description>
					<code_completion_hint>RegisterChangedCallback</code_completion_hint>
					<code_insight_hint>Sub RegisterChangedCallback()</code_insight_hint>
				</method>
				<method name="RegisterTextChangedCallback" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Causes OnGeometryChanged to be invoked whenever the geometry's text changes.</description>
					<code_completion_hint>RegisterTextChangedCallback</code_completion_hint>
					<code_insight_hint>Sub RegisterTextChangedCallback()</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
				<method name="SetParameterBool" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a geometry parameter of type Boolean.</description>
					<code_completion_hint>SetParameterBool</code_completion_hint>
					<code_insight_hint>Sub SetParameterBool(parName As String, v As Boolean)</code_insight_hint>
				</method>
				<method name="SetParameterColor" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a geometry parameter of type Color.</description>
					<code_completion_hint>SetParameterColor</code_completion_hint>
					<code_insight_hint>Sub SetParameterColor(parName As String, v As Color)</code_insight_hint>
				</method>
				<method name="SetParameterContainer" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a geometry parameter of type Container.</description>
					<code_completion_hint>SetParameterContainer</code_completion_hint>
					<code_insight_hint>Sub SetParameterContainer(parName As String, v As Container)</code_insight_hint>
				</method>
				<method name="SetParameterDouble" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a geometry parameter of type Double.</description>
					<code_completion_hint>SetParameterDouble</code_completion_hint>
					<code_insight_hint>Sub SetParameterDouble(parName As String, v As Double)</code_insight_hint>
				</method>
				<method name="SetParameterInt" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a geometry parameter of type Integer.</description>
					<code_completion_hint>SetParameterInt</code_completion_hint>
					<code_insight_hint>Sub SetParameterInt(parName As String, v As Integer)</code_insight_hint>
				</method>
				<method name="SetParameterString" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a geometry parameter of type String.</description>
					<code_completion_hint>SetParameterString</code_completion_hint>
					<code_insight_hint>Sub SetParameterString(parName As String, v As String)</code_insight_hint>
				</method>
				<method name="UnregisterChangedCallback" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Removes the binding set up by RegisterChangedCallback.</description>
					<code_completion_hint>UnregisterChangedCallback</code_completion_hint>
					<code_insight_hint>Sub UnregisterChangedCallback()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Grid">
			<description>A grid object.</description>
			<properties>
				<property name="Locked" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Gets or sets grid lock.</description>
					<code_completion_hint>Locked</code_completion_hint>
					<code_insight_hint>Locked As Boolean</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="Type" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets or sets the grid type. Possible types are: ; GRID_TYPE_XY; GRID_TYPE_XZ; GRID_TYPE_ZY; GRID_TYPE_FREE; GRID_TYPE_NONE</description>
					<code_completion_hint>Type</code_completion_hint>
					<code_insight_hint>Type As Integer</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="MoveToContainer" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Moves grid to the specified container and aligns it.</description>
					<code_completion_hint>MoveToContainer</code_completion_hint>
					<code_insight_hint>Sub MoveToContainer(container As Container)</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Integer">
			<description>A 32-bit signed integer.</description>
			<properties />
			<member_methods />
		</scope>
		<scope name="Key">
			<description>A key object. This is used to control a container's key object.</description>
			<properties>
				<property name="Active" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>Active</code_completion_hint>
					<code_insight_hint>Active As Boolean</code_insight_hint>
				</property>
				<property name="AlphaValue" type="Property" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>AlphaValue</code_completion_hint>
					<code_insight_hint>AlphaValue As Double</code_insight_hint>
				</property>
				<property name="AutoAlpha" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>AutoAlpha</code_completion_hint>
					<code_insight_hint>AutoAlpha As Boolean</code_insight_hint>
				</property>
				<property name="DrawKey" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>DrawKey</code_completion_hint>
					<code_insight_hint>DrawKey As Boolean</code_insight_hint>
				</property>
				<property name="DrawRGB" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>DrawRGB</code_completion_hint>
					<code_insight_hint>DrawRGB As Boolean</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Keyframe">
			<description>An animation keyframe.</description>
			<properties>
				<property name="ActionString" type="Property" deprecated="false" return_value_scope="String">
					<description>Gets or sets the command string of an action keyframe.</description>
					<code_completion_hint>ActionString</code_completion_hint>
					<code_insight_hint>ActionString As String</code_insight_hint>
				</property>
				<property name="BoolValue" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Gets or sets the value of a boolean keyframe.</description>
					<code_completion_hint>BoolValue</code_completion_hint>
					<code_insight_hint>BoolValue As Boolean</code_insight_hint>
				</property>
				<property name="Channel" type="Property" deprecated="false" return_value_scope="Channel">
					<description>Gets the channel that contains this keyframe.</description>
					<code_completion_hint>Channel</code_completion_hint>
					<code_insight_hint>Channel As Channel [read-only]</code_insight_hint>
				</property>
				<property name="ColorValue" type="Property" deprecated="false" return_value_scope="Color">
					<description>Gets or sets the value of a color keyframe.</description>
					<code_completion_hint>ColorValue</code_completion_hint>
					<code_insight_hint>ColorValue As Color</code_insight_hint>
				</property>
				<property name="EventDirection" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get or sets the direction of an event keyframe.</description>
					<code_completion_hint>EventDirection</code_completion_hint>
					<code_insight_hint>EventDirection As Integer</code_insight_hint>
				</property>
				<property name="EventDuration" type="Property" deprecated="false" return_value_scope="Double">
					<description>Get or sets the duration of an event keyframe (in seconds).</description>
					<code_completion_hint>EventDuration</code_completion_hint>
					<code_insight_hint>EventDuration As Double</code_insight_hint>
				</property>
				<property name="EventValue" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Get or sets the type of an event keyframe.</description>
					<code_completion_hint>EventValue</code_completion_hint>
					<code_insight_hint>EventValue As Integer</code_insight_hint>
				</property>
				<property name="FloatValue" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the value of a float keyframe.</description>
					<code_completion_hint>FloatValue</code_completion_hint>
					<code_insight_hint>FloatValue As Double</code_insight_hint>
				</property>
				<property name="IntValue" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets or sets the value of an integer keyframe.</description>
					<code_completion_hint>IntValue</code_completion_hint>
					<code_insight_hint>IntValue As Integer</code_insight_hint>
				</property>
				<property name="Locked" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Gets or sets the locked status of a path point keyframe.</description>
					<code_completion_hint>Locked</code_completion_hint>
					<code_insight_hint>Locked As Boolean</code_insight_hint>
				</property>
				<property name="MaterialValue" type="Property" deprecated="false" return_value_scope="Material">
					<description>Gets or sets the value of a material keyframe.</description>
					<code_completion_hint>MaterialValue</code_completion_hint>
					<code_insight_hint>MaterialValue As Material [read-only]</code_insight_hint>
				</property>
				<property name="Name" type="Property" deprecated="false" return_value_scope="String">
					<description>Gets or sets the keyframe's name.</description>
					<code_completion_hint>Name</code_completion_hint>
					<code_insight_hint>Name As String</code_insight_hint>
				</property>
				<property name="NextKeyframe" type="Property" deprecated="false" return_value_scope="Keyframe">
					<description>Gets the next keyframe.</description>
					<code_completion_hint>NextKeyframe</code_completion_hint>
					<code_insight_hint>NextKeyframe As Keyframe [read-only]</code_insight_hint>
				</property>
				<property name="NumberOfAxes" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Returns the number of spline axes.</description>
					<code_completion_hint>NumberOfAxes</code_completion_hint>
					<code_insight_hint>NumberOfAxes As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PathHandle" type="Property" deprecated="false" return_value_scope="BezierHandle">
					<description>Gets the associated path handle if this is a position keyframe. If not, Null is returned.</description>
					<code_completion_hint>PathHandle</code_completion_hint>
					<code_insight_hint>PathHandle As BezierHandle [read-only]</code_insight_hint>
				</property>
				<property name="PreviousKeyframe" type="Property" deprecated="false" return_value_scope="Keyframe">
					<description>Gets the previous keyframe.</description>
					<code_completion_hint>PreviousKeyframe</code_completion_hint>
					<code_insight_hint>PreviousKeyframe As Keyframe [read-only]</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="Time" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the keyframe's time (in seconds).</description>
					<code_completion_hint>Time</code_completion_hint>
					<code_insight_hint>Time As Double</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="XyzValue" type="Property" deprecated="false" return_value_scope="Vertex">
					<description>Gets or sets the value of a a rotation or scaling keyframe or a path point keyframe.</description>
					<code_completion_hint>XyzValue</code_completion_hint>
					<code_insight_hint>XyzValue As Vertex</code_insight_hint>
				</property>
				<property name="NumAxes" type="Property" deprecated="true" return_value_scope="Integer">
					<description>Deprecated. Use NumberOfAxes.</description>
					<code_completion_hint>NumAxes</code_completion_hint>
					<code_insight_hint>NumAxes As Integer [read-only]</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="Delete" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Deletes the keyframe.</description>
					<code_completion_hint>Delete</code_completion_hint>
					<code_insight_hint>Function Delete() As Boolean</code_insight_hint>
				</method>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetBezierHandle" type="Function" deprecated="false" return_value_scope="BezierHandle">
					<description>Returns the bezier handle for the specified axis. The axis parameter is only used if the keyframe has multiple splines, which is the case for rotation, scaling, and material keyframes. When called on a position keyframe, this procedure returns the handle for the distance spline. To get the path handle, use the PathHandle property instead.</description>
					<code_completion_hint>GetBezierHandle</code_completion_hint>
					<code_insight_hint>Function GetBezierHandle(axis As Integer) As BezierHandle</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
				<method name="UpdateAnimation" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Update animation to reflect changes to keyframe. (This update isn't performed in OnAir mode where the update is done as soon as the animation is started.)</description>
					<code_completion_hint>UpdateAnimation</code_completion_hint>
					<code_insight_hint>Sub UpdateAnimation()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Light">
			<description>A light object. Light objects are returned by the Scene's GetLight member.</description>
			<properties>
				<property name="Attenuation" type="Property" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>Attenuation</code_completion_hint>
					<code_insight_hint>Attenuation As Double</code_insight_hint>
				</property>
				<property name="Color" type="Property" deprecated="false" return_value_scope="Color">
					<description> </description>
					<code_completion_hint>Color</code_completion_hint>
					<code_insight_hint>Color As Color</code_insight_hint>
				</property>
				<property name="Direction" type="Property" deprecated="false" return_value_scope="Rotation">
					<description> </description>
					<code_completion_hint>Direction</code_completion_hint>
					<code_insight_hint>Direction As Rotation</code_insight_hint>
				</property>
				<property name="Position" type="Property" deprecated="false" return_value_scope="Position">
					<description> </description>
					<code_completion_hint>Position</code_completion_hint>
					<code_insight_hint>Position As Position</code_insight_hint>
				</property>
				<property name="PositionTrackingActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>PositionTrackingActive</code_completion_hint>
					<code_insight_hint>PositionTrackingActive As Boolean</code_insight_hint>
				</property>
				<property name="PositionTrackingContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description> </description>
					<code_completion_hint>PositionTrackingContainer</code_completion_hint>
					<code_insight_hint>PositionTrackingContainer As Container</code_insight_hint>
				</property>
				<property name="RotationTrackingActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>RotationTrackingActive</code_completion_hint>
					<code_insight_hint>RotationTrackingActive As Boolean</code_insight_hint>
				</property>
				<property name="RotationTrackingContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description> </description>
					<code_completion_hint>RotationTrackingContainer</code_completion_hint>
					<code_insight_hint>RotationTrackingContainer As Container</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="Type" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The light type:; LIGHT_TYPE_LOCAL; LIGHT_TYPE_SPOT; LIGHT_TYPE_INFINITE</description>
					<code_completion_hint>Type</code_completion_hint>
					<code_insight_hint>Type As Integer</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="ResetPositionTracking" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>ResetPositionTracking</code_completion_hint>
					<code_insight_hint>Sub ResetPositionTracking()</code_insight_hint>
				</method>
				<method name="ResetRotationTracking" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>ResetRotationTracking</code_completion_hint>
					<code_insight_hint>Sub ResetRotationTracking()</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Material">
			<description>A material object. This is used to control a container's material.</description>
			<properties>
				<property name="Alpha" type="Property" deprecated="false" return_value_scope="Double">
					<description>The alpha value [0.0, 1.0]</description>
					<code_completion_hint>Alpha</code_completion_hint>
					<code_insight_hint>Alpha As Double</code_insight_hint>
				</property>
				<property name="Ambient" type="Property" deprecated="false" return_value_scope="Color">
					<description>The ambient color</description>
					<code_completion_hint>Ambient</code_completion_hint>
					<code_insight_hint>Ambient As Color</code_insight_hint>
				</property>
				<property name="Color" type="Property" deprecated="false" return_value_scope="Color">
					<description>The color</description>
					<code_completion_hint>Color</code_completion_hint>
					<code_insight_hint>Color As Color</code_insight_hint>
				</property>
				<property name="Diffuse" type="Property" deprecated="false" return_value_scope="Color">
					<description>The diffuse color</description>
					<code_completion_hint>Diffuse</code_completion_hint>
					<code_insight_hint>Diffuse As Color</code_insight_hint>
				</property>
				<property name="Emission" type="Property" deprecated="false" return_value_scope="Color">
					<description>The emission color</description>
					<code_completion_hint>Emission</code_completion_hint>
					<code_insight_hint>Emission As Color</code_insight_hint>
				</property>
				<property name="Lit" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Controls whether lighting is enabled.</description>
					<code_completion_hint>Lit</code_completion_hint>
					<code_insight_hint>Lit As Boolean</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Shininess" type="Property" deprecated="false" return_value_scope="Double">
					<description>The shininess [0.0, 1.0]</description>
					<code_completion_hint>Shininess</code_completion_hint>
					<code_insight_hint>Shininess As Double</code_insight_hint>
				</property>
				<property name="Specular" type="Property" deprecated="false" return_value_scope="Color">
					<description>The specular color</description>
					<code_completion_hint>Specular</code_completion_hint>
					<code_insight_hint>Specular As Color</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Matrix">
			<description>A 4x4 matrix. The index operator [] can be used to access individual entries, with indices 0, 1, 2, 3 referring to the entries of the first column, 4, 5, 6, 7 to the second, etc.</description>
			<properties />
			<member_methods>
				<method name="Frustum" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>Frustum</code_completion_hint>
					<code_insight_hint>Sub Frustum(left As Double, right As Double, bottom As Double, top As Double, near As Double, far As Double)</code_insight_hint>
				</method>
				<method name="GetDeterminant" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>GetDeterminant</code_completion_hint>
					<code_insight_hint>Function GetDeterminant() As Double</code_insight_hint>
				</method>
				<method name="GetRotation" type="Function" deprecated="false" return_value_scope="Vertex">
					<description> </description>
					<code_completion_hint>GetRotation</code_completion_hint>
					<code_insight_hint>Function GetRotation() As Vertex</code_insight_hint>
				</method>
				<method name="GetScaling" type="Function" deprecated="false" return_value_scope="Vertex">
					<description> </description>
					<code_completion_hint>GetScaling</code_completion_hint>
					<code_insight_hint>Function GetScaling() As Vertex</code_insight_hint>
				</method>
				<method name="GetScaling2" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Returns the squared scaling factors.</description>
					<code_completion_hint>GetScaling2</code_completion_hint>
					<code_insight_hint>Function GetScaling2() As Vertex</code_insight_hint>
				</method>
				<method name="GetTranslation" type="Function" deprecated="false" return_value_scope="Vertex">
					<description> </description>
					<code_completion_hint>GetTranslation</code_completion_hint>
					<code_insight_hint>Function GetTranslation() As Vertex</code_insight_hint>
				</method>
				<method name="Invert" type="Function" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>Invert</code_completion_hint>
					<code_insight_hint>Function Invert() As Boolean</code_insight_hint>
				</method>
				<method name="LoadIdentity" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>LoadIdentity</code_completion_hint>
					<code_insight_hint>Sub LoadIdentity()</code_insight_hint>
				</method>
				<method name="LoadMatrix" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Performs a glLoadMatrix().</description>
					<code_completion_hint>LoadMatrix</code_completion_hint>
					<code_insight_hint>Sub LoadMatrix()</code_insight_hint>
				</method>
				<method name="MultMatrix" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Performs a glMultMatrix().</description>
					<code_completion_hint>MultMatrix</code_completion_hint>
					<code_insight_hint>Sub MultMatrix()</code_insight_hint>
				</method>
				<method name="Ortho" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>Ortho</code_completion_hint>
					<code_insight_hint>Sub Ortho(left As Double, right As Double, bottom As Double, top As Double, near As Double, far As Double)</code_insight_hint>
				</method>
				<method name="Perspective" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>Perspective</code_completion_hint>
					<code_insight_hint>Sub Perspective(fov As Double, aspect As Double, near As Double, far As Double)</code_insight_hint>
				</method>
				<method name="Rotate" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>Rotate</code_completion_hint>
					<code_insight_hint>Sub Rotate(angle As Double, v As Vertex)</code_insight_hint>
				</method>
				<method name="Rotate" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>Rotate</code_completion_hint>
					<code_insight_hint>Sub Rotate(v As Vertex)</code_insight_hint>
				</method>
				<method name="RotateX" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>RotateX</code_completion_hint>
					<code_insight_hint>Sub RotateX(angle As Double)</code_insight_hint>
				</method>
				<method name="RotateY" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>RotateY</code_completion_hint>
					<code_insight_hint>Sub RotateY(angle As Double)</code_insight_hint>
				</method>
				<method name="RotateZ" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>RotateZ</code_completion_hint>
					<code_insight_hint>Sub RotateZ(angle As Double)</code_insight_hint>
				</method>
				<method name="Scale" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>Scale</code_completion_hint>
					<code_insight_hint>Sub Scale(v As Vertex)</code_insight_hint>
				</method>
				<method name="Translate" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>Translate</code_completion_hint>
					<code_insight_hint>Sub Translate(v As Vertex)</code_insight_hint>
				</method>
				<method name="Transpose" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>Transpose</code_completion_hint>
					<code_insight_hint>Sub Transpose()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="PluginInstance">
			<description>This type provides access to the parameters of geometry or function plugin. Objects of this type are returned by members of Geometry and Container.</description>
			<properties>
				<property name="Active" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Gets or sets the plugin instance's active state.</description>
					<code_completion_hint>Active</code_completion_hint>
					<code_insight_hint>Active As Boolean</code_insight_hint>
				</property>
				<property name="MTAlignGrid" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Gets or sets grid alignment on or off (default).</description>
					<code_completion_hint>MTAlignGrid</code_completion_hint>
					<code_insight_hint>MTAlignGrid As Boolean</code_insight_hint>
				</property>
				<property name="MTDOFEventDistribution" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Distribute DOF events to other plugin instances (default) or fires them only on the local instance.</description>
					<code_completion_hint>MTDOFEventDistribution</code_completion_hint>
					<code_insight_hint>MTDOFEventDistribution As Boolean</code_insight_hint>
				</property>
				<property name="MTGrid" type="Property" deprecated="false" return_value_scope="Grid">
					<description>Gets or sets the grid for the current plugin instance.</description>
					<code_completion_hint>MTGrid</code_completion_hint>
					<code_insight_hint>MTGrid As Grid</code_insight_hint>
				</property>
				<property name="MTRegistered" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Is true if a control type was already registered for the current plugin instance.</description>
					<code_completion_hint>MTRegistered</code_completion_hint>
					<code_insight_hint>MTRegistered As Boolean [read-only]</code_insight_hint>
				</property>
				<property name="MTUseCenter" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Gets or sets automatic center shift on (default) or off.</description>
					<code_completion_hint>MTUseCenter</code_completion_hint>
					<code_insight_hint>MTUseCenter As Boolean</code_insight_hint>
				</property>
				<property name="PluginName" type="Property" deprecated="false" return_value_scope="String">
					<description>Gets the plugin name.</description>
					<code_completion_hint>PluginName</code_completion_hint>
					<code_insight_hint>PluginName As String [read-only]</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Script" type="Property" deprecated="false" return_value_scope="Script">
					<description>Provides dynamic access to the script functions of the plugin instance. (This only makes sense for scripted plugins.)</description>
					<code_completion_hint>Script</code_completion_hint>
					<code_insight_hint>Script As Script [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="GetParameterBool" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Gets a parameter value of type Boolean.</description>
					<code_completion_hint>GetParameterBool</code_completion_hint>
					<code_insight_hint>Function GetParameterBool(parName As String) As Boolean</code_insight_hint>
				</method>
				<method name="GetParameterColor" type="Function" deprecated="false" return_value_scope="Color">
					<description>Gets a parameter value of type Color.</description>
					<code_completion_hint>GetParameterColor</code_completion_hint>
					<code_insight_hint>Function GetParameterColor(parName As String) As Color</code_insight_hint>
				</method>
				<method name="GetParameterContainer" type="Function" deprecated="false" return_value_scope="Container">
					<description>Gets a parameter value of type Container.</description>
					<code_completion_hint>GetParameterContainer</code_completion_hint>
					<code_insight_hint>Function GetParameterContainer(parName As String) As Container</code_insight_hint>
				</method>
				<method name="GetParameterDouble" type="Function" deprecated="false" return_value_scope="Double">
					<description>Gets a parameter value of type Double.</description>
					<code_completion_hint>GetParameterDouble</code_completion_hint>
					<code_insight_hint>Function GetParameterDouble(parName As String) As Double</code_insight_hint>
				</method>
				<method name="GetParameterInt" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Gets a parameter value of type Integer.</description>
					<code_completion_hint>GetParameterInt</code_completion_hint>
					<code_insight_hint>Function GetParameterInt(parName As String) As Integer</code_insight_hint>
				</method>
				<method name="GetParameterString" type="Function" deprecated="false" return_value_scope="String">
					<description>Gets a parameter value of type string.</description>
					<code_completion_hint>GetParameterString</code_completion_hint>
					<code_insight_hint>Function GetParameterString(parName As String) As String</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="MTRegister" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Registers a control for a certain stroke in the multitouch core. Control types: ; MT_CONTROL_BUTTON; MT_CONTROL_PZR2D; MT_CONTROL_PZR2D_TILT</description>
					<code_completion_hint>MTRegister</code_completion_hint>
					<code_insight_hint>Sub MTRegister(stroke As Integer, controlType As Integer)</code_insight_hint>
				</method>
				<method name="MTRegisterEx" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Same as MTRegister but with the additional possibility to set parameters for the specified control.</description>
					<code_completion_hint>MTRegisterEx</code_completion_hint>
					<code_insight_hint>Sub MTRegisterEx(stroke As Integer, controlType As Integer, params As Array[Double])</code_insight_hint>
				</method>
				<method name="MTSetPosition" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets the position of the container</description>
					<code_completion_hint>MTSetPosition</code_completion_hint>
					<code_insight_hint>Sub MTSetPosition(x As Integer, y As Integer)</code_insight_hint>
				</method>
				<method name="MTUnregister" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Unregisters a control in the multitouch core.</description>
					<code_completion_hint>MTUnregister</code_completion_hint>
					<code_insight_hint>Sub MTUnregister()</code_insight_hint>
				</method>
				<method name="PushButton" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Calls the OnExecAction handler of the push button identified by parName.</description>
					<code_completion_hint>PushButton</code_completion_hint>
					<code_insight_hint>Sub PushButton(parName As String)</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
				<method name="SetParameterBool" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a parameter value of type Boolean.</description>
					<code_completion_hint>SetParameterBool</code_completion_hint>
					<code_insight_hint>Sub SetParameterBool(parName As String, v As Boolean)</code_insight_hint>
				</method>
				<method name="SetParameterColor" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a parameter value of type Color.</description>
					<code_completion_hint>SetParameterColor</code_completion_hint>
					<code_insight_hint>Sub SetParameterColor(parName As String, v As Color)</code_insight_hint>
				</method>
				<method name="SetParameterContainer" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a parameter value of type Container</description>
					<code_completion_hint>SetParameterContainer</code_completion_hint>
					<code_insight_hint>Sub SetParameterContainer(parName As String, v As Container)</code_insight_hint>
				</method>
				<method name="SetParameterDouble" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a parameter value of type Double.</description>
					<code_completion_hint>SetParameterDouble</code_completion_hint>
					<code_insight_hint>Sub SetParameterDouble(parName As String, v As Double)</code_insight_hint>
				</method>
				<method name="SetParameterInt" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a parameter value of type Integer.</description>
					<code_completion_hint>SetParameterInt</code_completion_hint>
					<code_insight_hint>Sub SetParameterInt(parName As String, v As Integer)</code_insight_hint>
				</method>
				<method name="SetParameterString" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sets a parameter value of type Dtring.</description>
					<code_completion_hint>SetParameterString</code_completion_hint>
					<code_insight_hint>Sub SetParameterString(parName As String, v As String)</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Position">
			<description>A position object. This is used to control the position of a container, camera, or light.</description>
			<properties>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="x" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the x component.</description>
					<code_completion_hint>x</code_completion_hint>
					<code_insight_hint>x As Double</code_insight_hint>
				</property>
				<property name="xyz" type="Property" deprecated="false" return_value_scope="Vertex">
					<description>Gets or sets the x, y, z components combined into a vertex.</description>
					<code_completion_hint>xyz</code_completion_hint>
					<code_insight_hint>xyz As Vertex</code_insight_hint>
				</property>
				<property name="y" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the y component.</description>
					<code_completion_hint>y</code_completion_hint>
					<code_insight_hint>y As Double</code_insight_hint>
				</property>
				<property name="z" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the z component.</description>
					<code_completion_hint>z</code_completion_hint>
					<code_insight_hint>z As Double</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Rotation">
			<description>A rotation object. This is used to control the position of a container or light.</description>
			<properties>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="x" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the x component.</description>
					<code_completion_hint>x</code_completion_hint>
					<code_insight_hint>x As Double</code_insight_hint>
				</property>
				<property name="xyz" type="Property" deprecated="false" return_value_scope="Vertex">
					<description>Gets or sets the x, y, z components combined into a vertex.</description>
					<code_completion_hint>xyz</code_completion_hint>
					<code_insight_hint>xyz As Vertex</code_insight_hint>
				</property>
				<property name="y" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the y component.</description>
					<code_completion_hint>y</code_completion_hint>
					<code_insight_hint>y As Double</code_insight_hint>
				</property>
				<property name="z" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the z component.</description>
					<code_completion_hint>z</code_completion_hint>
					<code_insight_hint>z As Double</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Scaling">
			<description>A scaling object. This is used to control the scaling of a container.</description>
			<properties>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="x" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the x component.</description>
					<code_completion_hint>x</code_completion_hint>
					<code_insight_hint>x As Double</code_insight_hint>
				</property>
				<property name="xyz" type="Property" deprecated="false" return_value_scope="Vertex">
					<description>Gets or sets the x, y, z components combined into a vertex.</description>
					<code_completion_hint>xyz</code_completion_hint>
					<code_insight_hint>xyz As Vertex</code_insight_hint>
				</property>
				<property name="y" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the y component.</description>
					<code_completion_hint>y</code_completion_hint>
					<code_insight_hint>y As Double</code_insight_hint>
				</property>
				<property name="z" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets or sets the z component.</description>
					<code_completion_hint>z</code_completion_hint>
					<code_insight_hint>z As Double</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Scene">
			<description>A scene object. The Scene member of the Base type provides access to the current scene.</description>
			<properties>
				<property name="AlphaClearValue" type="Property" deprecated="false" return_value_scope="Integer">
					<description> </description>
					<code_completion_hint>AlphaClearValue</code_completion_hint>
					<code_insight_hint>AlphaClearValue As Integer</code_insight_hint>
				</property>
				<property name="AutoKeyActive" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>AutoKeyActive</code_completion_hint>
					<code_insight_hint>AutoKeyActive As Boolean</code_insight_hint>
				</property>
				<property name="AutoKeyPosition" type="Property" deprecated="false" return_value_scope="Vertex">
					<description> </description>
					<code_completion_hint>AutoKeyPosition</code_completion_hint>
					<code_insight_hint>AutoKeyPosition As Vertex</code_insight_hint>
				</property>
				<property name="BackgroundColor" type="Property" deprecated="false" return_value_scope="Color">
					<description> </description>
					<code_completion_hint>BackgroundColor</code_completion_hint>
					<code_insight_hint>BackgroundColor As Color</code_insight_hint>
				</property>
				<property name="CurrentCamera" type="Property" deprecated="false" return_value_scope="Camera">
					<description>The current camera</description>
					<code_completion_hint>CurrentCamera</code_completion_hint>
					<code_insight_hint>CurrentCamera As Camera [read-only]</code_insight_hint>
				</property>
				<property name="CurrentCameraIndex" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The index of the current camera</description>
					<code_completion_hint>CurrentCameraIndex</code_completion_hint>
					<code_insight_hint>CurrentCameraIndex As Integer</code_insight_hint>
				</property>
				<property name="Location" type="Property" deprecated="false" return_value_scope="String">
					<description>The location of the scene</description>
					<code_completion_hint>Location</code_completion_hint>
					<code_insight_hint>Location As String [read-only]</code_insight_hint>
				</property>
				<property name="LocationPath" type="Property" deprecated="false" return_value_scope="String">
					<description>The full db location of the scene</description>
					<code_completion_hint>LocationPath</code_completion_hint>
					<code_insight_hint>LocationPath As String [read-only]</code_insight_hint>
				</property>
				<property name="Map" type="Property" deprecated="false" return_value_scope="SharedMemory">
					<description>The scene's memory map, used for data sharing within a scene.</description>
					<code_completion_hint>Map</code_completion_hint>
					<code_insight_hint>Map As SharedMemory [read-only]</code_insight_hint>
				</property>
				<property name="Name" type="Property" deprecated="false" return_value_scope="String">
					<description>The name of the scene</description>
					<code_completion_hint>Name</code_completion_hint>
					<code_insight_hint>Name As String [read-only]</code_insight_hint>
				</property>
				<property name="RootContainer" type="Property" deprecated="false" return_value_scope="Container">
					<description>The topmost container in the scene tree</description>
					<code_completion_hint>RootContainer</code_completion_hint>
					<code_insight_hint>RootContainer As Container [read-only]</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Script" type="Property" deprecated="false" return_value_scope="Script">
					<description>The script object: it can be used used to dynamically call member procedures of the scene</description>
					<code_completion_hint>Script</code_completion_hint>
					<code_insight_hint>Script As Script [read-only]</code_insight_hint>
				</property>
				<property name="ScriptPluginInstance" type="Property" deprecated="false" return_value_scope="PluginInstance">
					<description>The script's plugin instance</description>
					<code_completion_hint>ScriptPluginInstance</code_completion_hint>
					<code_insight_hint>ScriptPluginInstance As PluginInstance [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="Uuid" type="Property" deprecated="false" return_value_scope="Uuid">
					<description>The UUID of the scene</description>
					<code_completion_hint>Uuid</code_completion_hint>
					<code_insight_hint>Uuid As Uuid [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="AddLogMessage" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Adds a log message to the scene log.</description>
					<code_completion_hint>AddLogMessage</code_completion_hint>
					<code_insight_hint>Sub AddLogMessage(message As String)</code_insight_hint>
				</method>
				<method name="CreateRootContainer" type="Function" deprecated="false" return_value_scope="Container">
					<description> </description>
					<code_completion_hint>CreateRootContainer</code_completion_hint>
					<code_insight_hint>Function CreateRootContainer() As Container</code_insight_hint>
				</method>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindContainer" type="Function" deprecated="false" return_value_scope="Container">
					<description>Searches the scene tree for a container named name. The search mode is breadth-first. It's possible to combine a call to this function and multiple calls to Container.FindSubContainer into a single call by concatenating the individual container names using $ as a separator. For example, scene.FindContainer("name1$name2") has the same effect as scene.FindContainer("name1").FindSubContainer("name2").</description>
					<code_completion_hint>FindContainer</code_completion_hint>
					<code_insight_hint>Function FindContainer(name As String) As Container</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetCamera" type="Function" deprecated="false" return_value_scope="Camera">
					<description> </description>
					<code_completion_hint>GetCamera</code_completion_hint>
					<code_insight_hint>Function GetCamera(cameraIndex As Integer) As Camera</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="GetGrid" type="Function" deprecated="false" return_value_scope="Grid">
					<description>Gets a grid from the scene.</description>
					<code_completion_hint>GetGrid</code_completion_hint>
					<code_insight_hint>Function GetGrid(gridNumber As Integer) As Grid</code_insight_hint>
				</method>
				<method name="GetLight" type="Function" deprecated="false" return_value_scope="Light">
					<description> </description>
					<code_completion_hint>GetLight</code_completion_hint>
					<code_insight_hint>Function GetLight(lightIndex As Integer) As Light</code_insight_hint>
				</method>
				<method name="GetScenePluginInstance" type="Function" deprecated="false" return_value_scope="PluginInstance">
					<description>Provides access to the parameters of a scene plugin instance.</description>
					<code_completion_hint>GetScenePluginInstance</code_completion_hint>
					<code_insight_hint>Function GetScenePluginInstance(pluginName As String) As PluginInstance</code_insight_hint>
				</method>
				<method name="GetUnlockedGrid" type="Function" deprecated="false" return_value_scope="Grid">
					<description>Gets the next unused grid from the scene.</description>
					<code_completion_hint>GetUnlockedGrid</code_completion_hint>
					<code_insight_hint>Function GetUnlockedGrid() As Grid</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="ScreenPosToWorldGrid" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Converts the screen position to current grid intersection point.</description>
					<code_completion_hint>ScreenPosToWorldGrid</code_completion_hint>
					<code_insight_hint>Function ScreenPosToWorldGrid(dX As Double, dY As Double) As Vertex</code_insight_hint>
				</method>
				<method name="ScreenPosToWorldPos" type="Function" deprecated="false" return_value_scope="Vertex">
					<description>Converts the screen position to the world position.; This would mean that if you assign the returned vertex to a container (on root level � no parent containers) position then it moves exactly to the passed screen position (orthogonal to camera).</description>
					<code_completion_hint>ScreenPosToWorldPos</code_completion_hint>
					<code_insight_hint>Function ScreenPosToWorldPos(dX As Double, dY As Double) As Vertex</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
				<method name="UpdateSceneTree" type="Subroutine" deprecated="false" return_value_scope="">
					<description>In authoring mode, this method causes the scene tree GUI to be rebuilt. Ignored in on-air mode.</description>
					<code_completion_hint>UpdateSceneTree</code_completion_hint>
					<code_insight_hint>Sub UpdateSceneTree()</code_insight_hint>
				</method>
				<method name="WorldPosToScreenPos" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Converts the world position to the position on the screen.</description>
					<code_completion_hint>WorldPosToScreenPos</code_completion_hint>
					<code_insight_hint>Sub WorldPosToScreenPos(pos As Vertex, [out] dX As Double, [out] dY As Double)</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Script">
			<description>The container's script object. This is used to dynamically call member procedures of another container.</description>
			<properties />
			<member_methods />
		</scope>
		<scope name="ScriptSettings">
			<description>A script's local settings.</description>
			<properties>
				<property name="CallButtonDownForTopObjectsOnly" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>If set to true, the OnXButtonDown procedures are called only if the container contains the mouse cursor and is on top at the mouse cursor position. Default = true.</description>
					<code_completion_hint>CallButtonDownForTopObjectsOnly</code_completion_hint>
					<code_insight_hint>CallButtonDownForTopObjectsOnly As Boolean</code_insight_hint>
				</property>
				<property name="CallEnterLeaveForTopObjectsOnly" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>If set to true, OnEnter/OnLeave/OnEnterSubContainer/OnLeaveSubContainer is called only if the container is on top at the mouse cursor position. Default = true.</description>
					<code_completion_hint>CallEnterLeaveForTopObjectsOnly</code_completion_hint>
					<code_insight_hint>CallEnterLeaveForTopObjectsOnly As Boolean</code_insight_hint>
				</property>
				<property name="CallMouseMoveForTopObjectsOnly" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>If set to true, OnMouseMove is called only if the container contains the mouse cursor and is on top at the mouse cursor position. Default = false.</description>
					<code_completion_hint>CallMouseMoveForTopObjectsOnly</code_completion_hint>
					<code_insight_hint>CallMouseMoveForTopObjectsOnly As Boolean</code_insight_hint>
				</property>
				<property name="CallEnterLeaveForBackgroundObjects" type="Property" deprecated="true" return_value_scope="Boolean">
					<description>Deprecated. Use CallEnterLeaveForTopObjectsOnly instead.</description>
					<code_completion_hint>CallEnterLeaveForBackgroundObjects</code_completion_hint>
					<code_insight_hint>CallEnterLeaveForBackgroundObjects As Boolean</code_insight_hint>
				</property>
				<property name="CallMouseMoveForBackgroundObjects" type="Property" deprecated="true" return_value_scope="Boolean">
					<description>Deprecated. Use CallMouseMoveForTopObjectsOnly instead.</description>
					<code_completion_hint>CallMouseMoveForBackgroundObjects</code_completion_hint>
					<code_insight_hint>CallMouseMoveForBackgroundObjects As Boolean</code_insight_hint>
				</property>
			</properties>
			<member_methods />
		</scope>
		<scope name="SharedMemory">
			<description>A storage object that holds a map of Variant objects indexed by a string.
It can be used for system-wide or scene-wide data sharing.
To access an individual value, use the index operator. Example:

' Script 1:
dim a = 123 ' define an integer variable
System.Map["my_global_variable"] = a
'
' Script 2:
dim a = (Integer)System.Map["my_global_variable"]</description>
			<properties>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="ContainsKey" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Tests whether an element with the specified key is in the map.</description>
					<code_completion_hint>ContainsKey</code_completion_hint>
					<code_insight_hint>Function ContainsKey(key As String) As Boolean</code_insight_hint>
				</method>
				<method name="CreateKey" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Creates a new empty variable.</description>
					<code_completion_hint>CreateKey</code_completion_hint>
					<code_insight_hint>Function CreateKey(key As String) As Boolean</code_insight_hint>
				</method>
				<method name="DeleteKey" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Deletes a variable.</description>
					<code_completion_hint>DeleteKey</code_completion_hint>
					<code_insight_hint>Function DeleteKey(key As String) As Boolean</code_insight_hint>
				</method>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="GetKeys" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Fills the passed array with all defined keys.</description>
					<code_completion_hint>GetKeys</code_completion_hint>
					<code_insight_hint>Sub GetKeys(keys As Array[String])</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="LoadFromDb" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Loads the contents of the map from a database file. The file is specified by path, which must be an absolute path, such as "/User/mem_map".</description>
					<code_completion_hint>LoadFromDb</code_completion_hint>
					<code_insight_hint>Function LoadFromDb(path As String) As Boolean</code_insight_hint>
				</method>
				<method name="RegisterChangedCallback" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Causes OnSharedMemoryVariableChanged to be invoked whenever the variable identified by key is changed and OnSharedMemoryVariableDeleted in response to the key being deleted. If you pass an empty string for key, the callbacks will be invoked whenever any variable in the map is changed or deleted.</description>
					<code_completion_hint>RegisterChangedCallback</code_completion_hint>
					<code_insight_hint>Sub RegisterChangedCallback(key As String)</code_insight_hint>
				</method>
				<method name="SaveToDb" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Saves the contents of the map into a database file. The file is specified by path, which must be an absolute path, such as "/User/mem_map".</description>
					<code_completion_hint>SaveToDb</code_completion_hint>
					<code_insight_hint>Function SaveToDb(path As String) As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
				<method name="UnregisterChangedCallback" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Removes the binding set up by RegisterChangedCallback.</description>
					<code_completion_hint>UnregisterChangedCallback</code_completion_hint>
					<code_insight_hint>Sub UnregisterChangedCallback(key As String)</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="System">
			<description>This type provides access to system-wide parameters and procedures.</description>
			<properties>
				<property name="BackScene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>Returns the scene that is in the back layer of the scene/render editor.</description>
					<code_completion_hint>BackScene</code_completion_hint>
					<code_insight_hint>BackScene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="CurrentDirectoryPath" type="Property" deprecated="false" return_value_scope="String">
					<description>Gets or sets the current directory path.</description>
					<code_completion_hint>CurrentDirectoryPath</code_completion_hint>
					<code_insight_hint>CurrentDirectoryPath As String</code_insight_hint>
				</property>
				<property name="CurrentRefreshRate" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets the current refresh rate in seconds.</description>
					<code_completion_hint>CurrentRefreshRate</code_completion_hint>
					<code_insight_hint>CurrentRefreshRate As Double [read-only]</code_insight_hint>
				</property>
				<property name="FrontScene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>Returns the scene that is in the front layer of the scene/render editor.</description>
					<code_completion_hint>FrontScene</code_completion_hint>
					<code_insight_hint>FrontScene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="HostName" type="Property" deprecated="false" return_value_scope="String">
					<description>Gets the host name of the local computer.</description>
					<code_completion_hint>HostName</code_completion_hint>
					<code_insight_hint>HostName As String [read-only]</code_insight_hint>
				</property>
				<property name="IPAddressString" type="Property" deprecated="false" return_value_scope="String">
					<description>Gets the IP address of the local computer. The format is a string that looks like "10.211.54.199".</description>
					<code_completion_hint>IPAddressString</code_completion_hint>
					<code_insight_hint>IPAddressString As String [read-only]</code_insight_hint>
				</property>
				<property name="IsPostRecording" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Determines if in post mode.</description>
					<code_completion_hint>IsPostRecording</code_completion_hint>
					<code_insight_hint>IsPostRecording As Boolean [read-only]</code_insight_hint>
				</property>
				<property name="LButtonState" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>True if the left mouse button is pressed.</description>
					<code_completion_hint>LButtonState</code_completion_hint>
					<code_insight_hint>LButtonState As Boolean [read-only]</code_insight_hint>
				</property>
				<property name="MainScene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>Returns the scene that is in the main layer of the scene/render editor.</description>
					<code_completion_hint>MainScene</code_completion_hint>
					<code_insight_hint>MainScene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Map" type="Property" deprecated="false" return_value_scope="SharedMemory">
					<description>The global memory map, used for system-wide data sharing.</description>
					<code_completion_hint>Map</code_completion_hint>
					<code_insight_hint>Map As SharedMemory [read-only]</code_insight_hint>
				</property>
				<property name="MButtonState" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>True if the middle mouse button is pressed.</description>
					<code_completion_hint>MButtonState</code_completion_hint>
					<code_insight_hint>MButtonState As Boolean [read-only]</code_insight_hint>
				</property>
				<property name="MouseX" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the x position of the mouse cursor (in screen coordinates).</description>
					<code_completion_hint>MouseX</code_completion_hint>
					<code_insight_hint>MouseX As Integer [read-only]</code_insight_hint>
				</property>
				<property name="MouseY" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the y position of the mouse cursor (in screen coordinates).</description>
					<code_completion_hint>MouseY</code_completion_hint>
					<code_insight_hint>MouseY As Integer [read-only]</code_insight_hint>
				</property>
				<property name="OutputAspect" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets the output aspect ratio.</description>
					<code_completion_hint>OutputAspect</code_completion_hint>
					<code_insight_hint>OutputAspect As Double [read-only]</code_insight_hint>
				</property>
				<property name="OutputFieldDominance" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the field dominance of current the output field. (0=first field or progressive, 1=second field; )</description>
					<code_completion_hint>OutputFieldDominance</code_completion_hint>
					<code_insight_hint>OutputFieldDominance As Integer [read-only]</code_insight_hint>
				</property>
				<property name="OutputInterlaced" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Determines if the output format is interlaced.</description>
					<code_completion_hint>OutputInterlaced</code_completion_hint>
					<code_insight_hint>OutputInterlaced As Boolean [read-only]</code_insight_hint>
				</property>
				<property name="OutputRefreshRate" type="Property" deprecated="false" return_value_scope="Double">
					<description>Gets the output refresh rate in seconds.</description>
					<code_completion_hint>OutputRefreshRate</code_completion_hint>
					<code_insight_hint>OutputRefreshRate As Double [read-only]</code_insight_hint>
				</property>
				<property name="OutputRetraceCounter" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the retrace counter.</description>
					<code_completion_hint>OutputRetraceCounter</code_completion_hint>
					<code_insight_hint>OutputRetraceCounter As Integer [read-only]</code_insight_hint>
				</property>
				<property name="OutputSystem" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the output system. (0=INACTIVE, 3=480I_5994_SMPTE259, 4=576I_5000_SMPTE259, 5=720P_5994_SMPTE296, 6=720P_6000_SMPTE296, 10=1080I_5000_SMPTE274, 11=1080I_5994_SMPTE274, 12=1080I_6000_SMPTE274, 21=720P_5000_SMPTE296, 27=FULL_SCREEN, 28=USER_DEFINED ).</description>
					<code_completion_hint>OutputSystem</code_completion_hint>
					<code_insight_hint>OutputSystem As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PostCurrentTime" type="Property" deprecated="false" return_value_scope="Double">
					<description>Get the current time in post mode.</description>
					<code_completion_hint>PostCurrentTime</code_completion_hint>
					<code_insight_hint>PostCurrentTime As Double [read-only]</code_insight_hint>
				</property>
				<property name="PostFieldDominance" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the field dominance in post mode. (0=first field or progressive, 1=second field; )</description>
					<code_completion_hint>PostFieldDominance</code_completion_hint>
					<code_insight_hint>PostFieldDominance As Integer [read-only]</code_insight_hint>
				</property>
				<property name="PostRetraceCounter" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the retrace counter in post mode.</description>
					<code_completion_hint>PostRetraceCounter</code_completion_hint>
					<code_insight_hint>PostRetraceCounter As Integer [read-only]</code_insight_hint>
				</property>
				<property name="RButtonState" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>True if the right mouse button is pressed.</description>
					<code_completion_hint>RButtonState</code_completion_hint>
					<code_insight_hint>RButtonState As Boolean [read-only]</code_insight_hint>
				</property>
				<property name="RenderEditorHeight" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the height in pixels of the render editor.</description>
					<code_completion_hint>RenderEditorHeight</code_completion_hint>
					<code_insight_hint>RenderEditorHeight As Integer [read-only]</code_insight_hint>
				</property>
				<property name="RenderEditorWidth" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the width in pixels of the render editor.</description>
					<code_completion_hint>RenderEditorWidth</code_completion_hint>
					<code_insight_hint>RenderEditorWidth As Integer [read-only]</code_insight_hint>
				</property>
				<property name="RenderWindowHeight" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the height in pixels of the render window.</description>
					<code_completion_hint>RenderWindowHeight</code_completion_hint>
					<code_insight_hint>RenderWindowHeight As Integer [read-only]</code_insight_hint>
				</property>
				<property name="RenderWindowWidth" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the width in pixels of the render window.</description>
					<code_completion_hint>RenderWindowWidth</code_completion_hint>
					<code_insight_hint>RenderWindowWidth As Integer [read-only]</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="ScreenHeight" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the height in pixels of the screen.</description>
					<code_completion_hint>ScreenHeight</code_completion_hint>
					<code_insight_hint>ScreenHeight As Integer [read-only]</code_insight_hint>
				</property>
				<property name="ScreenWidth" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the width in pixels of the screen.</description>
					<code_completion_hint>ScreenWidth</code_completion_hint>
					<code_insight_hint>ScreenWidth As Integer [read-only]</code_insight_hint>
				</property>
				<property name="ShowMouseCursor" type="Property" deprecated="false" return_value_scope="Boolean">
					<description>Gets or sets the visibility state of the mouse cursor.</description>
					<code_completion_hint>ShowMouseCursor</code_completion_hint>
					<code_insight_hint>ShowMouseCursor As Boolean</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VideoHeight" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the height in pixels of the output video.</description>
					<code_completion_hint>VideoHeight</code_completion_hint>
					<code_insight_hint>VideoHeight As Integer [read-only]</code_insight_hint>
				</property>
				<property name="VideoWidth" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the width in pixels of the output video.</description>
					<code_completion_hint>VideoWidth</code_completion_hint>
					<code_insight_hint>VideoWidth As Integer [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="RefreshRate" type="Property" deprecated="true" return_value_scope="Double">
					<description>Deprecated.</description>
					<code_completion_hint>RefreshRate</code_completion_hint>
					<code_insight_hint>RefreshRate As Double [read-only]</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="DeleteFile" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Deletes the file filename, returns true when successfully</description>
					<code_completion_hint>DeleteFile</code_completion_hint>
					<code_insight_hint>Function DeleteFile(filename As String) As Boolean</code_insight_hint>
				</method>
				<method name="DirectoryExists" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if the directory exists</description>
					<code_completion_hint>DirectoryExists</code_completion_hint>
					<code_insight_hint>Function DirectoryExists(directory As String) As Boolean</code_insight_hint>
				</method>
				<method name="ExploreDocument" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Opens a directory in the Windows Explorer. If activate is false, the Explorer window is minimized.</description>
					<code_completion_hint>ExploreDocument</code_completion_hint>
					<code_insight_hint>Function ExploreDocument(filename As String, activate As Boolean) As Boolean</code_insight_hint>
				</method>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="GetClipChannel" type="Function" deprecated="false" return_value_scope="ClipChannel">
					<description>Gets the ClipChannel A (parameter = 0) or B (parameter = 1)</description>
					<code_completion_hint>GetClipChannel</code_completion_hint>
					<code_insight_hint>Function GetClipChannel(param_1 As Integer) As ClipChannel</code_insight_hint>
				</method>
				<method name="GetDirectoryContent" type="Function" deprecated="false" return_value_scope="Array[String]">
					<description>Returns an array with all files in the directory dirname matching the pattern, e.g.: *.jpg</description>
					<code_completion_hint>GetDirectoryContent</code_completion_hint>
					<code_insight_hint>Function GetDirectoryContent(dirname As String, pattern As String) As Array[String]</code_insight_hint>
				</method>
				<method name="GetElapsedTime" type="Function" deprecated="false" return_value_scope="Double">
					<description>Gets the time (in seconds) that has passed since Viz was started.</description>
					<code_completion_hint>GetElapsedTime</code_completion_hint>
					<code_insight_hint>Function GetElapsedTime() As Double</code_insight_hint>
				</method>
				<method name="GetNumberOfClipChannel" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Gets the number of available Clip Channels</description>
					<code_completion_hint>GetNumberOfClipChannel</code_completion_hint>
					<code_insight_hint>Function GetNumberOfClipChannel() As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="IsKeyDown" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if the specified key is pressed.</description>
					<code_completion_hint>IsKeyDown</code_completion_hint>
					<code_insight_hint>Function IsKeyDown(keyCode As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="LoadBackScene" type="Function" deprecated="false" return_value_scope="Scene">
					<description>Loads a scene file into the back layer of the scene/render editor.</description>
					<code_completion_hint>LoadBackScene</code_completion_hint>
					<code_insight_hint>Function LoadBackScene(scenepath As String) As Scene</code_insight_hint>
				</method>
				<method name="LoadFrontScene" type="Function" deprecated="false" return_value_scope="Scene">
					<description>Loads a scene file into the front layer of the scene/render editor.</description>
					<code_completion_hint>LoadFrontScene</code_completion_hint>
					<code_insight_hint>Function LoadFrontScene(scenepath As String) As Scene</code_insight_hint>
				</method>
				<method name="LoadMainScene" type="Function" deprecated="false" return_value_scope="Scene">
					<description>Loads a scene file into the main layer of the scene/render editor.</description>
					<code_completion_hint>LoadMainScene</code_completion_hint>
					<code_insight_hint>Function LoadMainScene(scenepath As String) As Scene</code_insight_hint>
				</method>
				<method name="LoadTextFile" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Loads the text file identified by filepath into result. Returns false if the file does not exist or is not accessible.</description>
					<code_completion_hint>LoadTextFile</code_completion_hint>
					<code_insight_hint>Function LoadTextFile(filepath As String, [out] result As String) As Boolean</code_insight_hint>
				</method>
				<method name="MouseOverIPDefineServer" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Define another VizMouseServer</description>
					<code_completion_hint>MouseOverIPDefineServer</code_completion_hint>
					<code_insight_hint>Function MouseOverIPDefineServer(serverAddress As String, serverPort As Integer, localPort As Integer) As Integer</code_insight_hint>
				</method>
				<method name="MouseOverIPQuitServer" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Kill the all defined VizMouseServer</description>
					<code_completion_hint>MouseOverIPQuitServer</code_completion_hint>
					<code_insight_hint>Function MouseOverIPQuitServer() As Boolean</code_insight_hint>
				</method>
				<method name="MouseOverIPQuitServer" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Kill this VizMouseServer</description>
					<code_completion_hint>MouseOverIPQuitServer</code_completion_hint>
					<code_insight_hint>Function MouseOverIPQuitServer(serverID As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="MouseOverIPRegister" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Register the viz engine as client to receive mouse events from all defined VizMouseServer</description>
					<code_completion_hint>MouseOverIPRegister</code_completion_hint>
					<code_insight_hint>Function MouseOverIPRegister() As Boolean</code_insight_hint>
				</method>
				<method name="MouseOverIPRegister" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Register the viz engine as client to receive mouse events from this VizMouseServer</description>
					<code_completion_hint>MouseOverIPRegister</code_completion_hint>
					<code_insight_hint>Function MouseOverIPRegister(serverID As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="MouseOverIPUndefineAllServers" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Undefine all known VizMouseServers.</description>
					<code_completion_hint>MouseOverIPUndefineAllServers</code_completion_hint>
					<code_insight_hint>Function MouseOverIPUndefineAllServers() As Boolean</code_insight_hint>
				</method>
				<method name="MouseOverIPUndefineServer" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Unefine the VizMouseServer with the address serverAddress, the server port serverPort and the local listening port localPort</description>
					<code_completion_hint>MouseOverIPUndefineServer</code_completion_hint>
					<code_insight_hint>Function MouseOverIPUndefineServer(serverAddress As String, serverPort As Integer, localPort As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="MouseOverIPUndefineServer" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Undefine the VizMouseServer with the ID serverID.</description>
					<code_completion_hint>MouseOverIPUndefineServer</code_completion_hint>
					<code_insight_hint>Function MouseOverIPUndefineServer(serverID As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="MouseOverIPUnregister" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Unregister the viz engine from all defined VizMouseServer</description>
					<code_completion_hint>MouseOverIPUnregister</code_completion_hint>
					<code_insight_hint>Function MouseOverIPUnregister() As Boolean</code_insight_hint>
				</method>
				<method name="MouseOverIPUnregister" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Unregister the viz engine from this VizMouseServer</description>
					<code_completion_hint>MouseOverIPUnregister</code_completion_hint>
					<code_insight_hint>Function MouseOverIPUnregister(serverID As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="MouseOverIPUnregisterAll" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Unregister all viz engines from all defined VizMouseServer</description>
					<code_completion_hint>MouseOverIPUnregisterAll</code_completion_hint>
					<code_insight_hint>Function MouseOverIPUnregisterAll() As Boolean</code_insight_hint>
				</method>
				<method name="MouseOverIPUnregisterAll" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Unregister all viz engines from this VizMouseServer</description>
					<code_completion_hint>MouseOverIPUnregisterAll</code_completion_hint>
					<code_insight_hint>Function MouseOverIPUnregisterAll(serverID As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="OpenDocument" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Opens a document file. If activate is false, the application loading the file is minimized.</description>
					<code_completion_hint>OpenDocument</code_completion_hint>
					<code_insight_hint>Function OpenDocument(filename As String, activate As Boolean) As Boolean</code_insight_hint>
				</method>
				<method name="PlaySound" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Plays a sound file.</description>
					<code_completion_hint>PlaySound</code_completion_hint>
					<code_insight_hint>Sub PlaySound(filename As String)</code_insight_hint>
				</method>
				<method name="SaveTextFile" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Saves the contents of text into the file identified by filepath. Returns false if the file cannot be written to.</description>
					<code_completion_hint>SaveTextFile</code_completion_hint>
					<code_insight_hint>Function SaveTextFile(filepath As String, text As String) As Boolean</code_insight_hint>
				</method>
				<method name="SendCommand" type="Function" deprecated="false" return_value_scope="String">
					<description>Sends a command to the local viz engine.</description>
					<code_completion_hint>SendCommand</code_completion_hint>
					<code_insight_hint>Function SendCommand(command As String) As String</code_insight_hint>
				</method>
				<method name="SendRemoteCommand" type="Function" deprecated="false" return_value_scope="String">
					<description>Sends a command string to a viz engine running on another PC.; If timeoutInMs &amp;gt; 0, the procedure waits at most timeoutInMs milliseconds for an answer, and susequently returns that answer.; If timeoutInMs = 0, the procedure returns immediatly, ignoring any answer.</description>
					<code_completion_hint>SendRemoteCommand</code_completion_hint>
					<code_insight_hint>Function SendRemoteCommand(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
				<method name="StartApplication" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Launches an application. If activate is false, the application window is minimized.</description>
					<code_completion_hint>StartApplication</code_completion_hint>
					<code_insight_hint>Function StartApplication(filename As String, parameters As String, activate As Boolean) As Boolean</code_insight_hint>
				</method>
				<method name="StopSound" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Stops sound playback. See PlaySound.</description>
					<code_completion_hint>StopSound</code_completion_hint>
					<code_insight_hint>Sub StopSound()</code_insight_hint>
				</method>
				<method name="TcpSend" type="Function" deprecated="false" return_value_scope="String">
					<description>Sends a command string via TCP/IP to a remote socket. Unlike SendRemoteCommand, this procedure sends the command string as is, that is without a viz command identifier attached.; The timeoutInMs has the same meaning as for SendRemoteCommand.</description>
					<code_completion_hint>TcpSend</code_completion_hint>
					<code_insight_hint>Function TcpSend(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String</code_insight_hint>
				</method>
				<method name="TcpSendAsync" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sends a command string via TCP/IP to a remote socket. Unlike TcpSend, this procedure works asynchron and the return result is stored in a shared memory map, at your defined sharedMemoryKey.; The defined sharedMemoryKey or its RegisterChangedCallback will be searched in the maps in the following order: Scene.Map, System.Map and VizCommunication.Map; If timeoutInMs is set to 0 then TcpSendAsync will wait until a answer is received or as long as no error occurs (e.g. host doesn't exist).</description>
					<code_completion_hint>TcpSendAsync</code_completion_hint>
					<code_insight_hint>Sub TcpSendAsync(sharedMemoryKey As String, hostname As String, port As Integer, commandString As String, timeoutInMs As Integer)</code_insight_hint>
				</method>
				<method name="TcpSendAsyncStatus" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Same as TcpSendAsync but with additional status Shared Memory Key which informs you about the transmission process. The following Messages (Strings) will be returned in sharedMemoryKeyStatus: ; SENDING; RECEIVED; ERROR; TIMEOUT; The timeoutInMs has the same meaning as for TcpSendAsync.</description>
					<code_completion_hint>TcpSendAsyncStatus</code_completion_hint>
					<code_insight_hint>Sub TcpSendAsyncStatus(sharedMemoryKey As String, hostname As String, port As Integer, commandString As String, timeoutInMs As Integer, sharedMemoryKeyStatus As String)</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Stage">
			<description>A stage object. The Stage member of the Base type provides access to the current scene's stage.</description>
			<properties>
				<property name="RootDirector" type="Property" deprecated="false" return_value_scope="Director">
					<description>Gets the topmost director in the stage.</description>
					<code_completion_hint>RootDirector</code_completion_hint>
					<code_insight_hint>RootDirector As Director [read-only]</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="ContinueAnimation" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Continues the animation.</description>
					<code_completion_hint>ContinueAnimation</code_completion_hint>
					<code_insight_hint>Sub ContinueAnimation()</code_insight_hint>
				</method>
				<method name="CreateRootDirector" type="Function" deprecated="false" return_value_scope="Director">
					<description>If there is no root director this method creates and returns a new one.</description>
					<code_completion_hint>CreateRootDirector</code_completion_hint>
					<code_insight_hint>Function CreateRootDirector() As Director</code_insight_hint>
				</method>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindDirector" type="Function" deprecated="false" return_value_scope="Director">
					<description>Searches for a director named directorName.</description>
					<code_completion_hint>FindDirector</code_completion_hint>
					<code_insight_hint>Function FindDirector(directorName As String) As Director</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="IsAnimationRunning" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if the animation active.</description>
					<code_completion_hint>IsAnimationRunning</code_completion_hint>
					<code_insight_hint>Function IsAnimationRunning() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
				<method name="StartAnimation" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Starts the animation in the directors selected in the diretor tree.</description>
					<code_completion_hint>StartAnimation</code_completion_hint>
					<code_insight_hint>Sub StartAnimation()</code_insight_hint>
				</method>
				<method name="StopAnimation" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Stops the animation in all directors.</description>
					<code_completion_hint>StopAnimation</code_completion_hint>
					<code_insight_hint>Sub StopAnimation()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="String">
			<description>A character string. Use the '&amp;' operator to concatenate strings.</description>
			<properties>
				<property name="Length" type="Property" deprecated="false" return_value_scope="Integer">
					<description>Gets the length of the string.</description>
					<code_completion_hint>Length</code_completion_hint>
					<code_insight_hint>Length As Integer [read-only]</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="AnsiToUtf8" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Converts an ANSI encoded string (using the system code-page) to UTF-8.</description>
					<code_completion_hint>AnsiToUtf8</code_completion_hint>
					<code_insight_hint>Sub AnsiToUtf8()</code_insight_hint>
				</method>
				<method name="Append" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Appends 'str' to the string</description>
					<code_completion_hint>Append</code_completion_hint>
					<code_insight_hint>Sub Append(str As String)</code_insight_hint>
				</method>
				<method name="EndsWith" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if the string ends with 'str'</description>
					<code_completion_hint>EndsWith</code_completion_hint>
					<code_insight_hint>Function EndsWith(str As String) As Boolean</code_insight_hint>
				</method>
				<method name="Erase" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Erases a range of 'len' characters starting at 'pos'</description>
					<code_completion_hint>Erase</code_completion_hint>
					<code_insight_hint>Sub Erase(pos As Integer, len As Integer)</code_insight_hint>
				</method>
				<method name="EraseChar" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Erases the character at 'pos'</description>
					<code_completion_hint>EraseChar</code_completion_hint>
					<code_insight_hint>Sub EraseChar(pos As Integer)</code_insight_hint>
				</method>
				<method name="Find" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Searches for a substring</description>
					<code_completion_hint>Find</code_completion_hint>
					<code_insight_hint>Function Find(substring As String) As Integer</code_insight_hint>
				</method>
				<method name="FindFirstNotOf" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Searches for the first character that is not equal to any character within 'chars'</description>
					<code_completion_hint>FindFirstNotOf</code_completion_hint>
					<code_insight_hint>Function FindFirstNotOf(chars As String) As Integer</code_insight_hint>
				</method>
				<method name="FindFirstOf" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Searches for the first character that is equal to any character within 'chars'</description>
					<code_completion_hint>FindFirstOf</code_completion_hint>
					<code_insight_hint>Function FindFirstOf(chars As String) As Integer</code_insight_hint>
				</method>
				<method name="FindLastNotOf" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Searches for the last character that is not equal to any character within 'chars'</description>
					<code_completion_hint>FindLastNotOf</code_completion_hint>
					<code_insight_hint>Function FindLastNotOf(chars As String) As Integer</code_insight_hint>
				</method>
				<method name="FindLastOf" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Searches for the last character that is equal to any character within 'chars'</description>
					<code_completion_hint>FindLastOf</code_completion_hint>
					<code_insight_hint>Function FindLastOf(chars As String) As Integer</code_insight_hint>
				</method>
				<method name="GetChar" type="Function" deprecated="false" return_value_scope="String">
					<description>Returns the character at 'pos'</description>
					<code_completion_hint>GetChar</code_completion_hint>
					<code_insight_hint>Function GetChar(pos As Integer) As String</code_insight_hint>
				</method>
				<method name="GetSubstring" type="Function" deprecated="false" return_value_scope="String">
					<description>Returns a substring</description>
					<code_completion_hint>GetSubstring</code_completion_hint>
					<code_insight_hint>Function GetSubstring(pos As Integer, len As Integer) As String</code_insight_hint>
				</method>
				<method name="Insert" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Inserts 'str' before position 'pos'</description>
					<code_completion_hint>Insert</code_completion_hint>
					<code_insight_hint>Sub Insert(pos As Integer, str As String)</code_insight_hint>
				</method>
				<method name="Join" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Concatenates individual strings</description>
					<code_completion_hint>Join</code_completion_hint>
					<code_insight_hint>Sub Join(strings As Array[String], joiner As String)</code_insight_hint>
				</method>
				<method name="Left" type="Function" deprecated="false" return_value_scope="String">
					<description>Extracts 'len' characters from the left end of the string</description>
					<code_completion_hint>Left</code_completion_hint>
					<code_insight_hint>Function Left(len As Integer) As String</code_insight_hint>
				</method>
				<method name="MakeLower" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Converts the string to an lower-case string</description>
					<code_completion_hint>MakeLower</code_completion_hint>
					<code_insight_hint>Sub MakeLower()</code_insight_hint>
				</method>
				<method name="MakeUpper" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Converts the string to an upper-case string</description>
					<code_completion_hint>MakeUpper</code_completion_hint>
					<code_insight_hint>Sub MakeUpper()</code_insight_hint>
				</method>
				<method name="Match" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if the regular expression 'regex' is found int the string</description>
					<code_completion_hint>Match</code_completion_hint>
					<code_insight_hint>Function Match(regex As String) As Boolean</code_insight_hint>
				</method>
				<method name="PadLeft" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Right-aligns the characters of the string</description>
					<code_completion_hint>PadLeft</code_completion_hint>
					<code_insight_hint>Sub PadLeft(totalWidth As Integer, paddingChar As String)</code_insight_hint>
				</method>
				<method name="PadRight" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Left-aligns the characters of the string</description>
					<code_completion_hint>PadRight</code_completion_hint>
					<code_insight_hint>Sub PadRight(totalWidth As Integer, paddingChar As String)</code_insight_hint>
				</method>
				<method name="Prepend" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Inserts 'str' at the beginning of the string</description>
					<code_completion_hint>Prepend</code_completion_hint>
					<code_insight_hint>Sub Prepend(str As String)</code_insight_hint>
				</method>
				<method name="Replace" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Replaces the substring specified by 'pos' and 'len' with 'str'</description>
					<code_completion_hint>Replace</code_completion_hint>
					<code_insight_hint>Sub Replace(pos As Integer, len As Integer, str As String)</code_insight_hint>
				</method>
				<method name="ReplaceChar" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Replaces the character at 'pos' with 'str'</description>
					<code_completion_hint>ReplaceChar</code_completion_hint>
					<code_insight_hint>Sub ReplaceChar(pos As Integer, str As String)</code_insight_hint>
				</method>
				<method name="RFind" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Searches backward for a substring</description>
					<code_completion_hint>RFind</code_completion_hint>
					<code_insight_hint>Function RFind(substring As String) As Integer</code_insight_hint>
				</method>
				<method name="Right" type="Function" deprecated="false" return_value_scope="String">
					<description>Extracts 'len' characters from the right end of the string</description>
					<code_completion_hint>Right</code_completion_hint>
					<code_insight_hint>Function Right(len As Integer) As String</code_insight_hint>
				</method>
				<method name="Split" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Splits a string into substrings; if 'separators' is empty, whitespace sequences act as separators. Example:; ; dim a as string = "Monday Thuesday Wednesday"; dim b as array[string] ; a.split(" ",b) ; ; b will be ["Monday","Thuesday","Wednesday"]</description>
					<code_completion_hint>Split</code_completion_hint>
					<code_insight_hint>Sub Split(separators As String, [out] result As Array[String])</code_insight_hint>
				</method>
				<method name="StartsWith" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>Returns true if the string starts with 'str'</description>
					<code_completion_hint>StartsWith</code_completion_hint>
					<code_insight_hint>Function StartsWith(str As String) As Boolean</code_insight_hint>
				</method>
				<method name="Substitute" type="Function" deprecated="false" return_value_scope="Integer">
					<description>Replaces 'regex' with 'subst'. If 'global' is true, all occurences of 'regex' are replaced. Otherwise, only the first occurrece is replaced.</description>
					<code_completion_hint>Substitute</code_completion_hint>
					<code_insight_hint>Function Substitute(regex As String, subst As String, global As Boolean) As Integer</code_insight_hint>
				</method>
				<method name="TclSplit" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Splits a string TCL-style-wise, using whitespace as separators (TCL-style means: Braced and double-quoted strings are never split even if they contain whitespace).</description>
					<code_completion_hint>TclSplit</code_completion_hint>
					<code_insight_hint>Sub TclSplit([out] result As Array[String])</code_insight_hint>
				</method>
				<method name="Trim" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Removes whitspace characters from both ends of the string</description>
					<code_completion_hint>Trim</code_completion_hint>
					<code_insight_hint>Sub Trim()</code_insight_hint>
				</method>
				<method name="Utf8ToAnsi" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Converts a UTF-8 encoded string to ANSI (using the system code-page).</description>
					<code_completion_hint>Utf8ToAnsi</code_completion_hint>
					<code_insight_hint>Sub Utf8ToAnsi()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="StringMap">
			<description>An associative array that maps strings to Variant objects. Use the index operator [] to access individual elements.</description>
			<properties />
			<member_methods>
				<method name="Clear" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>Clear</code_completion_hint>
					<code_insight_hint>Sub Clear()</code_insight_hint>
				</method>
				<method name="ContainsKey" type="Function" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>ContainsKey</code_completion_hint>
					<code_insight_hint>Function ContainsKey(key As String) As Boolean</code_insight_hint>
				</method>
				<method name="DeleteKey" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>DeleteKey</code_completion_hint>
					<code_insight_hint>Sub DeleteKey(key As String)</code_insight_hint>
				</method>
				<method name="GetKeys" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Fills the passed array with all defined keys.</description>
					<code_completion_hint>GetKeys</code_completion_hint>
					<code_insight_hint>Sub GetKeys(keys As Array[String])</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Texture">
			<description>A container's texture object.</description>
			<properties>
				<property name="Active" type="Property" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>Active</code_completion_hint>
					<code_insight_hint>Active As Boolean</code_insight_hint>
				</property>
				<property name="EffectType" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The effect type:; TX_EFFECT_BLUR; TX_EFFECT_MOSAIC</description>
					<code_completion_hint>EffectType</code_completion_hint>
					<code_insight_hint>EffectType As Integer</code_insight_hint>
				</property>
				<property name="EffectValue" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The effect value as an integer ranging 0-100</description>
					<code_completion_hint>EffectValue</code_completion_hint>
					<code_insight_hint>EffectValue As Integer</code_insight_hint>
				</property>
				<property name="EffectValueDouble" type="Property" deprecated="false" return_value_scope="Double">
					<description>The effect value as a double ranging 0.0-100.0</description>
					<code_completion_hint>EffectValueDouble</code_completion_hint>
					<code_insight_hint>EffectValueDouble As Double</code_insight_hint>
				</property>
				<property name="EnvironmentType" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The environment type:; TX_ENV_BLEND; TX_ENV_DECAL; TX_ENV_MODULATE</description>
					<code_completion_hint>EnvironmentType</code_completion_hint>
					<code_insight_hint>EnvironmentType As Integer</code_insight_hint>
				</property>
				<property name="MapPosition" type="Property" deprecated="false" return_value_scope="Vertex">
					<description>The mapping position</description>
					<code_completion_hint>MapPosition</code_completion_hint>
					<code_insight_hint>MapPosition As Vertex</code_insight_hint>
				</property>
				<property name="MapRotation" type="Property" deprecated="false" return_value_scope="Vertex">
					<description>The mapping rotation</description>
					<code_completion_hint>MapRotation</code_completion_hint>
					<code_insight_hint>MapRotation As Vertex</code_insight_hint>
				</property>
				<property name="MapScaling" type="Property" deprecated="false" return_value_scope="Vertex">
					<description>The mapping scaling</description>
					<code_completion_hint>MapScaling</code_completion_hint>
					<code_insight_hint>MapScaling As Vertex</code_insight_hint>
				</property>
				<property name="MapType" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The mapping type:; TX_MAP_VERTEX; TX_MAP_LINEAR; TX_MAP_REFLECT; TX_MAP_SPHERICAL; TX_MAP_CYLINDRICAL; TX_MAP_CUBE</description>
					<code_completion_hint>MapType</code_completion_hint>
					<code_insight_hint>MapType As Integer</code_insight_hint>
				</property>
				<property name="QualityType" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The quality type:; TX_QUAL_PIXEL; TX_QUAL_LINEAR; TX_QUAL_MIPMAP; TX_QUAL_SHARPEN</description>
					<code_completion_hint>QualityType</code_completion_hint>
					<code_insight_hint>QualityType As Integer</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="SharpenValue" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The sharpen value as an integer ranging 0-100</description>
					<code_completion_hint>SharpenValue</code_completion_hint>
					<code_insight_hint>SharpenValue As Integer</code_insight_hint>
				</property>
				<property name="SharpenValueDouble" type="Property" deprecated="false" return_value_scope="Double">
					<description>The sharpen value as a double ranging 0.0-100.0</description>
					<code_completion_hint>SharpenValueDouble</code_completion_hint>
					<code_insight_hint>SharpenValueDouble As Double</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
				<property name="WrapType" type="Property" deprecated="false" return_value_scope="Integer">
					<description>The wrap type:; TX_WRAP_REPEAT; TX_WRAP_CLAMP</description>
					<code_completion_hint>WrapType</code_completion_hint>
					<code_insight_hint>WrapType As Integer</code_insight_hint>
				</property>
				<property name="Image" type="Property" deprecated="true" return_value_scope="Image">
					<description>Deprecated.</description>
					<code_completion_hint>Image</code_completion_hint>
					<code_insight_hint>Image As Image</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Uuid">
			<description>A Universally Unique Identifier.</description>
			<properties>
				<property name="FullString" type="Property" deprecated="false" return_value_scope="String">
					<description>Returns the uuid as a string, enclosed in angle brackets, e.g. &amp;ldquo;7410EF6B-4271-4EFA-8E8E30212D9AD2A5&amp;rdquo;.</description>
					<code_completion_hint>FullString</code_completion_hint>
					<code_insight_hint>FullString As String [read-only]</code_insight_hint>
				</property>
				<property name="String" type="Property" deprecated="false" return_value_scope="String">
					<description>Returns the uuid as a string, e.g. &amp;ldquo;7410EF6B-4271-4EFA-8E8E30212D9AD2A5&amp;rdquo;.</description>
					<code_completion_hint>String</code_completion_hint>
					<code_insight_hint>String As String [read-only]</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="GenerateNewUuid" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Generates a new UUID.</description>
					<code_completion_hint>GenerateNewUuid</code_completion_hint>
					<code_insight_hint>Sub GenerateNewUuid()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="Variant">
			<description>A variant type. Objects of this type can hold objects of any other type.</description>
			<properties />
			<member_methods />
		</scope>
		<scope name="Vertex">
			<description>A vertex/vector consisting of 3 double components. The components can be accessed either via the x, y and z members, or using the index operator []. For example, v.y and v[1] both refer to the y component.</description>
			<properties>
				<property name="X" type="Property" deprecated="false" return_value_scope="Double">
					<description>The x component</description>
					<code_completion_hint>X</code_completion_hint>
					<code_insight_hint>X As Double</code_insight_hint>
				</property>
				<property name="Y" type="Property" deprecated="false" return_value_scope="Double">
					<description>The y component</description>
					<code_completion_hint>Y</code_completion_hint>
					<code_insight_hint>Y As Double</code_insight_hint>
				</property>
				<property name="Z" type="Property" deprecated="false" return_value_scope="Double">
					<description>The z component</description>
					<code_completion_hint>Z</code_completion_hint>
					<code_insight_hint>Z As Double</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="DistanceToLine" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>DistanceToLine</code_completion_hint>
					<code_insight_hint>Function DistanceToLine(linePoint1 As Vertex, linePoint2 As Vertex) As Double</code_insight_hint>
				</method>
				<method name="DistanceToPlane" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>DistanceToPlane</code_completion_hint>
					<code_insight_hint>Function DistanceToPlane(planeNormal As Vertex, planePoint As Vertex) As Double</code_insight_hint>
				</method>
				<method name="DistanceToPlaneSigned" type="Function" deprecated="false" return_value_scope="Double">
					<description> </description>
					<code_completion_hint>DistanceToPlaneSigned</code_completion_hint>
					<code_insight_hint>Function DistanceToPlaneSigned(planeNormal As Vertex, planePoint As Vertex) As Double</code_insight_hint>
				</method>
				<method name="MirrorAroundLine" type="Function" deprecated="false" return_value_scope="Vertex">
					<description> </description>
					<code_completion_hint>MirrorAroundLine</code_completion_hint>
					<code_insight_hint>Function MirrorAroundLine(linePoint1 As Vertex, linePoint2 As Vertex) As Vertex</code_insight_hint>
				</method>
				<method name="MirrorAroundVector" type="Function" deprecated="false" return_value_scope="Vertex">
					<description> </description>
					<code_completion_hint>MirrorAroundVector</code_completion_hint>
					<code_insight_hint>Function MirrorAroundVector(v As Vertex) As Vertex</code_insight_hint>
				</method>
				<method name="Norm" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns the length of the vector.</description>
					<code_completion_hint>Norm</code_completion_hint>
					<code_insight_hint>Function Norm() As Double</code_insight_hint>
				</method>
				<method name="Normalize" type="Function" deprecated="false" return_value_scope="Double">
					<description>Normalizes the vertex, i.e. scales it to length 1.</description>
					<code_completion_hint>Normalize</code_completion_hint>
					<code_insight_hint>Function Normalize() As Double</code_insight_hint>
				</method>
				<method name="Project" type="Function" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>Project</code_completion_hint>
					<code_insight_hint>Function Project(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="Project" type="Function" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>Project</code_completion_hint>
					<code_insight_hint>Function Project(mat As Matrix, halfwidth As Integer, halfweight As Integer) As Boolean</code_insight_hint>
				</method>
				<method name="ProjectOnLine" type="Function" deprecated="false" return_value_scope="Vertex">
					<description> </description>
					<code_completion_hint>ProjectOnLine</code_completion_hint>
					<code_insight_hint>Function ProjectOnLine(linePoint1 As Vertex, linePoint2 As Vertex) As Vertex</code_insight_hint>
				</method>
				<method name="ProjectOnVector" type="Function" deprecated="false" return_value_scope="Vertex">
					<description> </description>
					<code_completion_hint>ProjectOnVector</code_completion_hint>
					<code_insight_hint>Function ProjectOnVector(v As Vertex) As Vertex</code_insight_hint>
				</method>
				<method name="SquaredNorm" type="Function" deprecated="false" return_value_scope="Double">
					<description>Returns the squared length of the vector.</description>
					<code_completion_hint>SquaredNorm</code_completion_hint>
					<code_insight_hint>Function SquaredNorm() As Double</code_insight_hint>
				</method>
				<method name="Unproject" type="Subroutine" deprecated="false" return_value_scope="">
					<description> </description>
					<code_completion_hint>Unproject</code_completion_hint>
					<code_insight_hint>Sub Unproject(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer)</code_insight_hint>
				</method>
				<method name="Unproject" type="Function" deprecated="false" return_value_scope="Boolean">
					<description> </description>
					<code_completion_hint>Unproject</code_completion_hint>
					<code_insight_hint>Function Unproject(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer, plane1 As Vertex, plane2 As Vertex, plane3 As Vertex) As Boolean</code_insight_hint>
				</method>
				<method name="GlNormal" type="Subroutine" deprecated="true" return_value_scope="">
					<description>Deprecated.</description>
					<code_completion_hint>GlNormal</code_completion_hint>
					<code_insight_hint>Sub GlNormal()</code_insight_hint>
				</method>
				<method name="GlVertex" type="Subroutine" deprecated="true" return_value_scope="">
					<description>Deprecated.</description>
					<code_completion_hint>GlVertex</code_completion_hint>
					<code_insight_hint>Sub GlVertex()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
		<scope name="VizCommunication">
			<description>This class maintains a group of viz hosts that you can simultaneously send commands to. In addition, there is a SharedMemory member (Map) that shares its data among all engines connected to the database.</description>
			<properties>
				<property name="Map" type="Property" deprecated="false" return_value_scope="SharedMemory">
					<description>Distributed shared memory map. Note that other viz machines are notified of changes made to this map only if they running at the time the change is made.</description>
					<code_completion_hint>Map</code_completion_hint>
					<code_insight_hint>Map As SharedMemory [read-only]</code_insight_hint>
				</property>
				<property name="Scene" type="Property" deprecated="false" return_value_scope="Scene">
					<description>(Inherited from Base) Gets the current scene.</description>
					<code_completion_hint>Scene</code_completion_hint>
					<code_insight_hint>Scene As Scene [read-only]</code_insight_hint>
				</property>
				<property name="Stage" type="Property" deprecated="false" return_value_scope="Stage">
					<description>(Inherited from Base) Gets the current stage.</description>
					<code_completion_hint>Stage</code_completion_hint>
					<code_insight_hint>Stage As Stage [read-only]</code_insight_hint>
				</property>
				<property name="System" type="Property" deprecated="false" return_value_scope="System">
					<description>(Inherited from Base) Gets system wide data.</description>
					<code_completion_hint>System</code_completion_hint>
					<code_insight_hint>System As System [read-only]</code_insight_hint>
				</property>
				<property name="VizCommunication" type="Property" deprecated="false" return_value_scope="VizCommunication">
					<description>(Inherited from Base) Gets the VizCommunication object.</description>
					<code_completion_hint>VizCommunication</code_completion_hint>
					<code_insight_hint>VizCommunication As VizCommunication [read-only]</code_insight_hint>
				</property>
				<property name="VizId" type="Property" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Gets or sets the internal id of this object.</description>
					<code_completion_hint>VizId</code_completion_hint>
					<code_insight_hint>VizId As Integer</code_insight_hint>
				</property>
			</properties>
			<member_methods>
				<method name="AddHostToGroup" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Adds a hostname to the group of hostnames.</description>
					<code_completion_hint>AddHostToGroup</code_completion_hint>
					<code_insight_hint>Sub AddHostToGroup(hostname As String, port As Integer)</code_insight_hint>
				</method>
				<method name="ClearHostGroup" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Clears the group of hostnames.</description>
					<code_completion_hint>ClearHostGroup</code_completion_hint>
					<code_insight_hint>Sub ClearHostGroup()</code_insight_hint>
				</method>
				<method name="FindChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$channelName" for the channelName argument. Nested directors may be specified like this: "directorName1$directorName2$channelName".</description>
					<code_completion_hint>FindChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="FindKeyframeOfObject" type="Function" deprecated="false" return_value_scope="Keyframe">
					<description>(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null. ; You can limit the search to a particular director by using the syntax "directorName$keyframeName" for the keyframeName argument. Nested directors may be specified like this: "directorName1$directorName2$keyframeName".</description>
					<code_completion_hint>FindKeyframeOfObject</code_completion_hint>
					<code_insight_hint>Function FindKeyframeOfObject(keyframeName As String) As Keyframe</code_insight_hint>
				</method>
				<method name="FindOrCreateChannelOfObject" type="Function" deprecated="false" return_value_scope="Channel">
					<description>(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.</description>
					<code_completion_hint>FindOrCreateChannelOfObject</code_completion_hint>
					<code_insight_hint>Function FindOrCreateChannelOfObject(channelName As String) As Channel</code_insight_hint>
				</method>
				<method name="GetChannelsOfObject" type="Function" deprecated="false" return_value_scope="Integer">
					<description>(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.</description>
					<code_completion_hint>GetChannelsOfObject</code_completion_hint>
					<code_insight_hint>Function GetChannelsOfObject([out] v As Array[Channel]) As Integer</code_insight_hint>
				</method>
				<method name="IsAnimated" type="Function" deprecated="false" return_value_scope="Boolean">
					<description>(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.</description>
					<code_completion_hint>IsAnimated</code_completion_hint>
					<code_insight_hint>Function IsAnimated() As Boolean</code_insight_hint>
				</method>
				<method name="SendVizCommandToHostGroup" type="Subroutine" deprecated="false" return_value_scope="">
					<description>Sends a viz command to the group of hostnames (which was previously filled by calls to AddHostToGroup).</description>
					<code_completion_hint>SendVizCommandToHostGroup</code_completion_hint>
					<code_insight_hint>Sub SendVizCommandToHostGroup(command As String)</code_insight_hint>
				</method>
				<method name="SetChanged" type="Subroutine" deprecated="false" return_value_scope="">
					<description>(Inherited from Base) Mark this object as changed.</description>
					<code_completion_hint>SetChanged</code_completion_hint>
					<code_insight_hint>Sub SetChanged()</code_insight_hint>
				</method>
			</member_methods>
		</scope>
	</scopes>
</intellisense>