<event_definitions>
	<container_script_events>
		<event name="OnInitParameters">
			<description>This procedure must contain all Register... calls (such as RegisterParameterInt), which are used to define the script's parameters. For locally defined scripts, this callback is invoked once for every script instance, immediately before OnInit, while for plugin scripts, it is called at system startup.</description>
			<code>Sub OnInitParameters()
	
End Sub</code>
		</event>
		<event name="OnInit">
			<description>Called after a script instance has been created (e.g. by pressing Compile and Run or by loading a scene with a script). Initialization code should be placed here.</description>
			<code>Sub OnInit()
	
End Sub</code>
		</event>
		<event name="OnEnter">
			<description>Called when the mouse cursor enters the area occupied by the script's container in the output window. If the container's ExactPicking property, which is true by default, is set to false, it is sufficient that the mouse cursor hits the container's bounding box for OnEnter to be called.</description>
			<code>Sub OnEnter()
	
End Sub</code>
		</event>
		<event name="OnLeave">
			<description>The reverse of OnEnter: Called when the mouse cursor leaves the container's area. This procedure is called only if OnEnter has previously been called for the script's container.</description>
			<code>Sub OnLeave()

End Sub</code>
		</event>
		<event name="OnEnterSubContainer">
			<description>Called when the mouse cursor enters the area occupied by a sub-container of the script's container. Otherwise identical to OnEnter.</description>
			<code>Sub OnEnterSubContainer()
	
End Sub</code>
		</event>
		<event name="OnLeaveSubContainer">
			<description>Called when the mouse cursor leaves the area occupied by a sub-container of the script's container.</description>
			<code>Sub OnLeaveSubContainer()
	
End Sub</code>
		</event>
		<event name="OnExecPerField">
			<description>Called once for every field.</description>
			<code>Sub OnExecPerField()
	
End Sub</code>
		</event>
		<event name="OnExecAction">
			<description>Called when the user clicks on any push button defined by RegisterPushButton. If the script defines several push buttons, use buttonId to determine which button has been clicked on.</description>
			<code>Sub OnExecAction(buttonId As Integer)
	
End Sub</code>
		</event>
		<event name="OnParameterChanged">
			<description>Called whenever the user changes the value of script parameter defined by any of the RegisterParameter... functions.</description>
			<code>Sub OnParameterChanged(parameterName As String)

End Sub</code>
		</event>
		<event name="OnGuiStatus">
			<description>Called if the GUI wants to refresh the state of the UI. This would be the proper place where the plugin can set the UI state to enabled/disabled with SendGuiStatus or shown/hidden with SendGuiParameterShow.</description>
			<code>Sub OnGuiStatus()
	
End Sub</code>
		</event>
		<event name="OnKeyDown">
			<description>Called whenever the user presses a key. 
"keycode" identifies the key pressed. Possible values are: KEY_A, KEY_B, ..., KEY_Z, KEY_0, ..., KEY_9, KEY_HOME, KEY_END, KEY_PAGEUP, KEY_PAGEDN, KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT, KEY_INSERT, KEY_DELETE, KEY_BEGIN, KEY_MULTIPLY, KEY_DIVIDE, KEY_ESCAPE, KEY_RETURN, KEY_ENTER, KEY_SEPARATOR, KEY_SPACE, KEY_BACKSPACE, KEY_TAB, KEY_CONTROL, KEY_MENU, KEY_ALT, KEY_SHIFT, KEY_F1, ... KEY_F12, KEY_SCROLL_LOCK, KEY_PAUSE, NUMPAD_INSERT, NUMPAD_END, NUMPAD_DOWN, NUMPAD_PGDN, NUMPAD_LEFT, NUMPAD_BEGIN, NUMPAD_RIGHT, NUMPAD_HOME, NUMPAD_UP, NUMPAD_PGUP, NUMPAD0, ..., NUMPAD9</description>
			<code>Sub OnKeyDown(keyCode As Integer)
	
End Sub</code>
		</event>
		<event name="OnKeyUp">
			<description>Called whenever the user releases a key.
"keycode" identifies the key pressed. Possible values are: KEY_A, KEY_B, ..., KEY_Z, KEY_0, ..., KEY_9, KEY_HOME, KEY_END, KEY_PAGEUP, KEY_PAGEDN, KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT, KEY_INSERT, KEY_DELETE, KEY_BEGIN, KEY_MULTIPLY, KEY_DIVIDE, KEY_ESCAPE, KEY_RETURN, KEY_ENTER, KEY_SEPARATOR, KEY_SPACE, KEY_BACKSPACE, KEY_TAB, KEY_CONTROL, KEY_MENU, KEY_ALT, KEY_SHIFT, KEY_F1, ... KEY_F12, KEY_SCROLL_LOCK, KEY_PAUSE, NUMPAD_INSERT, NUMPAD_END, NUMPAD_DOWN, NUMPAD_PGDN, NUMPAD_LEFT, NUMPAD_BEGIN, NUMPAD_RIGHT, NUMPAD_HOME, NUMPAD_UP, NUMPAD_PGUP, NUMPAD0, ..., NUMPAD9
</description>
			<code>Sub OnKeyUp(keyCode As Integer)
	
End Sub</code>
		</event>
		<event name="OnButtonDown6DOF">
			<description>Called when the user clicks on a scene grid. 
"button" defines the ID of the pressed button, 
"pos" specifies the 3D world position of the cursor and "rot" gives you the actual rotation.</description>
			<code>Sub OnButtonDown6DOF(button As Integer, pos As Vertex, rot As Vertex)
	
End Sub</code>
		</event>
		<event name="OnButtonUp6DOF">
			<description>Called whenever the user releases a mouse button.
"button" defines the ID of the pressed button, 
"pos" specifies the 3D world position of the cursor and "rot" gives you the actual rotation.</description>
			<code>Sub OnButtonUp6DOF(button As Integer, pos As Vertex, rot As Vertex)

End Sub</code>
		</event>
		<event name="OnMove6DOF">
			<description>Called when the user moves the cursor on a scene grid. 
"button" defines the ID of the pressed button, 
"pos" specifies the 3D world position of the cursor and "rot" gives you the actual rotation.</description>
			<code>Sub OnMove6DOF(button As Integer, pos As Vertex, rot As Vertex)
	
End Sub</code>
		</event>
		<event name="OnMoveRelative6DOF">
			<description>Called when the user moves the cursor on a scene grid. 
"button" defines the ID of the pressed button, 
"pos" specifies the offset vector to the last 6DOF position of the cursor and "rot" gives you the actual rotation.

</description>
			<code>Sub OnMoveRelative6DOF(button As Integer, pos As Vertex, rot As Vertex)
	
End Sub</code>
		</event>
		<event name="OnScale6DOF">
			<description>Called when the user performs a scale operation (e.g.: with a multi-touch device) on a scene grid. 
"button" defines the ID of the pressed button and "scale" specifies the actual scale factor.</description>
			<code>Sub OnScale6DOF(button As Integer, scale As Vertex)
	
End Sub</code>
		</event>
		<event name="OnMTHit">
			<description>Called when the user touches this object (where this scriptplugininstance resides on) at a multi-touch device. stroke gives you the stroke ID of the multi-touch operation. x and y specify the hit position in screen coordinates. This callback is used to instantiate a certain control in the multi-touch server.</description>
			<code>Sub OnMTHit(stroke As Integer, x As Integer, y As Integer)
	
End Sub</code>
		</event>
		<event name="OnMTMenu">
			<description>Called when the user performs a menu gesture on the multi-touch device. x and y specify the hit position in screen coordinates.</description>
			<code>Sub OnMTMenu(x As Integer, y As Integer)
	
End Sub</code>
		</event>
		<event name="OnMTControlPZR2D">
			<description>Called when a PZR2D control was registered. x and y specify the hit position in screen coordinates, rot gives you the object rotation, scale holds the scale factor and pressure contains the current mean contact pressure.</description>
			<code>Sub OnMTControlPZR2D(x As Integer, y As Integer rot As Vertex, scale As Vertex, pressure As Double)
	
End Sub</code>
		</event>
		<event name="OnMTControlButton">
			<description>Called when a Button control was registered. strokes contains the current hit count on the button object and pressure defines the mean contact pressure.</description>
			<code>Sub OnMTControlButton(strokes As Integer, pressure As Double)
	
End Sub</code>
		</event>
		<event name="OnMTControlInactive">
			<description>Called when a registered multi-touch control became inactive (all strokes were removed from the object).</description>
			<code>Sub OnMTControlInactive()
	
End Sub</code>
		</event>
		<event name="OnMouseMove">
			<description>Called whenever the mouse cursor is moved within the output window. "x" and "y" specify the cursor position in screen coordinates.</description>
			<code>Sub OnMouseMove(x As Integer, y As Integer)
	
End Sub</code>
		</event>
		<event name="OnLButtonDown">
			<description>Called whenever the user presses the left mouse button.</description>
			<code>Sub OnLButtonDown()
	
End Sub</code>
		</event>
		<event name="OnMButtonDown">
			<description>Called whenever the user presses the middle mouse button.</description>
			<code>Sub OnMButtonDown()
	
End Sub</code>
		</event>
		<event name="OnRButtonDown">
			<description>Called whenever the user presses the right mouse button.</description>
			<code>Sub OnRButtonDown()
	
End Sub</code>
		</event>
		<event name="OnLButtonUp">
			<description>Called whenever the user releases the left mouse button.</description>
			<code>Sub OnLButtonUp()
	
End Sub</code>
		</event>
		<event name="OnMButtonUp">
			<description>Called whenever the user releases the middle mouse button.</description>
			<code>Sub OnMButtonUp()
	
End Sub</code>
		</event>
		<event name="OnRButtonUp">
			<description>Called whenever the user releases the right mouse button.</description>
			<code>Sub OnRButtonUp()
	
End Sub</code>
		</event>
		<event name="OnMouseWheel">
			<description>Called whenever the mouse wheel is rotated within the output window.</description>
			<code>Sub OnMouseWheel(distance As Integer)
	
End Sub</code>
		</event>
		<event name="OnSharedMemoryVariableChanged">
			<description>Called when a variable in a SharedMemory map is changed. The SharedMemory map and the name of the variable are passed to this procedure as parameters. The name of the variable must previously be registered to the SharedMemory map by calling its RegisterChangedCallback procedure.</description>
			<code>Sub OnSharedMemoryVariableChanged(map As SharedMemory, mapKey As String)
	
End Sub</code>
		</event>
		<event name="OnSharedMemoryVariableDeleted">
			<description>Called when a variable in a SharedMemory map is deleted. The SharedMemory map and the name of the variable are passed to this procedure as parameters. The name of the variable must previously be registered to the SharedMemory map by calling its RegisterChangedCallback procedure.</description>
			<code>Sub OnSharedMemoryVariableDeleted(map As SharedMemory, mapKey As String)
	
End Sub</code>
		</event>
		<event name="OnGeometryChanged">
			<description>Called when a geometry changed which was registered with RegisterChangedCallback or RegisterTextChangedCallback before.</description>
			<code>Sub OnGeometryChanged(geom As Geometry)
	
End Sub</code>
		</event>
	</container_script_events>
	<scene_script_events>
		<event name="OnInitParameters">
			<description>This procedure must contain all Register... calls (such as RegisterParameterInt), which are used to define the script's parameters. For locally defined scripts, this callback is invoked once for every script instance, immediately before OnInit, while for plugin scripts, it is called at system startup.</description>
			<code>Sub OnInitParameters()
	
End Sub</code>
		</event>
		<event name="OnInit">
			<description>Called after a script instance has been created (e.g. by pressing Compile and Run or by loading a scene with a script). Initialization code should be placed here.</description>
			<code>Sub OnInit()
	
End Sub</code>
		</event>
		<event name="OnExecPerField">
			<description>Called once for every field.</description>
			<code>Sub OnExecPerField()
	
End Sub</code>
		</event>
		<event name="OnExecAction">
			<description>Called when the user clicks on any push button defined by RegisterPushButton. If the script defines several push buttons, use buttonId to determine which button has been clicked on.</description>
			<code>Sub OnExecAction(buttonId As Integer)
	
End Sub</code>
		</event>
		<event name="OnGuiStatus">
			<description>Called if the GUI wants to refresh the state of the UI. This would be the proper place where the plugin can set the UI state to enabled/disabled with SendGuiStatus or shown/hidden with SendGuiParameterShow.</description>
			<code>Sub OnGuiStatus()
	
End Sub</code>
		</event>
		<event name="OnParameterChanged">
			<description>Called whenever the user changes the value of script parameter defined by any of the RegisterParameter... functions.</description>
			<code>Sub OnParameterChanged(parameterName As String)
	
End Sub</code>
		</event>
		<event name="OnSharedMemoryVariableChanged">
			<description>Called when a variable in a SharedMemory map is changed. The SharedMemory map and the name of the variable are passed to this procedure as parameters. The name of the variable must previously be registered to the SharedMemory map by calling its RegisterChangedCallback procedure.</description>
			<code>Sub OnSharedMemoryVariableChanged(map As SharedMemory, mapKey As String)
	
End Sub</code>
		</event>
		<event name="OnSharedMemoryVariableDeleted">
			<description>Called when a variable in a SharedMemory map is deleted. The SharedMemory map and the name of the variable are passed to this procedure as parameters. The name of the variable must previously be registered to the SharedMemory map by calling its RegisterChangedCallback procedure.</description>
			<code>Sub OnSharedMemoryVariableDeleted(map As SharedMemory, mapKey As String)
	
End Sub</code>
		</event>
		<event name="OnGeometryChanged">
			<description>Called when a geometry changed which was registered with RegisterChangedCallback or RegisterTextChangedCallback before.</description>
			<code>Sub OnGeometryChanged(geom As Geometry)
	
End Sub</code>
		</event>
	</scene_script_events>
</event_definitions>